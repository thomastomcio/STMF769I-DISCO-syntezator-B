
laboratoryjny.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012818  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08012a10  08012a10  00022a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012b74  08012b74  000300e4  2**0
                  CONTENTS
  4 .ARM          00000008  08012b74  08012b74  00022b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012b7c  08012b7c  000300e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08012b7c  08012b7c  00022b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08012b84  08012b84  00022b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  08012b8c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ba04  20000100  08012c70  00030100  2**5
                  ALLOC
 10 ._user_heap_stack 00041004  2000bb04  08012c70  0003bb04  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000300e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00040fb7  00000000  00000000  00030112  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007186  00000000  00000000  000710c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001fe0  00000000  00000000  00078250  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d40  00000000  00000000  0007a230  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003a2f9  00000000  00000000  0007bf70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00022ea5  00000000  00000000  000b6269  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00126a40  00000000  00000000  000d910e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ffb4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000884c  00000000  00000000  001ffbcc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000100 	.word	0x20000100
 8000214:	00000000 	.word	0x00000000
 8000218:	080129f8 	.word	0x080129f8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000104 	.word	0x20000104
 8000234:	080129f8 	.word	0x080129f8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	6039      	str	r1, [r7, #0]
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	4618      	mov	r0, r3
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <Midi_process>:

//uint32_t PlaybackPosition = 0;
//std::vector<uint8_t> kolejka;

void Midi_process()
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0

	if(new_note_number_byte)
 8000556:	4b43      	ldr	r3, [pc, #268]	; (8000664 <Midi_process+0x114>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d011      	beq.n	8000582 <Midi_process+0x32>
	{
		notes_to_play.push_back(note_number_byte);
 800055e:	4942      	ldr	r1, [pc, #264]	; (8000668 <Midi_process+0x118>)
 8000560:	4842      	ldr	r0, [pc, #264]	; (800066c <Midi_process+0x11c>)
 8000562:	f000 f89c 	bl	800069e <_ZNSt6vectorIhSaIhEE9push_backERKh>
		new_note_number_byte = false;
 8000566:	4b3f      	ldr	r3, [pc, #252]	; (8000664 <Midi_process+0x114>)
 8000568:	2200      	movs	r2, #0
 800056a:	701a      	strb	r2, [r3, #0]
		grana = notes_to_play[0];
 800056c:	2100      	movs	r1, #0
 800056e:	483f      	ldr	r0, [pc, #252]	; (800066c <Midi_process+0x11c>)
 8000570:	f000 f8ba 	bl	80006e8 <_ZNSt6vectorIhSaIhEEixEj>
 8000574:	4603      	mov	r3, r0
 8000576:	781a      	ldrb	r2, [r3, #0]
 8000578:	4b3d      	ldr	r3, [pc, #244]	; (8000670 <Midi_process+0x120>)
 800057a:	701a      	strb	r2, [r3, #0]
		play_flag=1;
 800057c:	4b3d      	ldr	r3, [pc, #244]	; (8000674 <Midi_process+0x124>)
 800057e:	2201      	movs	r2, #1
 8000580:	701a      	strb	r2, [r3, #0]
//	if (notes_to_play.size()==1 && zagrana)
//	{
//		play_flag=1;
//		zagrana=0;
//	}
	if(!notes_to_play.empty() && !zagrana)
 8000582:	483a      	ldr	r0, [pc, #232]	; (800066c <Midi_process+0x11c>)
 8000584:	f000 f8bf 	bl	8000706 <_ZNKSt6vectorIhSaIhEE5emptyEv>
 8000588:	4603      	mov	r3, r0
 800058a:	f083 0301 	eor.w	r3, r3, #1
 800058e:	b2db      	uxtb	r3, r3
 8000590:	2b00      	cmp	r3, #0
 8000592:	d008      	beq.n	80005a6 <Midi_process+0x56>
 8000594:	4b38      	ldr	r3, [pc, #224]	; (8000678 <Midi_process+0x128>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	f083 0301 	eor.w	r3, r3, #1
 800059c:	b2db      	uxtb	r3, r3
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <Midi_process+0x56>
 80005a2:	2301      	movs	r3, #1
 80005a4:	e000      	b.n	80005a8 <Midi_process+0x58>
 80005a6:	2300      	movs	r3, #0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d006      	beq.n	80005ba <Midi_process+0x6a>
	{
		play_flag=1;
 80005ac:	4b31      	ldr	r3, [pc, #196]	; (8000674 <Midi_process+0x124>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	701a      	strb	r2, [r3, #0]
		zagrana=0;
 80005b2:	4b31      	ldr	r3, [pc, #196]	; (8000678 <Midi_process+0x128>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	701a      	strb	r2, [r3, #0]
//	data_parse();
//		counter ++;
//		msgRdyFlag = 0;
//		kolejka.push_back(uartMsgData);

}
 80005b8:	e050      	b.n	800065c <Midi_process+0x10c>
	else if(!notes_to_play.empty() && zagrana && note_stop)
 80005ba:	482c      	ldr	r0, [pc, #176]	; (800066c <Midi_process+0x11c>)
 80005bc:	f000 f8a3 	bl	8000706 <_ZNKSt6vectorIhSaIhEE5emptyEv>
 80005c0:	4603      	mov	r3, r0
 80005c2:	f083 0301 	eor.w	r3, r3, #1
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d009      	beq.n	80005e0 <Midi_process+0x90>
 80005cc:	4b2a      	ldr	r3, [pc, #168]	; (8000678 <Midi_process+0x128>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d005      	beq.n	80005e0 <Midi_process+0x90>
 80005d4:	4b29      	ldr	r3, [pc, #164]	; (800067c <Midi_process+0x12c>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <Midi_process+0x90>
 80005dc:	2301      	movs	r3, #1
 80005de:	e000      	b.n	80005e2 <Midi_process+0x92>
 80005e0:	2300      	movs	r3, #0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d034      	beq.n	8000650 <Midi_process+0x100>
		if(note_stop)
 80005e6:	4b25      	ldr	r3, [pc, #148]	; (800067c <Midi_process+0x12c>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d002      	beq.n	80005f4 <Midi_process+0xa4>
			initialized=0;
 80005ee:	4b24      	ldr	r3, [pc, #144]	; (8000680 <Midi_process+0x130>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	701a      	strb	r2, [r3, #0]
		notes_to_play.erase(notes_to_play.begin());
 80005f4:	481d      	ldr	r0, [pc, #116]	; (800066c <Midi_process+0x11c>)
 80005f6:	f000 f8a1 	bl	800073c <_ZNSt6vectorIhSaIhEE5beginEv>
 80005fa:	4603      	mov	r3, r0
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	1d3a      	adds	r2, r7, #4
 8000600:	463b      	mov	r3, r7
 8000602:	4611      	mov	r1, r2
 8000604:	4618      	mov	r0, r3
 8000606:	f000 f8a9 	bl	800075c <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1IPhEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 800060a:	6839      	ldr	r1, [r7, #0]
 800060c:	4817      	ldr	r0, [pc, #92]	; (800066c <Midi_process+0x11c>)
 800060e:	f000 f8b6 	bl	800077e <_ZNSt6vectorIhSaIhEE5eraseEN9__gnu_cxx17__normal_iteratorIPKhS1_EE>
		if(!notes_to_play.empty())
 8000612:	4816      	ldr	r0, [pc, #88]	; (800066c <Midi_process+0x11c>)
 8000614:	f000 f877 	bl	8000706 <_ZNKSt6vectorIhSaIhEE5emptyEv>
 8000618:	4603      	mov	r3, r0
 800061a:	f083 0301 	eor.w	r3, r3, #1
 800061e:	b2db      	uxtb	r3, r3
 8000620:	2b00      	cmp	r3, #0
 8000622:	d00b      	beq.n	800063c <Midi_process+0xec>
			grana = notes_to_play[0];
 8000624:	2100      	movs	r1, #0
 8000626:	4811      	ldr	r0, [pc, #68]	; (800066c <Midi_process+0x11c>)
 8000628:	f000 f85e 	bl	80006e8 <_ZNSt6vectorIhSaIhEEixEj>
 800062c:	4603      	mov	r3, r0
 800062e:	781a      	ldrb	r2, [r3, #0]
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <Midi_process+0x120>)
 8000632:	701a      	strb	r2, [r3, #0]
			play_flag=1;
 8000634:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <Midi_process+0x124>)
 8000636:	2201      	movs	r2, #1
 8000638:	701a      	strb	r2, [r3, #0]
 800063a:	e002      	b.n	8000642 <Midi_process+0xf2>
			play_flag=0;
 800063c:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <Midi_process+0x124>)
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]
		zagrana=0;
 8000642:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <Midi_process+0x128>)
 8000644:	2200      	movs	r2, #0
 8000646:	701a      	strb	r2, [r3, #0]
		note_stop=0;
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <Midi_process+0x12c>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
}
 800064e:	e005      	b.n	800065c <Midi_process+0x10c>
		play_flag=0;
 8000650:	4b08      	ldr	r3, [pc, #32]	; (8000674 <Midi_process+0x124>)
 8000652:	2200      	movs	r2, #0
 8000654:	701a      	strb	r2, [r3, #0]
		zagrana=0;
 8000656:	4b08      	ldr	r3, [pc, #32]	; (8000678 <Midi_process+0x128>)
 8000658:	2200      	movs	r2, #0
 800065a:	701a      	strb	r2, [r3, #0]
}
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	2000012e 	.word	0x2000012e
 8000668:	2000012c 	.word	0x2000012c
 800066c:	2000011c 	.word	0x2000011c
 8000670:	20000128 	.word	0x20000128
 8000674:	20000129 	.word	0x20000129
 8000678:	2000214a 	.word	0x2000214a
 800067c:	2000012f 	.word	0x2000012f
 8000680:	2000214b 	.word	0x2000214b

08000684 <_ZNSt6vectorIhSaIhEEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4618      	mov	r0, r3
 8000690:	f000 f8a8 	bl	80007e4 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	4618      	mov	r0, r3
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}

0800069e <_ZNSt6vectorIhSaIhEE9push_backERKh>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 800069e:	b580      	push	{r7, lr}
 80006a0:	b082      	sub	sp, #8
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
 80006a6:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	685a      	ldr	r2, [r3, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	689b      	ldr	r3, [r3, #8]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d00c      	beq.n	80006ce <_ZNSt6vectorIhSaIhEE9push_backERKh+0x30>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	683a      	ldr	r2, [r7, #0]
 80006bc:	4619      	mov	r1, r3
 80006be:	f000 f8c2 	bl	8000846 <_ZNSt16allocator_traitsISaIhEE9constructIhJRKhEEEvRS0_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	685b      	ldr	r3, [r3, #4]
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	605a      	str	r2, [r3, #4]
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 80006cc:	e008      	b.n	80006e0 <_ZNSt6vectorIhSaIhEE9push_backERKh+0x42>
	  _M_realloc_insert(end(), __x);
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f000 f8cc 	bl	800086c <_ZNSt6vectorIhSaIhEE3endEv>
 80006d4:	4603      	mov	r3, r0
 80006d6:	683a      	ldr	r2, [r7, #0]
 80006d8:	4619      	mov	r1, r3
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f000 f8d8 	bl	8000890 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>
      }
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <_ZNSt6vectorIhSaIhEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	4413      	add	r3, r2
      }
 80006fa:	4618      	mov	r0, r3
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr

08000706 <_ZNKSt6vectorIhSaIhEE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8000706:	b580      	push	{r7, lr}
 8000708:	b084      	sub	sp, #16
 800070a:	af00      	add	r7, sp, #0
 800070c:	6078      	str	r0, [r7, #4]
      { return begin() == end(); }
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f000 f946 	bl	80009a0 <_ZNKSt6vectorIhSaIhEE5beginEv>
 8000714:	4603      	mov	r3, r0
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f000 f955 	bl	80009c8 <_ZNKSt6vectorIhSaIhEE3endEv>
 800071e:	4603      	mov	r3, r0
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	f107 020c 	add.w	r2, r7, #12
 8000726:	f107 0308 	add.w	r3, r7, #8
 800072a:	4611      	mov	r1, r2
 800072c:	4618      	mov	r0, r3
 800072e:	f000 f95f 	bl	80009f0 <_ZN9__gnu_cxxeqIPKhSt6vectorIhSaIhEEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 8000732:	4603      	mov	r3, r0
 8000734:	4618      	mov	r0, r3
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <_ZNSt6vectorIhSaIhEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	f107 030c 	add.w	r3, r7, #12
 800074a:	4611      	mov	r1, r2
 800074c:	4618      	mov	r0, r3
 800074e:	f000 f967 	bl	8000a20 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	4618      	mov	r0, r3
 8000756:	3710      	adds	r7, #16
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1IPhEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }

      // Allow iterator to const_iterator conversion
      template<typename _Iter>
        __normal_iterator(const __normal_iterator<_Iter,
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]
			  typename __enable_if<
      	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
        : _M_current(__i.base()) { }
 8000766:	6838      	ldr	r0, [r7, #0]
 8000768:	f000 f96a 	bl	8000a40 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 800076c:	4603      	mov	r3, r0
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	4618      	mov	r0, r3
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <_ZNSt6vectorIhSaIhEE5eraseEN9__gnu_cxx17__normal_iteratorIPKhS1_EE>:
       *  the pointed-to memory is not touched in any way.  Managing
       *  the pointer is the user's responsibility.
       */
      iterator
#if __cplusplus >= 201103L
      erase(const_iterator __position)
 800077e:	b580      	push	{r7, lr}
 8000780:	b084      	sub	sp, #16
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
 8000786:	6039      	str	r1, [r7, #0]
      { return _M_erase(begin() + (__position - cbegin())); }
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f7ff ffd7 	bl	800073c <_ZNSt6vectorIhSaIhEE5beginEv>
 800078e:	4603      	mov	r3, r0
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f000 f95f 	bl	8000a56 <_ZNKSt6vectorIhSaIhEE6cbeginEv>
 8000798:	4603      	mov	r3, r0
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	f107 020c 	add.w	r2, r7, #12
 80007a0:	463b      	mov	r3, r7
 80007a2:	4611      	mov	r1, r2
 80007a4:	4618      	mov	r0, r3
 80007a6:	f000 f96a 	bl	8000a7e <_ZN9__gnu_cxxmiIPKhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 80007aa:	4602      	mov	r2, r0
 80007ac:	f107 0308 	add.w	r3, r7, #8
 80007b0:	4611      	mov	r1, r2
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 f978 	bl	8000aa8 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEplEi>
 80007b8:	4603      	mov	r3, r0
 80007ba:	4619      	mov	r1, r3
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f000 f98a 	bl	8000ad6 <_ZNSt6vectorIhSaIhEE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPhS1_EE>
 80007c2:	4603      	mov	r3, r0
 80007c4:	4618      	mov	r0, r3
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>:
      struct _Vector_impl
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f000 f9cf 	bl	8000b78 <_ZNSaIhED1Ev>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4618      	mov	r0, r3
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>:
      _Vector_base()
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 f9ad 	bl	8000b4e <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	4618      	mov	r0, r3
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6819      	ldr	r1, [r3, #0]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 800080e:	461a      	mov	r2, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	1ad3      	subs	r3, r2, r3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8000816:	461a      	mov	r2, r3
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f000 f9b9 	bl	8000b90 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
		      - this->_M_impl._M_start); }
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff ffd3 	bl	80007cc <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4618      	mov	r0, r3
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4618      	mov	r0, r3
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr

08000846 <_ZNSt16allocator_traitsISaIhEE9constructIhJRKhEEEvRS0_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8000846:	b580      	push	{r7, lr}
 8000848:	b084      	sub	sp, #16
 800084a:	af00      	add	r7, sp, #0
 800084c:	60f8      	str	r0, [r7, #12]
 800084e:	60b9      	str	r1, [r7, #8]
 8000850:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f7ff ffec 	bl	8000830 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8000858:	4603      	mov	r3, r0
 800085a:	461a      	mov	r2, r3
 800085c:	68b9      	ldr	r1, [r7, #8]
 800085e:	68f8      	ldr	r0, [r7, #12]
 8000860:	f000 f9a9 	bl	8000bb6 <_ZN9__gnu_cxx13new_allocatorIhE9constructIhJRKhEEEvPT_DpOT0_>
 8000864:	bf00      	nop
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <_ZNSt6vectorIhSaIhEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	1d1a      	adds	r2, r3, #4
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	4611      	mov	r1, r2
 800087e:	4618      	mov	r0, r3
 8000880:	f000 f8ce 	bl	8000a20 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	4618      	mov	r0, r3
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
	...

08000890 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8000890:	b5b0      	push	{r4, r5, r7, lr}
 8000892:	b08a      	sub	sp, #40	; 0x28
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 800089c:	4a3f      	ldr	r2, [pc, #252]	; (800099c <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x10c>)
 800089e:	2101      	movs	r1, #1
 80008a0:	68f8      	ldr	r0, [r7, #12]
 80008a2:	f000 f9a1 	bl	8000be8 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 80008a6:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 80008a8:	68f8      	ldr	r0, [r7, #12]
 80008aa:	f7ff ff47 	bl	800073c <_ZNSt6vectorIhSaIhEE5beginEv>
 80008ae:	4603      	mov	r3, r0
 80008b0:	617b      	str	r3, [r7, #20]
 80008b2:	f107 0214 	add.w	r2, r7, #20
 80008b6:	f107 0308 	add.w	r3, r7, #8
 80008ba:	4611      	mov	r1, r2
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 f9db 	bl	8000c78 <_ZN9__gnu_cxxmiIPhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 80008c2:	4603      	mov	r3, r0
 80008c4:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 f9e9 	bl	8000ca2 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 80008d0:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 80008d6:	68fc      	ldr	r4, [r7, #12]
 80008d8:	69fa      	ldr	r2, [r7, #28]
 80008da:	6a3b      	ldr	r3, [r7, #32]
 80008dc:	18d5      	adds	r5, r2, r3
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f7ff ffa6 	bl	8000830 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 80008e4:	4603      	mov	r3, r0
 80008e6:	461a      	mov	r2, r3
 80008e8:	4629      	mov	r1, r5
 80008ea:	4620      	mov	r0, r4
 80008ec:	f7ff ffab 	bl	8000846 <_ZNSt16allocator_traitsISaIhEE9constructIhJRKhEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80008f0:	2300      	movs	r3, #0
 80008f2:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	681c      	ldr	r4, [r3, #0]
 80008f8:	f107 0308 	add.w	r3, r7, #8
 80008fc:	4618      	mov	r0, r3
 80008fe:	f000 f89f 	bl	8000a40 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8000902:	4603      	mov	r3, r0
 8000904:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	4618      	mov	r0, r3
 800090a:	f000 f9de 	bl	8000cca <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800090e:	4603      	mov	r3, r0
	  __new_finish
 8000910:	69fa      	ldr	r2, [r7, #28]
 8000912:	4629      	mov	r1, r5
 8000914:	4620      	mov	r0, r4
 8000916:	f000 f9e3 	bl	8000ce0 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 800091a:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 800091c:	69bb      	ldr	r3, [r7, #24]
 800091e:	3301      	adds	r3, #1
 8000920:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 8000922:	f107 0308 	add.w	r3, r7, #8
 8000926:	4618      	mov	r0, r3
 8000928:	f000 f88a 	bl	8000a40 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 800092c:	4603      	mov	r3, r0
 800092e:	681c      	ldr	r4, [r3, #0]
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	4618      	mov	r0, r3
 8000938:	f000 f9c7 	bl	8000cca <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800093c:	4603      	mov	r3, r0
	  __new_finish
 800093e:	69ba      	ldr	r2, [r7, #24]
 8000940:	4629      	mov	r1, r5
 8000942:	4620      	mov	r0, r4
 8000944:	f000 f9cc 	bl	8000ce0 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 8000948:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	681c      	ldr	r4, [r3, #0]
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	4618      	mov	r0, r3
 8000956:	f000 f9b8 	bl	8000cca <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800095a:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800095c:	461a      	mov	r2, r3
 800095e:	4629      	mov	r1, r5
 8000960:	4620      	mov	r0, r4
 8000962:	f000 f9e3 	bl	8000d2c <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8000966:	68f8      	ldr	r0, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 8000970:	461a      	mov	r2, r3
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	1ad3      	subs	r3, r2, r3
      _M_deallocate(this->_M_impl._M_start,
 8000978:	461a      	mov	r2, r3
 800097a:	f000 f909 	bl	8000b90 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
      this->_M_impl._M_start = __new_start;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	69fa      	ldr	r2, [r7, #28]
 8000982:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	69ba      	ldr	r2, [r7, #24]
 8000988:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800098a:	69fa      	ldr	r2, [r7, #28]
 800098c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800098e:	441a      	add	r2, r3
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	609a      	str	r2, [r3, #8]
    }
 8000994:	bf00      	nop
 8000996:	3728      	adds	r7, #40	; 0x28
 8000998:	46bd      	mov	sp, r7
 800099a:	bdb0      	pop	{r4, r5, r7, pc}
 800099c:	08012a10 	.word	0x08012a10

080009a0 <_ZNKSt6vectorIhSaIhEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	f107 020c 	add.w	r2, r7, #12
 80009b2:	f107 0308 	add.w	r3, r7, #8
 80009b6:	4611      	mov	r1, r2
 80009b8:	4618      	mov	r0, r3
 80009ba:	f000 f9c5 	bl	8000d48 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	4618      	mov	r0, r3
 80009c2:	3710      	adds	r7, #16
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <_ZNKSt6vectorIhSaIhEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	f107 020c 	add.w	r2, r7, #12
 80009da:	f107 0308 	add.w	r3, r7, #8
 80009de:	4611      	mov	r1, r2
 80009e0:	4618      	mov	r0, r3
 80009e2:	f000 f9b1 	bl	8000d48 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	4618      	mov	r0, r3
 80009ea:	3710      	adds	r7, #16
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <_ZN9__gnu_cxxeqIPKhSt6vectorIhSaIhEEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 80009f0:	b590      	push	{r4, r7, lr}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() == __rhs.base(); }
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f000 f9b4 	bl	8000d68 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>
 8000a00:	4603      	mov	r3, r0
 8000a02:	681c      	ldr	r4, [r3, #0]
 8000a04:	6838      	ldr	r0, [r7, #0]
 8000a06:	f000 f9af 	bl	8000d68 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	429c      	cmp	r4, r3
 8000a10:	bf0c      	ite	eq
 8000a12:	2301      	moveq	r3, #1
 8000a14:	2300      	movne	r3, #0
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	4618      	mov	r0, r3
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd90      	pop	{r4, r7, pc}

08000a20 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4618      	mov	r0, r3
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <_ZNKSt6vectorIhSaIhEE6cbeginEv>:
      cbegin() const noexcept
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b084      	sub	sp, #16
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	f107 020c 	add.w	r2, r7, #12
 8000a68:	f107 0308 	add.w	r3, r7, #8
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f000 f96a 	bl	8000d48 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	4618      	mov	r0, r3
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <_ZN9__gnu_cxxmiIPKhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8000a7e:	b590      	push	{r4, r7, lr}
 8000a80:	b083      	sub	sp, #12
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
 8000a86:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f000 f96d 	bl	8000d68 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	461c      	mov	r4, r3
 8000a94:	6838      	ldr	r0, [r7, #0]
 8000a96:	f000 f967 	bl	8000d68 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	1ae3      	subs	r3, r4, r3
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd90      	pop	{r4, r7, pc}

08000aa8 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	4413      	add	r3, r2
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	f107 020c 	add.w	r2, r7, #12
 8000ac0:	f107 0308 	add.w	r3, r7, #8
 8000ac4:	4611      	mov	r1, r2
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff ffaa 	bl	8000a20 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <_ZNSt6vectorIhSaIhEE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPhS1_EE>:
    vector<_Tp, _Alloc>::
 8000ad6:	b590      	push	{r4, r7, lr}
 8000ad8:	b085      	sub	sp, #20
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
 8000ade:	6039      	str	r1, [r7, #0]
      if (__position + 1 != end())
 8000ae0:	463b      	mov	r3, r7
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff ffdf 	bl	8000aa8 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEplEi>
 8000aea:	4603      	mov	r3, r0
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f7ff febc 	bl	800086c <_ZNSt6vectorIhSaIhEE3endEv>
 8000af4:	4603      	mov	r3, r0
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	f107 020c 	add.w	r2, r7, #12
 8000afc:	f107 0308 	add.w	r3, r7, #8
 8000b00:	4611      	mov	r1, r2
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 f93b 	bl	8000d7e <_ZN9__gnu_cxxneIPhSt6vectorIhSaIhEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d00e      	beq.n	8000b2c <_ZNSt6vectorIhSaIhEE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPhS1_EE+0x56>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 8000b0e:	463b      	mov	r3, r7
 8000b10:	2101      	movs	r1, #1
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff ffc8 	bl	8000aa8 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEplEi>
 8000b18:	4604      	mov	r4, r0
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff fea6 	bl	800086c <_ZNSt6vectorIhSaIhEE3endEv>
 8000b20:	4603      	mov	r3, r0
 8000b22:	683a      	ldr	r2, [r7, #0]
 8000b24:	4619      	mov	r1, r3
 8000b26:	4620      	mov	r0, r4
 8000b28:	f000 f941 	bl	8000dae <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES6_ET0_T_S8_S7_>
      --this->_M_impl._M_finish;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	1e5a      	subs	r2, r3, #1
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	605a      	str	r2, [r3, #4]
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4610      	mov	r0, r2
 8000b40:	f000 f8e7 	bl	8000d12 <_ZNSt16allocator_traitsISaIhEE7destroyIhEEvRS0_PT_>
      return __position;
 8000b44:	683b      	ldr	r3, [r7, #0]
    }
 8000b46:	4618      	mov	r0, r3
 8000b48:	3714      	adds	r7, #20
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd90      	pop	{r4, r7, pc}

08000b4e <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>:
	_Vector_impl()
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b082      	sub	sp, #8
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f000 f941 	bl	8000dde <_ZNSaIhEC1Ev>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2200      	movs	r2, #0
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
	{ }
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4618      	mov	r0, r3
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <_ZNSaIhED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f000 f938 	bl	8000df6 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>:
      _M_deallocate(pointer __p, size_t __n)
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
	if (__p)
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d005      	beq.n	8000bae <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	68b9      	ldr	r1, [r7, #8]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f000 f92f 	bl	8000e0c <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>
      }
 8000bae:	bf00      	nop
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <_ZN9__gnu_cxx13new_allocatorIhE9constructIhJRKhEEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8000bb6:	b590      	push	{r4, r7, lr}
 8000bb8:	b085      	sub	sp, #20
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	60f8      	str	r0, [r7, #12]
 8000bbe:	60b9      	str	r1, [r7, #8]
 8000bc0:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff fe34 	bl	8000830 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	781c      	ldrb	r4, [r3, #0]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	4619      	mov	r1, r3
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	f7ff fcb1 	bl	8000538 <_ZnwjPv>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <_ZN9__gnu_cxx13new_allocatorIhE9constructIhJRKhEEEvPT_DpOT0_+0x2a>
 8000bdc:	4622      	mov	r2, r4
 8000bde:	701a      	strb	r2, [r3, #0]
 8000be0:	bf00      	nop
 8000be2:	3714      	adds	r7, #20
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd90      	pop	{r4, r7, pc}

08000be8 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b087      	sub	sp, #28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8000bf4:	68f8      	ldr	r0, [r7, #12]
 8000bf6:	f000 f918 	bl	8000e2a <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8000bfa:	4604      	mov	r4, r0
 8000bfc:	68f8      	ldr	r0, [r7, #12]
 8000bfe:	f000 f925 	bl	8000e4c <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8000c02:	4603      	mov	r3, r0
 8000c04:	1ae2      	subs	r2, r4, r3
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	bf34      	ite	cc
 8000c0c:	2301      	movcc	r3, #1
 8000c0e:	2300      	movcs	r3, #0
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d003      	beq.n	8000c1e <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f011 fd4e 	bl	80126ba <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + std::max(size(), __n);
 8000c1e:	68f8      	ldr	r0, [r7, #12]
 8000c20:	f000 f914 	bl	8000e4c <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8000c24:	4604      	mov	r4, r0
 8000c26:	68f8      	ldr	r0, [r7, #12]
 8000c28:	f000 f910 	bl	8000e4c <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	f107 0208 	add.w	r2, r7, #8
 8000c34:	f107 0310 	add.w	r3, r7, #16
 8000c38:	4611      	mov	r1, r2
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 f916 	bl	8000e6c <_ZSt3maxIjERKT_S2_S2_>
 8000c40:	4603      	mov	r3, r0
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4423      	add	r3, r4
 8000c46:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8000c48:	68f8      	ldr	r0, [r7, #12]
 8000c4a:	f000 f8ff 	bl	8000e4c <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8000c4e:	4602      	mov	r2, r0
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d306      	bcc.n	8000c64 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x7c>
 8000c56:	68f8      	ldr	r0, [r7, #12]
 8000c58:	f000 f8e7 	bl	8000e2a <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d904      	bls.n	8000c6e <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x86>
 8000c64:	68f8      	ldr	r0, [r7, #12]
 8000c66:	f000 f8e0 	bl	8000e2a <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	e000      	b.n	8000c70 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x88>
 8000c6e:	697b      	ldr	r3, [r7, #20]
      }
 8000c70:	4618      	mov	r0, r3
 8000c72:	371c      	adds	r7, #28
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd90      	pop	{r4, r7, pc}

08000c78 <_ZN9__gnu_cxxmiIPhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8000c78:	b590      	push	{r4, r7, lr}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f7ff fedc 	bl	8000a40 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	461c      	mov	r4, r3
 8000c8e:	6838      	ldr	r0, [r7, #0]
 8000c90:	f7ff fed6 	bl	8000a40 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8000c94:	4603      	mov	r3, r0
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	1ae3      	subs	r3, r4, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd90      	pop	{r4, r7, pc}

08000ca2 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
 8000caa:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d006      	beq.n	8000cc0 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x1e>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6839      	ldr	r1, [r7, #0]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f000 f8ec 	bl	8000e94 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	e000      	b.n	8000cc2 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x20>
 8000cc0:	2300      	movs	r3, #0
      }
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8000cca:	b480      	push	{r7}
 8000ccc:	b083      	sub	sp, #12
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
 8000cec:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8000cee:	68f8      	ldr	r0, [r7, #12]
 8000cf0:	f000 f8df 	bl	8000eb2 <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 8000cf4:	4604      	mov	r4, r0
 8000cf6:	68b8      	ldr	r0, [r7, #8]
 8000cf8:	f000 f8db 	bl	8000eb2 <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 8000cfc:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	4620      	mov	r0, r4
 8000d04:	f000 f8e4 	bl	8000ed0 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>
 8000d08:	4603      	mov	r3, r0
    }
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3714      	adds	r7, #20
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd90      	pop	{r4, r7, pc}

08000d12 <_ZNSt16allocator_traitsISaIhEE7destroyIhEEvRS0_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
 8000d1a:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8000d1c:	6839      	ldr	r1, [r7, #0]
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f000 f8e7 	bl	8000ef2 <_ZN9__gnu_cxx13new_allocatorIhE7destroyIhEEvPT_>
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8000d38:	68b9      	ldr	r1, [r7, #8]
 8000d3a:	68f8      	ldr	r0, [r7, #12]
 8000d3c:	f000 f8e4 	bl	8000f08 <_ZSt8_DestroyIPhEvT_S1_>
    }
 8000d40:	bf00      	nop
 8000d42:	3710      	adds	r7, #16
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4618      	mov	r0, r3
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <_ZN9__gnu_cxxneIPhSt6vectorIhSaIhEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8000d7e:	b590      	push	{r4, r7, lr}
 8000d80:	b083      	sub	sp, #12
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
 8000d86:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f7ff fe59 	bl	8000a40 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	681c      	ldr	r4, [r3, #0]
 8000d92:	6838      	ldr	r0, [r7, #0]
 8000d94:	f7ff fe54 	bl	8000a40 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	bf14      	ite	ne
 8000da0:	2301      	movne	r3, #1
 8000da2:	2300      	moveq	r3, #0
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	4618      	mov	r0, r3
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd90      	pop	{r4, r7, pc}

08000dae <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES6_ET0_T_S8_S7_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    move(_II __first, _II __last, _OI __result)
 8000dae:	b590      	push	{r4, r7, lr}
 8000db0:	b085      	sub	sp, #20
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	60f8      	str	r0, [r7, #12]
 8000db6:	60b9      	str	r1, [r7, #8]
 8000db8:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_InputIteratorConcept<_II>)
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return std::__copy_move_a2<true>(std::__miter_base(__first),
 8000dba:	68f8      	ldr	r0, [r7, #12]
 8000dbc:	f000 f8b1 	bl	8000f22 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEET_S7_>
 8000dc0:	4604      	mov	r4, r0
 8000dc2:	68b8      	ldr	r0, [r7, #8]
 8000dc4:	f000 f8ad 	bl	8000f22 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEET_S7_>
 8000dc8:	4603      	mov	r3, r0
				       std::__miter_base(__last), __result);
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4620      	mov	r0, r4
 8000dd0:	f000 f8b2 	bl	8000f38 <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES6_ET1_T0_S8_S7_>
 8000dd4:	4603      	mov	r3, r0
    }
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3714      	adds	r7, #20
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd90      	pop	{r4, r7, pc}

08000dde <_ZNSaIhEC1Ev>:
      allocator() throw() { }
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f000 f8cc 	bl	8000f84 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000df6:	b480      	push	{r7}
 8000df8:	b083      	sub	sp, #12
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4618      	mov	r0, r3
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	68b9      	ldr	r1, [r7, #8]
 8000e1c:	68f8      	ldr	r0, [r7, #12]
 8000e1e:	f000 f8bc 	bl	8000f9a <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <_ZNKSt6vectorIhSaIhEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f000 f8c9 	bl	8000fcc <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 f8b9 	bl	8000fb4 <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>
 8000e42:	4603      	mov	r3, r0
 8000e44:	4618      	mov	r0, r3
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <_ZNKSt6vectorIhSaIhEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	4618      	mov	r0, r3
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d201      	bcs.n	8000e86 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	e000      	b.n	8000e88 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8000e86:	687b      	ldr	r3, [r7, #4]
    }
 8000e88:	4618      	mov	r0, r3
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	6839      	ldr	r1, [r7, #0]
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f000 f89d 	bl	8000fe2 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b084      	sub	sp, #16
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8000eba:	f107 030c 	add.w	r3, r7, #12
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f000 f8aa 	bl	800101a <_ZNSt13move_iteratorIPhEC1ES0_>
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
 8000edc:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	68b9      	ldr	r1, [r7, #8]
 8000ee2:	68f8      	ldr	r0, [r7, #12]
 8000ee4:	f000 f8a8 	bl	8001038 <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	4618      	mov	r0, r3
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <_ZN9__gnu_cxx13new_allocatorIhE7destroyIhEEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p) { __p->~_Up(); }
 8000ef2:	b480      	push	{r7}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
 8000efa:	6039      	str	r1, [r7, #0]
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <_ZSt8_DestroyIPhEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8000f12:	6839      	ldr	r1, [r7, #0]
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f000 f8a1 	bl	800105c <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>
    }
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEET_S7_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8000f22:	b480      	push	{r7}
 8000f24:	b083      	sub	sp, #12
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
    { return __it; }
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES6_ET1_T0_S8_S7_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8000f38:	b5b0      	push	{r4, r5, r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8000f44:	68f8      	ldr	r0, [r7, #12]
 8000f46:	f000 f894 	bl	8001072 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8000f4a:	4604      	mov	r4, r0
 8000f4c:	68b8      	ldr	r0, [r7, #8]
 8000f4e:	f000 f890 	bl	8001072 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8000f52:	4605      	mov	r5, r0
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f000 f88c 	bl	8001072 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4629      	mov	r1, r5
 8000f60:	4620      	mov	r0, r4
 8000f62:	f000 f894 	bl	800108e <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>
 8000f66:	4603      	mov	r3, r0
 8000f68:	617b      	str	r3, [r7, #20]
					     std::__niter_base(__result)));
 8000f6a:	f107 0214 	add.w	r2, r7, #20
 8000f6e:	f107 0310 	add.w	r3, r7, #16
 8000f72:	4611      	mov	r1, r2
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fd53 	bl	8000a20 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8000f7a:	693b      	ldr	r3, [r7, #16]
    }
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bdb0      	pop	{r4, r5, r7, pc}

08000f84 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>:
      deallocate(pointer __p, size_type)
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b084      	sub	sp, #16
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	60f8      	str	r0, [r7, #12]
 8000fa2:	60b9      	str	r1, [r7, #8]
 8000fa4:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8000fa6:	68b8      	ldr	r0, [r7, #8]
 8000fa8:	f011 fb82 	bl	80126b0 <_ZdlPv>
      }
 8000fac:	bf00      	nop
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f000 f878 	bl	80010b2 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b084      	sub	sp, #16
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	60f8      	str	r0, [r7, #12]
 8000fea:	60b9      	str	r1, [r7, #8]
 8000fec:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8000fee:	68f8      	ldr	r0, [r7, #12]
 8000ff0:	f000 f85f 	bl	80010b2 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	bf8c      	ite	hi
 8000ffc:	2301      	movhi	r3, #1
 8000ffe:	2300      	movls	r3, #0
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8001006:	f011 fb55 	bl	80126b4 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800100a:	68b8      	ldr	r0, [r7, #8]
 800100c:	f011 fb36 	bl	801267c <_Znwj>
 8001010:	4603      	mov	r3, r0
      }
 8001012:	4618      	mov	r0, r3
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <_ZNSt13move_iteratorIPhEC1ES0_>:
      move_iterator(iterator_type __i)
 800101a:	b480      	push	{r7}
 800101c:	b083      	sub	sp, #12
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
 8001022:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	683a      	ldr	r2, [r7, #0]
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4618      	mov	r0, r3
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8001044:	2301      	movs	r3, #1
 8001046:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	68b9      	ldr	r1, [r7, #8]
 800104c:	68f8      	ldr	r0, [r7, #12]
 800104e:	f000 f83c 	bl	80010ca <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>
 8001052:	4603      	mov	r3, r0
    }
 8001054:	4618      	mov	r0, r3
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fcdf 	bl	8000a40 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8001082:	4603      	mov	r3, r0
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800108e:	b580      	push	{r7, lr}
 8001090:	b086      	sub	sp, #24
 8001092:	af00      	add	r7, sp, #0
 8001094:	60f8      	str	r0, [r7, #12]
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 800109a:	2301      	movs	r3, #1
 800109c:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	68b9      	ldr	r1, [r7, #8]
 80010a2:	68f8      	ldr	r0, [r7, #12]
 80010a4:	f000 f821 	bl	80010ea <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80010a8:	4603      	mov	r3, r0
    }
 80010aa:	4618      	mov	r0, r3
 80010ac:	3718      	adds	r7, #24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80010b2:	b480      	push	{r7}
 80010b4:	b083      	sub	sp, #12
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295
 80010be:	4618      	mov	r0, r3
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b084      	sub	sp, #16
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	60f8      	str	r0, [r7, #12]
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	68b9      	ldr	r1, [r7, #8]
 80010da:	68f8      	ldr	r0, [r7, #12]
 80010dc:	f000 f81f 	bl	800111e <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 80010e0:	4603      	mov	r3, r0
 80010e2:	4618      	mov	r0, r3
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b086      	sub	sp, #24
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	60f8      	str	r0, [r7, #12]
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d005      	beq.n	8001110 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	461a      	mov	r2, r3
 8001108:	68f9      	ldr	r1, [r7, #12]
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f011 fb25 	bl	801275a <memmove>
	  return __result + _Num;
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	4413      	add	r3, r2
	}
 8001116:	4618      	mov	r0, r3
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 800111e:	b590      	push	{r4, r7, lr}
 8001120:	b085      	sub	sp, #20
 8001122:	af00      	add	r7, sp, #0
 8001124:	60f8      	str	r0, [r7, #12]
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 800112a:	68f8      	ldr	r0, [r7, #12]
 800112c:	f000 f80f 	bl	800114e <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8001130:	4604      	mov	r4, r0
 8001132:	68b8      	ldr	r0, [r7, #8]
 8001134:	f000 f80b 	bl	800114e <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8001138:	4603      	mov	r3, r0
	       __result));
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	4619      	mov	r1, r3
 800113e:	4620      	mov	r0, r4
 8001140:	f000 f816 	bl	8001170 <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>
 8001144:	4603      	mov	r3, r0
    }
 8001146:	4618      	mov	r0, r3
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	bd90      	pop	{r4, r7, pc}

0800114e <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	4618      	mov	r0, r3
 800115a:	f000 f825 	bl	80011a8 <_ZNKSt13move_iteratorIPhE4baseEv>
 800115e:	4603      	mov	r3, r0
 8001160:	4618      	mov	r0, r3
 8001162:	f000 f82d 	bl	80011c0 <_ZSt12__miter_baseIPhET_S1_>
 8001166:	4603      	mov	r3, r0
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8001170:	b5b0      	push	{r4, r5, r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 800117c:	68f8      	ldr	r0, [r7, #12]
 800117e:	f000 f82a 	bl	80011d6 <_ZSt12__niter_baseIPhET_S1_>
 8001182:	4604      	mov	r4, r0
 8001184:	68b8      	ldr	r0, [r7, #8]
 8001186:	f000 f826 	bl	80011d6 <_ZSt12__niter_baseIPhET_S1_>
 800118a:	4605      	mov	r5, r0
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f000 f822 	bl	80011d6 <_ZSt12__niter_baseIPhET_S1_>
 8001192:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8001194:	461a      	mov	r2, r3
 8001196:	4629      	mov	r1, r5
 8001198:	4620      	mov	r0, r4
 800119a:	f7ff ff78 	bl	800108e <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>
 800119e:	4603      	mov	r3, r0
    }
 80011a0:	4618      	mov	r0, r3
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bdb0      	pop	{r4, r5, r7, pc}

080011a8 <_ZNKSt13move_iteratorIPhE4baseEv>:
      base() const
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <_ZSt12__miter_baseIPhET_S1_>:
    __miter_base(_Iterator __it)
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
    { return __it; }
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4618      	mov	r0, r3
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
    { return __it; }
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4618      	mov	r0, r3
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <_Z41__static_initialization_and_destruction_0ii>:
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d107      	bne.n	800120c <_Z41__static_initialization_and_destruction_0ii+0x20>
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001202:	4293      	cmp	r3, r2
 8001204:	d102      	bne.n	800120c <_Z41__static_initialization_and_destruction_0ii+0x20>
std::vector<uint8_t> notes_to_play;
 8001206:	4809      	ldr	r0, [pc, #36]	; (800122c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001208:	f7ff fa3c 	bl	8000684 <_ZNSt6vectorIhSaIhEEC1Ev>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d107      	bne.n	8001222 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001218:	4293      	cmp	r3, r2
 800121a:	d102      	bne.n	8001222 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800121c:	4803      	ldr	r0, [pc, #12]	; (800122c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800121e:	f000 f807 	bl	8001230 <_ZNSt6vectorIhSaIhEED1Ev>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	2000011c 	.word	0x2000011c

08001230 <_ZNSt6vectorIhSaIhEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8001230:	b5b0      	push	{r4, r5, r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681c      	ldr	r4, [r3, #0]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff fd41 	bl	8000cca <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8001248:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800124a:	461a      	mov	r2, r3
 800124c:	4629      	mov	r1, r5
 800124e:	4620      	mov	r0, r4
 8001250:	f7ff fd6c 	bl	8000d2c <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fad1 	bl	80007fe <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bdb0      	pop	{r4, r5, r7, pc}

08001266 <_GLOBAL__sub_I_notes_to_play>:
 8001266:	b580      	push	{r7, lr}
 8001268:	af00      	add	r7, sp, #0
 800126a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800126e:	2001      	movs	r0, #1
 8001270:	f7ff ffbc 	bl	80011ec <_Z41__static_initialization_and_destruction_0ii>
 8001274:	bd80      	pop	{r7, pc}

08001276 <_GLOBAL__sub_D_notes_to_play>:
 8001276:	b580      	push	{r7, lr}
 8001278:	af00      	add	r7, sp, #0
 800127a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800127e:	2000      	movs	r0, #0
 8001280:	f7ff ffb4 	bl	80011ec <_Z41__static_initialization_and_destruction_0ii>
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <PollingInit>:
bool msgRdyFlag = 0;
bool new_note_number_byte=false;
bool note_stop=0;

void PollingInit()
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	//BSP_LED_Init(LED2);
	//enable interrupt
//	HAL_UART_Transmit(&huart1, &uartMsgData, 1, 0);
	HAL_UART_Receive_IT(&huart1, &uartMsgData, 1);
 800128c:	2201      	movs	r2, #1
 800128e:	4905      	ldr	r1, [pc, #20]	; (80012a4 <PollingInit+0x1c>)
 8001290:	4805      	ldr	r0, [pc, #20]	; (80012a8 <PollingInit+0x20>)
 8001292:	f009 fa3b 	bl	800a70c <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart6, &uartMsgData, 1);
 8001296:	2201      	movs	r2, #1
 8001298:	4902      	ldr	r1, [pc, #8]	; (80012a4 <PollingInit+0x1c>)
 800129a:	4804      	ldr	r0, [pc, #16]	; (80012ac <PollingInit+0x24>)
 800129c:	f009 fa36 	bl	800a70c <HAL_UART_Receive_IT>
}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	2000012a 	.word	0x2000012a
 80012a8:	20006700 	.word	0x20006700
 80012ac:	200067b8 	.word	0x200067b8

080012b0 <PollingRoutine>:

void PollingRoutine()
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
//	if(msgRdyFlag)
//	{
		//msgRdyFlag = 0;
		//osSemaphoreRelease(binarySemUartMsgHandle);
//	}
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
	...

080012c0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	// claim that data is ready to read
	if((prev_uartMsgData & 0xF0) == 0x90 && (uartMsgData & 0xF0) != 0x80)
 80012c8:	4b20      	ldr	r3, [pc, #128]	; (800134c <HAL_UART_RxCpltCallback+0x8c>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012d0:	2b90      	cmp	r3, #144	; 0x90
 80012d2:	d10d      	bne.n	80012f0 <HAL_UART_RxCpltCallback+0x30>
 80012d4:	4b1e      	ldr	r3, [pc, #120]	; (8001350 <HAL_UART_RxCpltCallback+0x90>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012dc:	2b80      	cmp	r3, #128	; 0x80
 80012de:	d007      	beq.n	80012f0 <HAL_UART_RxCpltCallback+0x30>
	{
		note_number_byte = uartMsgData;
 80012e0:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <HAL_UART_RxCpltCallback+0x90>)
 80012e2:	781a      	ldrb	r2, [r3, #0]
 80012e4:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <HAL_UART_RxCpltCallback+0x94>)
 80012e6:	701a      	strb	r2, [r3, #0]
		new_note_number_byte = true;
 80012e8:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <HAL_UART_RxCpltCallback+0x98>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	701a      	strb	r2, [r3, #0]
 80012ee:	e008      	b.n	8001302 <HAL_UART_RxCpltCallback+0x42>
	}
	else if((uartMsgData & 0xF0) == 0x80)
 80012f0:	4b17      	ldr	r3, [pc, #92]	; (8001350 <HAL_UART_RxCpltCallback+0x90>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012f8:	2b80      	cmp	r3, #128	; 0x80
 80012fa:	d102      	bne.n	8001302 <HAL_UART_RxCpltCallback+0x42>
	{
		note_stop=1;
 80012fc:	4b17      	ldr	r3, [pc, #92]	; (800135c <HAL_UART_RxCpltCallback+0x9c>)
 80012fe:	2201      	movs	r2, #1
 8001300:	701a      	strb	r2, [r3, #0]
	}

	//else new_note_number_byte = false;

	msgRdyFlag = 1;
 8001302:	4b17      	ldr	r3, [pc, #92]	; (8001360 <HAL_UART_RxCpltCallback+0xa0>)
 8001304:	2201      	movs	r2, #1
 8001306:	701a      	strb	r2, [r3, #0]
//	data_array.push_back(uartMsgData);
	prev_uartMsgData = uartMsgData;
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <HAL_UART_RxCpltCallback+0x90>)
 800130a:	781a      	ldrb	r2, [r3, #0]
 800130c:	4b0f      	ldr	r3, [pc, #60]	; (800134c <HAL_UART_RxCpltCallback+0x8c>)
 800130e:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart1, &uartMsgData, 1, 0);
 8001310:	2300      	movs	r3, #0
 8001312:	2201      	movs	r2, #1
 8001314:	490e      	ldr	r1, [pc, #56]	; (8001350 <HAL_UART_RxCpltCallback+0x90>)
 8001316:	4813      	ldr	r0, [pc, #76]	; (8001364 <HAL_UART_RxCpltCallback+0xa4>)
 8001318:	f009 f966 	bl	800a5e8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart6, &uartMsgData, 1, 0);
 800131c:	2300      	movs	r3, #0
 800131e:	2201      	movs	r2, #1
 8001320:	490b      	ldr	r1, [pc, #44]	; (8001350 <HAL_UART_RxCpltCallback+0x90>)
 8001322:	4811      	ldr	r0, [pc, #68]	; (8001368 <HAL_UART_RxCpltCallback+0xa8>)
 8001324:	f009 f960 	bl	800a5e8 <HAL_UART_Transmit>
//	if (data_counter < 255)
//		{
//			data_counter++;
//		}else data_counter=0;
	BSP_LED_Toggle(LED2);
 8001328:	2001      	movs	r0, #1
 800132a:	f002 fcef 	bl	8003d0c <BSP_LED_Toggle>


	// enable interrupt again
	HAL_UART_Receive_IT(&huart1, &uartMsgData, 1);
 800132e:	2201      	movs	r2, #1
 8001330:	4907      	ldr	r1, [pc, #28]	; (8001350 <HAL_UART_RxCpltCallback+0x90>)
 8001332:	480c      	ldr	r0, [pc, #48]	; (8001364 <HAL_UART_RxCpltCallback+0xa4>)
 8001334:	f009 f9ea 	bl	800a70c <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart6, &uartMsgData, 1);
 8001338:	2201      	movs	r2, #1
 800133a:	4905      	ldr	r1, [pc, #20]	; (8001350 <HAL_UART_RxCpltCallback+0x90>)
 800133c:	480a      	ldr	r0, [pc, #40]	; (8001368 <HAL_UART_RxCpltCallback+0xa8>)
 800133e:	f009 f9e5 	bl	800a70c <HAL_UART_Receive_IT>


}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	2000012b 	.word	0x2000012b
 8001350:	2000012a 	.word	0x2000012a
 8001354:	2000012c 	.word	0x2000012c
 8001358:	2000012e 	.word	0x2000012e
 800135c:	2000012f 	.word	0x2000012f
 8001360:	2000012d 	.word	0x2000012d
 8001364:	20006700 	.word	0x20006700
 8001368:	200067b8 	.word	0x200067b8

0800136c <Explorer_StorageInit>:
uint16_t NumObs = 0;


/* initialize USB key storage*/
uint8_t Explorer_StorageInit(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* Link the USB Key disk I/O driver */
  if((f_mount(&USBHFatFS, (TCHAR const*)USBHPath, 0) != FR_OK))
 8001370:	2200      	movs	r2, #0
 8001372:	4906      	ldr	r1, [pc, #24]	; (800138c <Explorer_StorageInit+0x20>)
 8001374:	4806      	ldr	r0, [pc, #24]	; (8001390 <Explorer_StorageInit+0x24>)
 8001376:	f00f fe21 	bl	8010fbc <f_mount>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <Explorer_StorageInit+0x18>
  {
    /* FatFs Initialization Error */
    return 1;
 8001380:	2301      	movs	r3, #1
 8001382:	e000      	b.n	8001386 <Explorer_StorageInit+0x1a>
  }
  else
  {
    return 0;
 8001384:	2300      	movs	r3, #0
  }
}
 8001386:	4618      	mov	r0, r3
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	2000affc 	.word	0x2000affc
 8001390:	2000b230 	.word	0x2000b230

08001394 <Explorer_StorageParse>:
  * @brief  Copies disk content in the explorer list.
  * @param  None
  * @retval Operation result
  */
FRESULT Explorer_StorageParse(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b094      	sub	sp, #80	; 0x50
 8001398:	af00      	add	r7, sp, #0
  FRESULT res = FR_OK;
 800139a:	2300      	movs	r3, #0
 800139c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  FILINFO fno;
  DIR dir;
  char *fn;

  res = f_opendir(&dir, USBHPath);
 80013a0:	463b      	mov	r3, r7
 80013a2:	493f      	ldr	r1, [pc, #252]	; (80014a0 <Explorer_StorageParse+0x10c>)
 80013a4:	4618      	mov	r0, r3
 80013a6:	f010 fbfd 	bl	8011ba4 <f_opendir>
 80013aa:	4603      	mov	r3, r0
 80013ac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  FileList.ptr = 0;
 80013b0:	4b3c      	ldr	r3, [pc, #240]	; (80014a4 <Explorer_StorageParse+0x110>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8

  if(res == FR_OK)
 80013b8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d160      	bne.n	8001482 <Explorer_StorageParse+0xee>
  {
    while(USBH_MSC_IsReady(&hUsbHostHS))
 80013c0:	e059      	b.n	8001476 <Explorer_StorageParse+0xe2>
    {
      res = f_readdir(&dir, &fno);
 80013c2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80013c6:	463b      	mov	r3, r7
 80013c8:	4611      	mov	r1, r2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f010 fc83 	bl	8011cd6 <f_readdir>
 80013d0:	4603      	mov	r3, r0
 80013d2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      if(res != FR_OK || fno.fname[0] == 0)
 80013d6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d151      	bne.n	8001482 <Explorer_StorageParse+0xee>
 80013de:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d04d      	beq.n	8001482 <Explorer_StorageParse+0xee>
      {
        break;
      }
      if(fno.fname[0] == '.')
 80013e6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80013ea:	2b2e      	cmp	r3, #46	; 0x2e
 80013ec:	d100      	bne.n	80013f0 <Explorer_StorageParse+0x5c>
      {
        continue;
 80013ee:	e042      	b.n	8001476 <Explorer_StorageParse+0xe2>
      }

      fn = fno.fname;
 80013f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013f4:	3309      	adds	r3, #9
 80013f6:	64bb      	str	r3, [r7, #72]	; 0x48

      if(FileList.ptr < FILEMGR_LIST_DEPDTH)
 80013f8:	4b2a      	ldr	r3, [pc, #168]	; (80014a4 <Explorer_StorageParse+0x110>)
 80013fa:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 80013fe:	2b17      	cmp	r3, #23
 8001400:	d839      	bhi.n	8001476 <Explorer_StorageParse+0xe2>
      {
        if((fno.fattrib & AM_DIR) == 0)
 8001402:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001406:	f003 0310 	and.w	r3, r3, #16
 800140a:	2b00      	cmp	r3, #0
 800140c:	d133      	bne.n	8001476 <Explorer_StorageParse+0xe2>
        {
          if((strstr(fn, "wav")) || (strstr(fn, "WAV")))
 800140e:	4926      	ldr	r1, [pc, #152]	; (80014a8 <Explorer_StorageParse+0x114>)
 8001410:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001412:	f011 fad4 	bl	80129be <strstr>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d106      	bne.n	800142a <Explorer_StorageParse+0x96>
 800141c:	4923      	ldr	r1, [pc, #140]	; (80014ac <Explorer_StorageParse+0x118>)
 800141e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001420:	f011 facd 	bl	80129be <strstr>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d025      	beq.n	8001476 <Explorer_StorageParse+0xe2>
          {
            strncpy((char *)FileList.file[FileList.ptr].name, (char *)fn, FILEMGR_FILE_NAME_SIZE);
 800142a:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <Explorer_StorageParse+0x110>)
 800142c:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8001430:	461a      	mov	r2, r3
 8001432:	4613      	mov	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	4413      	add	r3, r2
 800143c:	4a19      	ldr	r2, [pc, #100]	; (80014a4 <Explorer_StorageParse+0x110>)
 800143e:	4413      	add	r3, r2
 8001440:	3301      	adds	r3, #1
 8001442:	2228      	movs	r2, #40	; 0x28
 8001444:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001446:	4618      	mov	r0, r3
 8001448:	f011 faa4 	bl	8012994 <strncpy>
            FileList.file[FileList.ptr].type = FILETYPE_FILE;
 800144c:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <Explorer_StorageParse+0x110>)
 800144e:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8001452:	461a      	mov	r2, r3
 8001454:	4913      	ldr	r1, [pc, #76]	; (80014a4 <Explorer_StorageParse+0x110>)
 8001456:	4613      	mov	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	4413      	add	r3, r2
 8001460:	440b      	add	r3, r1
 8001462:	2201      	movs	r2, #1
 8001464:	701a      	strb	r2, [r3, #0]
            FileList.ptr++;
 8001466:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <Explorer_StorageParse+0x110>)
 8001468:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 800146c:	3301      	adds	r3, #1
 800146e:	b29a      	uxth	r2, r3
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <Explorer_StorageParse+0x110>)
 8001472:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8
    while(USBH_MSC_IsReady(&hUsbHostHS))
 8001476:	480e      	ldr	r0, [pc, #56]	; (80014b0 <Explorer_StorageParse+0x11c>)
 8001478:	f00b fdc9 	bl	800d00e <USBH_MSC_IsReady>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d19f      	bne.n	80013c2 <Explorer_StorageParse+0x2e>
          }
        }
      }
    }
  }
  NumObs = FileList.ptr;
 8001482:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <Explorer_StorageParse+0x110>)
 8001484:	f8b3 23d8 	ldrh.w	r2, [r3, #984]	; 0x3d8
 8001488:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <Explorer_StorageParse+0x120>)
 800148a:	801a      	strh	r2, [r3, #0]
  f_closedir(&dir);
 800148c:	463b      	mov	r3, r7
 800148e:	4618      	mov	r0, r3
 8001490:	f010 fbfb 	bl	8011c8a <f_closedir>
  return res;
 8001494:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8001498:	4618      	mov	r0, r3
 800149a:	3750      	adds	r7, #80	; 0x50
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	2000affc 	.word	0x2000affc
 80014a4:	20002274 	.word	0x20002274
 80014a8:	08012a2c 	.word	0x08012a2c
 80014ac:	08012a30 	.word	0x08012a30
 80014b0:	2000b464 	.word	0x2000b464
 80014b4:	20000130 	.word	0x20000130

080014b8 <Explorer_Process>:
  * @brief  Shows audio file (*.wav) on the root
  * @param  None
  * @retval None
  */
uint8_t Explorer_Process(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  //uint8_t i = 0;
  //uint8_t line_idx = 0;
  if(Explorer_StorageInit() == FR_OK)
 80014bc:	f7ff ff56 	bl	800136c <Explorer_StorageInit>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d10f      	bne.n	80014e6 <Explorer_Process+0x2e>
  {
    if(Explorer_StorageParse() ==  FR_OK)
 80014c6:	f7ff ff65 	bl	8001394 <Explorer_StorageParse>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d108      	bne.n	80014e2 <Explorer_Process+0x2a>
    {
      if(FileList.ptr > 0)
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <Explorer_Process+0x34>)
 80014d2:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <Explorer_Process+0x26>
      {
        return 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	e004      	b.n	80014e8 <Explorer_Process+0x30>
      }
      return 1;
 80014de:	2301      	movs	r3, #1
 80014e0:	e002      	b.n	80014e8 <Explorer_Process+0x30>
    }
    return 2;
 80014e2:	2302      	movs	r3, #2
 80014e4:	e000      	b.n	80014e8 <Explorer_Process+0x30>
  }
  else
  {
    return 3;
 80014e6:	2303      	movs	r3, #3
  }
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20002274 	.word	0x20002274

080014f0 <Explorer_GetWavObjectNumber>:
  * @brief  Gets Wav Object Number.
  * @param  None
  * @retval None
  */
uint16_t Explorer_GetWavObjectNumber(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
//	char buffer[5];
//	sprintf(signal_text, itoa(NumObs, buffer, 10));
	return NumObs;
 80014f4:	4b03      	ldr	r3, [pc, #12]	; (8001504 <Explorer_GetWavObjectNumber+0x14>)
 80014f6:	881b      	ldrh	r3, [r3, #0]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20000130 	.word	0x20000130

08001508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800150c:	f003 f8d1 	bl	80046b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001510:	f000 f834 	bl	800157c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  BSP_LED_Init(LED1);
 8001514:	2000      	movs	r0, #0
 8001516:	f002 fbaf 	bl	8003c78 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 800151a:	2001      	movs	r0, #1
 800151c:	f002 fbac 	bl	8003c78 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 8001520:	2100      	movs	r1, #0
 8001522:	2000      	movs	r0, #0
 8001524:	f002 fc0c 	bl	8003d40 <BSP_PB_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001528:	f000 f9fc 	bl	8001924 <MX_GPIO_Init>
  MX_DMA_Init();
 800152c:	f000 f9dc 	bl	80018e8 <MX_DMA_Init>
  MX_I2C4_Init();
 8001530:	f000 f904 	bl	800173c <MX_I2C4_Init>
  MX_SAI1_Init();
 8001534:	f000 f942 	bl	80017bc <MX_SAI1_Init>
  MX_USART1_UART_Init();
 8001538:	f000 f976 	bl	8001828 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800153c:	f000 f9a4 	bl	8001888 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8001540:	f00a ff22 	bl	800c388 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8001544:	f010 fca6 	bl	8011e94 <MX_USB_HOST_Init>
  MX_DFSDM1_Init();
 8001548:	f000 f8c0 	bl	80016cc <MX_DFSDM1_Init>
  /* USER CODE BEGIN 2 */
  AUDIO_PLAYER_Init();
 800154c:	f000 fe28 	bl	80021a0 <AUDIO_PLAYER_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//	uint32_t PlaybackPosition = 0;
//	int32_t freq= 1000;

	PollingInit();
 8001550:	f7ff fe9a 	bl	8001288 <PollingInit>
//				buff_out[j+position] = 0;
//			}
//
//		//		}
//		}
	PollingRoutine();
 8001554:	f7ff feac 	bl	80012b0 <PollingRoutine>

	if(BSP_PB_GetState(BUTTON_WAKEUP))
 8001558:	2000      	movs	r0, #0
 800155a:	f002 fc45 	bl	8003de8 <BSP_PB_GetState>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d002      	beq.n	800156a <main+0x62>
	{
	  button_clicked=1;
 8001564:	4b04      	ldr	r3, [pc, #16]	; (8001578 <main+0x70>)
 8001566:	2201      	movs	r2, #1
 8001568:	701a      	strb	r2, [r3, #0]
	}
	Midi_process();
 800156a:	f7fe fff1 	bl	8000550 <Midi_process>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800156e:	f010 fcb7 	bl	8011ee0 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    AUDIO_MenuProcess();
 8001572:	f000 fa4b 	bl	8001a0c <AUDIO_MenuProcess>
  {
 8001576:	e7ed      	b.n	8001554 <main+0x4c>
 8001578:	20000132 	.word	0x20000132

0800157c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b0b8      	sub	sp, #224	; 0xe0
 8001580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001582:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001586:	2234      	movs	r2, #52	; 0x34
 8001588:	2100      	movs	r1, #0
 800158a:	4618      	mov	r0, r3
 800158c:	f011 f8fe 	bl	801278c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001590:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015a0:	f107 0308 	add.w	r3, r7, #8
 80015a4:	2290      	movs	r2, #144	; 0x90
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f011 f8ef 	bl	801278c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ae:	4b44      	ldr	r3, [pc, #272]	; (80016c0 <SystemClock_Config+0x144>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	4a43      	ldr	r2, [pc, #268]	; (80016c0 <SystemClock_Config+0x144>)
 80015b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ba:	4b41      	ldr	r3, [pc, #260]	; (80016c0 <SystemClock_Config+0x144>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015c6:	4b3f      	ldr	r3, [pc, #252]	; (80016c4 <SystemClock_Config+0x148>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a3e      	ldr	r2, [pc, #248]	; (80016c4 <SystemClock_Config+0x148>)
 80015cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	4b3c      	ldr	r3, [pc, #240]	; (80016c4 <SystemClock_Config+0x148>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015de:	2302      	movs	r3, #2
 80015e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015e4:	2301      	movs	r3, #1
 80015e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015ea:	2310      	movs	r3, #16
 80015ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015f0:	2302      	movs	r3, #2
 80015f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015f6:	2300      	movs	r3, #0
 80015f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 16;
 80015fc:	2310      	movs	r3, #16
 80015fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001602:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001606:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800160a:	2302      	movs	r3, #2
 800160c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001610:	2304      	movs	r3, #4
 8001612:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001616:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800161a:	4618      	mov	r0, r3
 800161c:	f006 fd74 	bl	8008108 <HAL_RCC_OscConfig>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001626:	f000 f9e9 	bl	80019fc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800162a:	f006 fd1d 	bl	8008068 <HAL_PWREx_EnableOverDrive>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001634:	f000 f9e2 	bl	80019fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001638:	230f      	movs	r3, #15
 800163a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800163e:	2302      	movs	r3, #2
 8001640:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001644:	2300      	movs	r3, #0
 8001646:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800164a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800164e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001656:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800165a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800165e:	2106      	movs	r1, #6
 8001660:	4618      	mov	r0, r3
 8001662:	f006 ffff 	bl	8008664 <HAL_RCC_ClockConfig>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800166c:	f000 f9c6 	bl	80019fc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USART1
 8001670:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <SystemClock_Config+0x14c>)
 8001672:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI1
                              |RCC_PERIPHCLK_I2C4;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001674:	23c0      	movs	r3, #192	; 0xc0
 8001676:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001678:	2302      	movs	r3, #2
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 5;
 800167c:	2305      	movs	r3, #5
 800167e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001680:	2300      	movs	r3, #0
 8001682:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 6;
 8001684:	2306      	movs	r3, #6
 8001686:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001688:	2300      	movs	r3, #0
 800168a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 800168c:	2300      	movs	r3, #0
 800168e:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001690:	2300      	movs	r3, #0
 8001692:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001694:	2300      	movs	r3, #0
 8001696:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001698:	2300      	movs	r3, #0
 800169a:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800169c:	2300      	movs	r3, #0
 800169e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016a2:	f107 0308 	add.w	r3, r7, #8
 80016a6:	4618      	mov	r0, r3
 80016a8:	f007 f9ae 	bl	8008a08 <HAL_RCCEx_PeriphCLKConfig>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <SystemClock_Config+0x13a>
  {
    Error_Handler();
 80016b2:	f000 f9a3 	bl	80019fc <Error_Handler>
  }
}
 80016b6:	bf00      	nop
 80016b8:	37e0      	adds	r7, #224	; 0xe0
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40007000 	.word	0x40007000
 80016c8:	080a0840 	.word	0x080a0840

080016cc <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 80016d0:	4b18      	ldr	r3, [pc, #96]	; (8001734 <MX_DFSDM1_Init+0x68>)
 80016d2:	4a19      	ldr	r2, [pc, #100]	; (8001738 <MX_DFSDM1_Init+0x6c>)
 80016d4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 80016d6:	4b17      	ldr	r3, [pc, #92]	; (8001734 <MX_DFSDM1_Init+0x68>)
 80016d8:	2200      	movs	r2, #0
 80016da:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80016dc:	4b15      	ldr	r3, [pc, #84]	; (8001734 <MX_DFSDM1_Init+0x68>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 80016e2:	4b14      	ldr	r3, [pc, #80]	; (8001734 <MX_DFSDM1_Init+0x68>)
 80016e4:	2202      	movs	r2, #2
 80016e6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_INTERNAL_REGISTER;
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <MX_DFSDM1_Init+0x68>)
 80016ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016ee:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80016f0:	4b10      	ldr	r3, [pc, #64]	; (8001734 <MX_DFSDM1_Init+0x68>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80016f6:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <MX_DFSDM1_Init+0x68>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80016fc:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <MX_DFSDM1_Init+0x68>)
 80016fe:	2200      	movs	r2, #0
 8001700:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8001702:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <MX_DFSDM1_Init+0x68>)
 8001704:	2200      	movs	r2, #0
 8001706:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001708:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <MX_DFSDM1_Init+0x68>)
 800170a:	2200      	movs	r2, #0
 800170c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <MX_DFSDM1_Init+0x68>)
 8001710:	2201      	movs	r2, #1
 8001712:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0x00;
 8001714:	4b07      	ldr	r3, [pc, #28]	; (8001734 <MX_DFSDM1_Init+0x68>)
 8001716:	2200      	movs	r2, #0
 8001718:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <MX_DFSDM1_Init+0x68>)
 800171c:	2200      	movs	r2, #0
 800171e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8001720:	4804      	ldr	r0, [pc, #16]	; (8001734 <MX_DFSDM1_Init+0x68>)
 8001722:	f003 f987 	bl	8004a34 <HAL_DFSDM_ChannelInit>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 800172c:	f000 f966 	bl	80019fc <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20006780 	.word	0x20006780
 8001738:	40017400 	.word	0x40017400

0800173c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001740:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <MX_I2C4_Init+0x74>)
 8001742:	4a1c      	ldr	r2, [pc, #112]	; (80017b4 <MX_I2C4_Init+0x78>)
 8001744:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00C0EAFF;
 8001746:	4b1a      	ldr	r3, [pc, #104]	; (80017b0 <MX_I2C4_Init+0x74>)
 8001748:	4a1b      	ldr	r2, [pc, #108]	; (80017b8 <MX_I2C4_Init+0x7c>)
 800174a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800174c:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <MX_I2C4_Init+0x74>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001752:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <MX_I2C4_Init+0x74>)
 8001754:	2201      	movs	r2, #1
 8001756:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001758:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <MX_I2C4_Init+0x74>)
 800175a:	2200      	movs	r2, #0
 800175c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800175e:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <MX_I2C4_Init+0x74>)
 8001760:	2200      	movs	r2, #0
 8001762:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001764:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <MX_I2C4_Init+0x74>)
 8001766:	2200      	movs	r2, #0
 8001768:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <MX_I2C4_Init+0x74>)
 800176c:	2200      	movs	r2, #0
 800176e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <MX_I2C4_Init+0x74>)
 8001772:	2200      	movs	r2, #0
 8001774:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001776:	480e      	ldr	r0, [pc, #56]	; (80017b0 <MX_I2C4_Init+0x74>)
 8001778:	f005 fec6 	bl	8007508 <HAL_I2C_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001782:	f000 f93b 	bl	80019fc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001786:	2100      	movs	r1, #0
 8001788:	4809      	ldr	r0, [pc, #36]	; (80017b0 <MX_I2C4_Init+0x74>)
 800178a:	f006 fbd5 	bl	8007f38 <HAL_I2CEx_ConfigAnalogFilter>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001794:	f000 f932 	bl	80019fc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001798:	2100      	movs	r1, #0
 800179a:	4805      	ldr	r0, [pc, #20]	; (80017b0 <MX_I2C4_Init+0x74>)
 800179c:	f006 fc17 	bl	8007fce <HAL_I2CEx_ConfigDigitalFilter>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80017a6:	f000 f929 	bl	80019fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20002650 	.word	0x20002650
 80017b4:	40006000 	.word	0x40006000
 80017b8:	00c0eaff 	.word	0x00c0eaff

080017bc <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 80017c0:	4b17      	ldr	r3, [pc, #92]	; (8001820 <MX_SAI1_Init+0x64>)
 80017c2:	4a18      	ldr	r2, [pc, #96]	; (8001824 <MX_SAI1_Init+0x68>)
 80017c4:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80017c6:	4b16      	ldr	r3, [pc, #88]	; (8001820 <MX_SAI1_Init+0x64>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80017cc:	4b14      	ldr	r3, [pc, #80]	; (8001820 <MX_SAI1_Init+0x64>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 80017d2:	4b13      	ldr	r3, [pc, #76]	; (8001820 <MX_SAI1_Init+0x64>)
 80017d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017d8:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80017da:	4b11      	ldr	r3, [pc, #68]	; (8001820 <MX_SAI1_Init+0x64>)
 80017dc:	2200      	movs	r2, #0
 80017de:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_HF;
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <MX_SAI1_Init+0x64>)
 80017e2:	2202      	movs	r2, #2
 80017e4:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80017e6:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <MX_SAI1_Init+0x64>)
 80017e8:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80017ec:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80017ee:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <MX_SAI1_Init+0x64>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80017f4:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <MX_SAI1_Init+0x64>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80017fa:	4b09      	ldr	r3, [pc, #36]	; (8001820 <MX_SAI1_Init+0x64>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001800:	4b07      	ldr	r3, [pc, #28]	; (8001820 <MX_SAI1_Init+0x64>)
 8001802:	2200      	movs	r2, #0
 8001804:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8001806:	2302      	movs	r3, #2
 8001808:	2200      	movs	r2, #0
 800180a:	2100      	movs	r1, #0
 800180c:	4804      	ldr	r0, [pc, #16]	; (8001820 <MX_SAI1_Init+0x64>)
 800180e:	f007 ff9f 	bl	8009750 <HAL_SAI_InitProtocol>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_SAI1_Init+0x60>
  {
    Error_Handler();
 8001818:	f000 f8f0 	bl	80019fc <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800181c:	bf00      	nop
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20006838 	.word	0x20006838
 8001824:	40015804 	.word	0x40015804

08001828 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800182c:	4b14      	ldr	r3, [pc, #80]	; (8001880 <MX_USART1_UART_Init+0x58>)
 800182e:	4a15      	ldr	r2, [pc, #84]	; (8001884 <MX_USART1_UART_Init+0x5c>)
 8001830:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001832:	4b13      	ldr	r3, [pc, #76]	; (8001880 <MX_USART1_UART_Init+0x58>)
 8001834:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001838:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800183a:	4b11      	ldr	r3, [pc, #68]	; (8001880 <MX_USART1_UART_Init+0x58>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001840:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <MX_USART1_UART_Init+0x58>)
 8001842:	2200      	movs	r2, #0
 8001844:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001846:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <MX_USART1_UART_Init+0x58>)
 8001848:	2200      	movs	r2, #0
 800184a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800184c:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <MX_USART1_UART_Init+0x58>)
 800184e:	220c      	movs	r2, #12
 8001850:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001852:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <MX_USART1_UART_Init+0x58>)
 8001854:	2200      	movs	r2, #0
 8001856:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001858:	4b09      	ldr	r3, [pc, #36]	; (8001880 <MX_USART1_UART_Init+0x58>)
 800185a:	2200      	movs	r2, #0
 800185c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800185e:	4b08      	ldr	r3, [pc, #32]	; (8001880 <MX_USART1_UART_Init+0x58>)
 8001860:	2200      	movs	r2, #0
 8001862:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <MX_USART1_UART_Init+0x58>)
 8001866:	2200      	movs	r2, #0
 8001868:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800186a:	4805      	ldr	r0, [pc, #20]	; (8001880 <MX_USART1_UART_Init+0x58>)
 800186c:	f008 fe6e 	bl	800a54c <HAL_UART_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001876:	f000 f8c1 	bl	80019fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20006700 	.word	0x20006700
 8001884:	40011000 	.word	0x40011000

08001888 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800188c:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <MX_USART6_UART_Init+0x58>)
 800188e:	4a15      	ldr	r2, [pc, #84]	; (80018e4 <MX_USART6_UART_Init+0x5c>)
 8001890:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 31250;
 8001892:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <MX_USART6_UART_Init+0x58>)
 8001894:	f647 2212 	movw	r2, #31250	; 0x7a12
 8001898:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800189a:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <MX_USART6_UART_Init+0x58>)
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80018a0:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <MX_USART6_UART_Init+0x58>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80018a6:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <MX_USART6_UART_Init+0x58>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <MX_USART6_UART_Init+0x58>)
 80018ae:	220c      	movs	r2, #12
 80018b0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018b2:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <MX_USART6_UART_Init+0x58>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b8:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <MX_USART6_UART_Init+0x58>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018be:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <MX_USART6_UART_Init+0x58>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <MX_USART6_UART_Init+0x58>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80018ca:	4805      	ldr	r0, [pc, #20]	; (80018e0 <MX_USART6_UART_Init+0x58>)
 80018cc:	f008 fe3e 	bl	800a54c <HAL_UART_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80018d6:	f000 f891 	bl	80019fc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	200067b8 	.word	0x200067b8
 80018e4:	40011400 	.word	0x40011400

080018e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80018ee:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <MX_DMA_Init+0x38>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a0b      	ldr	r2, [pc, #44]	; (8001920 <MX_DMA_Init+0x38>)
 80018f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <MX_DMA_Init+0x38>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	2100      	movs	r1, #0
 800190a:	203b      	movs	r0, #59	; 0x3b
 800190c:	f003 f84d 	bl	80049aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001910:	203b      	movs	r0, #59	; 0x3b
 8001912:	f003 f866 	bl	80049e2 <HAL_NVIC_EnableIRQ>

}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800

08001924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001924:	b480      	push	{r7}
 8001926:	b089      	sub	sp, #36	; 0x24
 8001928:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800192a:	4b33      	ldr	r3, [pc, #204]	; (80019f8 <MX_GPIO_Init+0xd4>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	4a32      	ldr	r2, [pc, #200]	; (80019f8 <MX_GPIO_Init+0xd4>)
 8001930:	f043 0310 	orr.w	r3, r3, #16
 8001934:	6313      	str	r3, [r2, #48]	; 0x30
 8001936:	4b30      	ldr	r3, [pc, #192]	; (80019f8 <MX_GPIO_Init+0xd4>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	f003 0310 	and.w	r3, r3, #16
 800193e:	61fb      	str	r3, [r7, #28]
 8001940:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001942:	4b2d      	ldr	r3, [pc, #180]	; (80019f8 <MX_GPIO_Init+0xd4>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a2c      	ldr	r2, [pc, #176]	; (80019f8 <MX_GPIO_Init+0xd4>)
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b2a      	ldr	r3, [pc, #168]	; (80019f8 <MX_GPIO_Init+0xd4>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	61bb      	str	r3, [r7, #24]
 8001958:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	4b27      	ldr	r3, [pc, #156]	; (80019f8 <MX_GPIO_Init+0xd4>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	4a26      	ldr	r2, [pc, #152]	; (80019f8 <MX_GPIO_Init+0xd4>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	6313      	str	r3, [r2, #48]	; 0x30
 8001966:	4b24      	ldr	r3, [pc, #144]	; (80019f8 <MX_GPIO_Init+0xd4>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	617b      	str	r3, [r7, #20]
 8001970:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001972:	4b21      	ldr	r3, [pc, #132]	; (80019f8 <MX_GPIO_Init+0xd4>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4a20      	ldr	r2, [pc, #128]	; (80019f8 <MX_GPIO_Init+0xd4>)
 8001978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	4b1e      	ldr	r3, [pc, #120]	; (80019f8 <MX_GPIO_Init+0xd4>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800198a:	4b1b      	ldr	r3, [pc, #108]	; (80019f8 <MX_GPIO_Init+0xd4>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	4a1a      	ldr	r2, [pc, #104]	; (80019f8 <MX_GPIO_Init+0xd4>)
 8001990:	f043 0304 	orr.w	r3, r3, #4
 8001994:	6313      	str	r3, [r2, #48]	; 0x30
 8001996:	4b18      	ldr	r3, [pc, #96]	; (80019f8 <MX_GPIO_Init+0xd4>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	f003 0304 	and.w	r3, r3, #4
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019a2:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <MX_GPIO_Init+0xd4>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	4a14      	ldr	r2, [pc, #80]	; (80019f8 <MX_GPIO_Init+0xd4>)
 80019a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019ac:	6313      	str	r3, [r2, #48]	; 0x30
 80019ae:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <MX_GPIO_Init+0xd4>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019ba:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <MX_GPIO_Init+0xd4>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	4a0e      	ldr	r2, [pc, #56]	; (80019f8 <MX_GPIO_Init+0xd4>)
 80019c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019c4:	6313      	str	r3, [r2, #48]	; 0x30
 80019c6:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <MX_GPIO_Init+0xd4>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019d2:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <MX_GPIO_Init+0xd4>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4a08      	ldr	r2, [pc, #32]	; (80019f8 <MX_GPIO_Init+0xd4>)
 80019d8:	f043 0308 	orr.w	r3, r3, #8
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <MX_GPIO_Init+0xd4>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	603b      	str	r3, [r7, #0]
 80019e8:	683b      	ldr	r3, [r7, #0]

}
 80019ea:	bf00      	nop
 80019ec:	3724      	adds	r7, #36	; 0x24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	40023800 	.word	0x40023800

080019fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	BSP_LED_On(LED1);
 8001a00:	2000      	movs	r0, #0
 8001a02:	f002 f969 	bl	8003cd8 <BSP_LED_On>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a06:	b672      	cpsid	i
  __disable_irq();
  while (1)
 8001a08:	e7fe      	b.n	8001a08 <Error_Handler+0xc>
	...

08001a0c <AUDIO_MenuProcess>:
  * @brief  Manages AUDIO Menu Process.
  * @param  None
  * @retval None
  */
void AUDIO_MenuProcess(void)
{
 8001a0c:	b598      	push	{r3, r4, r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
//  Point PlaybackLogoPoints[] = {{TOUCH_PLAYBACK_XMIN, TOUCH_PLAYBACK_YMIN},
//                                {TOUCH_PLAYBACK_XMAX, (TOUCH_PLAYBACK_YMIN+TOUCH_PLAYBACK_YMAX)/2},
//                                {TOUCH_PLAYBACK_XMIN, TOUCH_PLAYBACK_YMAX}};
	//sprintf(signal_text, "menu_process_entry");

  if(Appli_state == APPLICATION_READY)
 8001a10:	4b4c      	ldr	r3, [pc, #304]	; (8001b44 <AUDIO_MenuProcess+0x138>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d16e      	bne.n	8001af6 <AUDIO_MenuProcess+0xea>
  {
	  sprintf(signal_text, "USB_app_ready");
 8001a18:	4a4b      	ldr	r2, [pc, #300]	; (8001b48 <AUDIO_MenuProcess+0x13c>)
 8001a1a:	4b4c      	ldr	r3, [pc, #304]	; (8001b4c <AUDIO_MenuProcess+0x140>)
 8001a1c:	4614      	mov	r4, r2
 8001a1e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001a20:	6020      	str	r0, [r4, #0]
 8001a22:	6061      	str	r1, [r4, #4]
 8001a24:	60a2      	str	r2, [r4, #8]
 8001a26:	881b      	ldrh	r3, [r3, #0]
 8001a28:	81a3      	strh	r3, [r4, #12]
    switch(AudioDemo.state)
 8001a2a:	4b49      	ldr	r3, [pc, #292]	; (8001b50 <AUDIO_MenuProcess+0x144>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b03      	cmp	r3, #3
 8001a32:	d862      	bhi.n	8001afa <AUDIO_MenuProcess+0xee>
 8001a34:	a201      	add	r2, pc, #4	; (adr r2, 8001a3c <AUDIO_MenuProcess+0x30>)
 8001a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a3a:	bf00      	nop
 8001a3c:	08001a4d 	.word	0x08001a4d
 8001a40:	08001a61 	.word	0x08001a61
 8001a44:	08001a69 	.word	0x08001a69
 8001a48:	08001a93 	.word	0x08001a93
    {
    case AUDIO_DEMO_IDLE:

      AudioDemo.state = AUDIO_DEMO_WAIT;
 8001a4c:	4b40      	ldr	r3, [pc, #256]	; (8001b50 <AUDIO_MenuProcess+0x144>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	701a      	strb	r2, [r3, #0]
      sprintf(signal_text, "idle");
 8001a52:	4b3d      	ldr	r3, [pc, #244]	; (8001b48 <AUDIO_MenuProcess+0x13c>)
 8001a54:	4a3f      	ldr	r2, [pc, #252]	; (8001b54 <AUDIO_MenuProcess+0x148>)
 8001a56:	6810      	ldr	r0, [r2, #0]
 8001a58:	6018      	str	r0, [r3, #0]
 8001a5a:	7912      	ldrb	r2, [r2, #4]
 8001a5c:	711a      	strb	r2, [r3, #4]

      break;
 8001a5e:	e04f      	b.n	8001b00 <AUDIO_MenuProcess+0xf4>
//        }
//        if ((TS_State.touchX[0] > TOUCH_PLAYBACK_XMIN) && (TS_State.touchX[0] < TOUCH_PLAYBACK_XMAX) &&
//                 (TS_State.touchY[0] > TOUCH_PLAYBACK_YMIN) && (TS_State.touchY[0] < TOUCH_PLAYBACK_YMAX))
//    	if()
//        {
          AudioDemo.state = AUDIO_DEMO_PLAYBACK;
 8001a60:	4b3b      	ldr	r3, [pc, #236]	; (8001b50 <AUDIO_MenuProcess+0x144>)
 8001a62:	2203      	movs	r2, #3
 8001a64:	701a      	strb	r2, [r3, #0]
//        do
//        {
//          BSP_TS_GetState(&TS_State);
//        }while(TS_State.touchDetected > 0);
//      }
      break;
 8001a66:	e04b      	b.n	8001b00 <AUDIO_MenuProcess+0xf4>

    case AUDIO_DEMO_EXPLORE:
      if(Appli_state == APPLICATION_READY)
 8001a68:	4b36      	ldr	r3, [pc, #216]	; (8001b44 <AUDIO_MenuProcess+0x138>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d10c      	bne.n	8001a8a <AUDIO_MenuProcess+0x7e>
      {
        if(Explorer_Process() > 0)
 8001a70:	f7ff fd22 	bl	80014b8 <Explorer_Process>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <AUDIO_MenuProcess+0x76>
        {
//          LCD_ErrLog("There is no WAV file on the USB Key.\n");
//          AUDIO_ChangeSelectMode(AUDIO_SELECT_MENU);
          AudioDemo.state = AUDIO_DEMO_IDLE;
 8001a7a:	4b35      	ldr	r3, [pc, #212]	; (8001b50 <AUDIO_MenuProcess+0x144>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        AudioDemo.state = AUDIO_DEMO_WAIT;
      }
      break;
 8001a80:	e03e      	b.n	8001b00 <AUDIO_MenuProcess+0xf4>
          AudioDemo.state = AUDIO_DEMO_WAIT;
 8001a82:	4b33      	ldr	r3, [pc, #204]	; (8001b50 <AUDIO_MenuProcess+0x144>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	701a      	strb	r2, [r3, #0]
      break;
 8001a88:	e03a      	b.n	8001b00 <AUDIO_MenuProcess+0xf4>
        AudioDemo.state = AUDIO_DEMO_WAIT;
 8001a8a:	4b31      	ldr	r3, [pc, #196]	; (8001b50 <AUDIO_MenuProcess+0x144>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	701a      	strb	r2, [r3, #0]
      break;
 8001a90:	e036      	b.n	8001b00 <AUDIO_MenuProcess+0xf4>

    case AUDIO_DEMO_PLAYBACK:
    	sprintf(signal_text, "playback");
 8001a92:	4a2d      	ldr	r2, [pc, #180]	; (8001b48 <AUDIO_MenuProcess+0x13c>)
 8001a94:	4b30      	ldr	r3, [pc, #192]	; (8001b58 <AUDIO_MenuProcess+0x14c>)
 8001a96:	cb03      	ldmia	r3!, {r0, r1}
 8001a98:	6010      	str	r0, [r2, #0]
 8001a9a:	6051      	str	r1, [r2, #4]
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	7213      	strb	r3, [r2, #8]
      if(Appli_state == APPLICATION_READY)
 8001aa0:	4b28      	ldr	r3, [pc, #160]	; (8001b44 <AUDIO_MenuProcess+0x138>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d122      	bne.n	8001aee <AUDIO_MenuProcess+0xe2>
      {
        if(AudioState == AUDIO_STATE_IDLE)
 8001aa8:	4b2c      	ldr	r3, [pc, #176]	; (8001b5c <AUDIO_MenuProcess+0x150>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d115      	bne.n	8001adc <AUDIO_MenuProcess+0xd0>
        {
          if(Explorer_Process() > 0)
 8001ab0:	f7ff fd02 	bl	80014b8 <Explorer_Process>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <AUDIO_MenuProcess+0xb6>
          {
            //LCD_ErrLog("There is no WAV file on the USB Key.\n");
            //AUDIO_ChangeSelectMode(AUDIO_SELECT_MENU);
            AudioDemo.state = AUDIO_DEMO_IDLE;
 8001aba:	4b25      	ldr	r3, [pc, #148]	; (8001b50 <AUDIO_MenuProcess+0x144>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	701a      	strb	r2, [r3, #0]
 8001ac0:	e002      	b.n	8001ac8 <AUDIO_MenuProcess+0xbc>
            //sprintf(signal_text, "explorer_fail");
          }
          else
          {
            /* Start Playing */
            AudioState = AUDIO_STATE_INIT;
 8001ac2:	4b26      	ldr	r3, [pc, #152]	; (8001b5c <AUDIO_MenuProcess+0x150>)
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	701a      	strb	r2, [r3, #0]
            //sprintf(signal_text, "audio_state_init");
          }


          if(AUDIO_PLAYER_Start(0) == AUDIO_ERROR_IO)
 8001ac8:	2000      	movs	r0, #0
 8001aca:	f000 fb81 	bl	80021d0 <AUDIO_PLAYER_Start>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d114      	bne.n	8001afe <AUDIO_MenuProcess+0xf2>
          {
            //AUDIO_ChangeSelectMode(AUDIO_SELECT_MENU);
            AudioDemo.state = AUDIO_DEMO_IDLE;
 8001ad4:	4b1e      	ldr	r3, [pc, #120]	; (8001b50 <AUDIO_MenuProcess+0x144>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        AudioDemo.state = AUDIO_DEMO_WAIT;
      }
      break;
 8001ada:	e010      	b.n	8001afe <AUDIO_MenuProcess+0xf2>
          if(AUDIO_PLAYER_Process() == AUDIO_ERROR_IO)
 8001adc:	f000 fbfe 	bl	80022dc <AUDIO_PLAYER_Process>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d10b      	bne.n	8001afe <AUDIO_MenuProcess+0xf2>
            AudioDemo.state = AUDIO_DEMO_IDLE;
 8001ae6:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <AUDIO_MenuProcess+0x144>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	701a      	strb	r2, [r3, #0]
      break;
 8001aec:	e007      	b.n	8001afe <AUDIO_MenuProcess+0xf2>
        AudioDemo.state = AUDIO_DEMO_WAIT;
 8001aee:	4b18      	ldr	r3, [pc, #96]	; (8001b50 <AUDIO_MenuProcess+0x144>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	701a      	strb	r2, [r3, #0]
      break;
 8001af4:	e003      	b.n	8001afe <AUDIO_MenuProcess+0xf2>

    default:
      break;
    }
  }
 8001af6:	bf00      	nop
 8001af8:	e002      	b.n	8001b00 <AUDIO_MenuProcess+0xf4>
      break;
 8001afa:	bf00      	nop
 8001afc:	e000      	b.n	8001b00 <AUDIO_MenuProcess+0xf4>
      break;
 8001afe:	bf00      	nop

  if(Appli_state == APPLICATION_DISCONNECT)
 8001b00:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <AUDIO_MenuProcess+0x138>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b03      	cmp	r3, #3
 8001b06:	d110      	bne.n	8001b2a <AUDIO_MenuProcess+0x11e>
  {
	sprintf(signal_text, "USB_disconnect");
 8001b08:	4a0f      	ldr	r2, [pc, #60]	; (8001b48 <AUDIO_MenuProcess+0x13c>)
 8001b0a:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <AUDIO_MenuProcess+0x154>)
 8001b0c:	4614      	mov	r4, r2
 8001b0e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001b10:	6020      	str	r0, [r4, #0]
 8001b12:	6061      	str	r1, [r4, #4]
 8001b14:	60a2      	str	r2, [r4, #8]
 8001b16:	881a      	ldrh	r2, [r3, #0]
 8001b18:	789b      	ldrb	r3, [r3, #2]
 8001b1a:	81a2      	strh	r2, [r4, #12]
 8001b1c:	73a3      	strb	r3, [r4, #14]
	Appli_state = APPLICATION_IDLE;
 8001b1e:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <AUDIO_MenuProcess+0x138>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	701a      	strb	r2, [r3, #0]
    //AUDIO_ChangeSelectMode(AUDIO_SELECT_MENU);
    BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001b24:	2002      	movs	r0, #2
 8001b26:	f002 fbc9 	bl	80042bc <BSP_AUDIO_OUT_Stop>
  }



  if(Appli_state == APPLICATION_IDLE)
 8001b2a:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <AUDIO_MenuProcess+0x138>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d106      	bne.n	8001b40 <AUDIO_MenuProcess+0x134>
  {
	sprintf(signal_text, "USB_idle");
 8001b32:	4a05      	ldr	r2, [pc, #20]	; (8001b48 <AUDIO_MenuProcess+0x13c>)
 8001b34:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <AUDIO_MenuProcess+0x158>)
 8001b36:	cb03      	ldmia	r3!, {r0, r1}
 8001b38:	6010      	str	r0, [r2, #0]
 8001b3a:	6051      	str	r1, [r2, #4]
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	7213      	strb	r3, [r2, #8]
  }


}
 8001b40:	bf00      	nop
 8001b42:	bd98      	pop	{r3, r4, r7, pc}
 8001b44:	20002264 	.word	0x20002264
 8001b48:	200068c0 	.word	0x200068c0
 8001b4c:	08012a34 	.word	0x08012a34
 8001b50:	200068d4 	.word	0x200068d4
 8001b54:	08012a44 	.word	0x08012a44
 8001b58:	08012a4c 	.word	0x08012a4c
 8001b5c:	200068bc 	.word	0x200068bc
 8001b60:	08012a58 	.word	0x08012a58
 8001b64:	08012a68 	.word	0x08012a68

08001b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b6e:	4b0f      	ldr	r3, [pc, #60]	; (8001bac <HAL_MspInit+0x44>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	4a0e      	ldr	r2, [pc, #56]	; (8001bac <HAL_MspInit+0x44>)
 8001b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b78:	6413      	str	r3, [r2, #64]	; 0x40
 8001b7a:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <HAL_MspInit+0x44>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b82:	607b      	str	r3, [r7, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b86:	4b09      	ldr	r3, [pc, #36]	; (8001bac <HAL_MspInit+0x44>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	4a08      	ldr	r2, [pc, #32]	; (8001bac <HAL_MspInit+0x44>)
 8001b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b90:	6453      	str	r3, [r2, #68]	; 0x44
 8001b92:	4b06      	ldr	r3, [pc, #24]	; (8001bac <HAL_MspInit+0x44>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b9a:	603b      	str	r3, [r7, #0]
 8001b9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	40023800 	.word	0x40023800

08001bb0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  if(DFSDM1_Init == 0)
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <HAL_DFSDM_ChannelMspInit+0x40>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d110      	bne.n	8001be2 <HAL_DFSDM_ChannelMspInit+0x32>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <HAL_DFSDM_ChannelMspInit+0x44>)
 8001bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc4:	4a0b      	ldr	r2, [pc, #44]	; (8001bf4 <HAL_DFSDM_ChannelMspInit+0x44>)
 8001bc6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001bca:	6453      	str	r3, [r2, #68]	; 0x44
 8001bcc:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <HAL_DFSDM_ChannelMspInit+0x44>)
 8001bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001bd8:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <HAL_DFSDM_ChannelMspInit+0x40>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	4a04      	ldr	r2, [pc, #16]	; (8001bf0 <HAL_DFSDM_ChannelMspInit+0x40>)
 8001be0:	6013      	str	r3, [r2, #0]
  }

}
 8001be2:	bf00      	nop
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	20000134 	.word	0x20000134
 8001bf4:	40023800 	.word	0x40023800

08001bf8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08a      	sub	sp, #40	; 0x28
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C4)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a25      	ldr	r2, [pc, #148]	; (8001cac <HAL_I2C_MspInit+0xb4>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d144      	bne.n	8001ca4 <HAL_I2C_MspInit+0xac>
  {
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1a:	4b25      	ldr	r3, [pc, #148]	; (8001cb0 <HAL_I2C_MspInit+0xb8>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	4a24      	ldr	r2, [pc, #144]	; (8001cb0 <HAL_I2C_MspInit+0xb8>)
 8001c20:	f043 0302 	orr.w	r3, r3, #2
 8001c24:	6313      	str	r3, [r2, #48]	; 0x30
 8001c26:	4b22      	ldr	r3, [pc, #136]	; (8001cb0 <HAL_I2C_MspInit+0xb8>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	613b      	str	r3, [r7, #16]
 8001c30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c32:	4b1f      	ldr	r3, [pc, #124]	; (8001cb0 <HAL_I2C_MspInit+0xb8>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a1e      	ldr	r2, [pc, #120]	; (8001cb0 <HAL_I2C_MspInit+0xb8>)
 8001c38:	f043 0308 	orr.w	r3, r3, #8
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b1c      	ldr	r3, [pc, #112]	; (8001cb0 <HAL_I2C_MspInit+0xb8>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0308 	and.w	r3, r3, #8
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PB7     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c4a:	2380      	movs	r3, #128	; 0x80
 8001c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c4e:	2312      	movs	r3, #18
 8001c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c52:	2301      	movs	r3, #1
 8001c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c56:	2303      	movs	r3, #3
 8001c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8001c5a:	230b      	movs	r3, #11
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5e:	f107 0314 	add.w	r3, r7, #20
 8001c62:	4619      	mov	r1, r3
 8001c64:	4813      	ldr	r0, [pc, #76]	; (8001cb4 <HAL_I2C_MspInit+0xbc>)
 8001c66:	f003 fc5f 	bl	8005528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c70:	2312      	movs	r3, #18
 8001c72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c74:	2301      	movs	r3, #1
 8001c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001c7c:	2304      	movs	r3, #4
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	4619      	mov	r1, r3
 8001c86:	480c      	ldr	r0, [pc, #48]	; (8001cb8 <HAL_I2C_MspInit+0xc0>)
 8001c88:	f003 fc4e 	bl	8005528 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001c8c:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <HAL_I2C_MspInit+0xb8>)
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c90:	4a07      	ldr	r2, [pc, #28]	; (8001cb0 <HAL_I2C_MspInit+0xb8>)
 8001c92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c96:	6413      	str	r3, [r2, #64]	; 0x40
 8001c98:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <HAL_I2C_MspInit+0xb8>)
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001ca4:	bf00      	nop
 8001ca6:	3728      	adds	r7, #40	; 0x28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40006000 	.word	0x40006000
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40020400 	.word	0x40020400
 8001cb8:	40020c00 	.word	0x40020c00

08001cbc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C4)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a0a      	ldr	r2, [pc, #40]	; (8001cf4 <HAL_I2C_MspDeInit+0x38>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d10e      	bne.n	8001cec <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 8001cce:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <HAL_I2C_MspDeInit+0x3c>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	4a09      	ldr	r2, [pc, #36]	; (8001cf8 <HAL_I2C_MspDeInit+0x3c>)
 8001cd4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cd8:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C4 GPIO Configuration
    PB7     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8001cda:	2180      	movs	r1, #128	; 0x80
 8001cdc:	4807      	ldr	r0, [pc, #28]	; (8001cfc <HAL_I2C_MspDeInit+0x40>)
 8001cde:	f003 fdcd 	bl	800587c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8001ce2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ce6:	4806      	ldr	r0, [pc, #24]	; (8001d00 <HAL_I2C_MspDeInit+0x44>)
 8001ce8:	f003 fdc8 	bl	800587c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8001cec:	bf00      	nop
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40006000 	.word	0x40006000
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	40020400 	.word	0x40020400
 8001d00:	40020c00 	.word	0x40020c00

08001d04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08c      	sub	sp, #48	; 0x30
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f107 031c 	add.w	r3, r7, #28
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a36      	ldr	r2, [pc, #216]	; (8001dfc <HAL_UART_MspInit+0xf8>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d131      	bne.n	8001d8a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d26:	4b36      	ldr	r3, [pc, #216]	; (8001e00 <HAL_UART_MspInit+0xfc>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	4a35      	ldr	r2, [pc, #212]	; (8001e00 <HAL_UART_MspInit+0xfc>)
 8001d2c:	f043 0310 	orr.w	r3, r3, #16
 8001d30:	6453      	str	r3, [r2, #68]	; 0x44
 8001d32:	4b33      	ldr	r3, [pc, #204]	; (8001e00 <HAL_UART_MspInit+0xfc>)
 8001d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d36:	f003 0310 	and.w	r3, r3, #16
 8001d3a:	61bb      	str	r3, [r7, #24]
 8001d3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3e:	4b30      	ldr	r3, [pc, #192]	; (8001e00 <HAL_UART_MspInit+0xfc>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	4a2f      	ldr	r2, [pc, #188]	; (8001e00 <HAL_UART_MspInit+0xfc>)
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4a:	4b2d      	ldr	r3, [pc, #180]	; (8001e00 <HAL_UART_MspInit+0xfc>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	617b      	str	r3, [r7, #20]
 8001d54:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8001d56:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d64:	2303      	movs	r3, #3
 8001d66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d68:	2307      	movs	r3, #7
 8001d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6c:	f107 031c 	add.w	r3, r7, #28
 8001d70:	4619      	mov	r1, r3
 8001d72:	4824      	ldr	r0, [pc, #144]	; (8001e04 <HAL_UART_MspInit+0x100>)
 8001d74:	f003 fbd8 	bl	8005528 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	2025      	movs	r0, #37	; 0x25
 8001d7e:	f002 fe14 	bl	80049aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d82:	2025      	movs	r0, #37	; 0x25
 8001d84:	f002 fe2d 	bl	80049e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001d88:	e034      	b.n	8001df4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART6)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a1e      	ldr	r2, [pc, #120]	; (8001e08 <HAL_UART_MspInit+0x104>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d12f      	bne.n	8001df4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001d94:	4b1a      	ldr	r3, [pc, #104]	; (8001e00 <HAL_UART_MspInit+0xfc>)
 8001d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d98:	4a19      	ldr	r2, [pc, #100]	; (8001e00 <HAL_UART_MspInit+0xfc>)
 8001d9a:	f043 0320 	orr.w	r3, r3, #32
 8001d9e:	6453      	str	r3, [r2, #68]	; 0x44
 8001da0:	4b17      	ldr	r3, [pc, #92]	; (8001e00 <HAL_UART_MspInit+0xfc>)
 8001da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da4:	f003 0320 	and.w	r3, r3, #32
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dac:	4b14      	ldr	r3, [pc, #80]	; (8001e00 <HAL_UART_MspInit+0xfc>)
 8001dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db0:	4a13      	ldr	r2, [pc, #76]	; (8001e00 <HAL_UART_MspInit+0xfc>)
 8001db2:	f043 0304 	orr.w	r3, r3, #4
 8001db6:	6313      	str	r3, [r2, #48]	; 0x30
 8001db8:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <HAL_UART_MspInit+0xfc>)
 8001dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001dc4:	23c0      	movs	r3, #192	; 0xc0
 8001dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001dd4:	2308      	movs	r3, #8
 8001dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd8:	f107 031c 	add.w	r3, r7, #28
 8001ddc:	4619      	mov	r1, r3
 8001dde:	480b      	ldr	r0, [pc, #44]	; (8001e0c <HAL_UART_MspInit+0x108>)
 8001de0:	f003 fba2 	bl	8005528 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001de4:	2200      	movs	r2, #0
 8001de6:	2100      	movs	r1, #0
 8001de8:	2047      	movs	r0, #71	; 0x47
 8001dea:	f002 fdde 	bl	80049aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001dee:	2047      	movs	r0, #71	; 0x47
 8001df0:	f002 fdf7 	bl	80049e2 <HAL_NVIC_EnableIRQ>
}
 8001df4:	bf00      	nop
 8001df6:	3730      	adds	r7, #48	; 0x30
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40011000 	.word	0x40011000
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40020000 	.word	0x40020000
 8001e08:	40011400 	.word	0x40011400
 8001e0c:	40020800 	.word	0x40020800

08001e10 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b088      	sub	sp, #32
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a41      	ldr	r2, [pc, #260]	; (8001f24 <HAL_SAI_MspInit+0x114>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d17c      	bne.n	8001f1c <HAL_SAI_MspInit+0x10c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001e22:	4b41      	ldr	r3, [pc, #260]	; (8001f28 <HAL_SAI_MspInit+0x118>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d113      	bne.n	8001e52 <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001e2a:	4b40      	ldr	r3, [pc, #256]	; (8001f2c <HAL_SAI_MspInit+0x11c>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2e:	4a3f      	ldr	r2, [pc, #252]	; (8001f2c <HAL_SAI_MspInit+0x11c>)
 8001e30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e34:	6453      	str	r3, [r2, #68]	; 0x44
 8001e36:	4b3d      	ldr	r3, [pc, #244]	; (8001f2c <HAL_SAI_MspInit+0x11c>)
 8001e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2100      	movs	r1, #0
 8001e46:	2057      	movs	r0, #87	; 0x57
 8001e48:	f002 fdaf 	bl	80049aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 8001e4c:	2057      	movs	r0, #87	; 0x57
 8001e4e:	f002 fdc8 	bl	80049e2 <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
 8001e52:	4b35      	ldr	r3, [pc, #212]	; (8001f28 <HAL_SAI_MspInit+0x118>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	3301      	adds	r3, #1
 8001e58:	4a33      	ldr	r2, [pc, #204]	; (8001f28 <HAL_SAI_MspInit+0x118>)
 8001e5a:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001e5c:	2370      	movs	r3, #112	; 0x70
 8001e5e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e60:	2302      	movs	r3, #2
 8001e62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001e6c:	2306      	movs	r3, #6
 8001e6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e70:	f107 030c 	add.w	r3, r7, #12
 8001e74:	4619      	mov	r1, r3
 8001e76:	482e      	ldr	r0, [pc, #184]	; (8001f30 <HAL_SAI_MspInit+0x120>)
 8001e78:	f003 fb56 	bl	8005528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e7c:	2380      	movs	r3, #128	; 0x80
 8001e7e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e80:	2302      	movs	r3, #2
 8001e82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001e8c:	2306      	movs	r3, #6
 8001e8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e90:	f107 030c 	add.w	r3, r7, #12
 8001e94:	4619      	mov	r1, r3
 8001e96:	4827      	ldr	r0, [pc, #156]	; (8001f34 <HAL_SAI_MspInit+0x124>)
 8001e98:	f003 fb46 	bl	8005528 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream3;
 8001e9c:	4b26      	ldr	r3, [pc, #152]	; (8001f38 <HAL_SAI_MspInit+0x128>)
 8001e9e:	4a27      	ldr	r2, [pc, #156]	; (8001f3c <HAL_SAI_MspInit+0x12c>)
 8001ea0:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 8001ea2:	4b25      	ldr	r3, [pc, #148]	; (8001f38 <HAL_SAI_MspInit+0x128>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ea8:	4b23      	ldr	r3, [pc, #140]	; (8001f38 <HAL_SAI_MspInit+0x128>)
 8001eaa:	2240      	movs	r2, #64	; 0x40
 8001eac:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eae:	4b22      	ldr	r3, [pc, #136]	; (8001f38 <HAL_SAI_MspInit+0x128>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001eb4:	4b20      	ldr	r3, [pc, #128]	; (8001f38 <HAL_SAI_MspInit+0x128>)
 8001eb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eba:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ebc:	4b1e      	ldr	r3, [pc, #120]	; (8001f38 <HAL_SAI_MspInit+0x128>)
 8001ebe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ec2:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ec4:	4b1c      	ldr	r3, [pc, #112]	; (8001f38 <HAL_SAI_MspInit+0x128>)
 8001ec6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eca:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8001ecc:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <HAL_SAI_MspInit+0x128>)
 8001ece:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ed2:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
 8001ed4:	4b18      	ldr	r3, [pc, #96]	; (8001f38 <HAL_SAI_MspInit+0x128>)
 8001ed6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001eda:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001edc:	4b16      	ldr	r3, [pc, #88]	; (8001f38 <HAL_SAI_MspInit+0x128>)
 8001ede:	2204      	movs	r2, #4
 8001ee0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001ee2:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <HAL_SAI_MspInit+0x128>)
 8001ee4:	2203      	movs	r2, #3
 8001ee6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 8001ee8:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <HAL_SAI_MspInit+0x128>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001eee:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <HAL_SAI_MspInit+0x128>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001ef4:	4810      	ldr	r0, [pc, #64]	; (8001f38 <HAL_SAI_MspInit+0x128>)
 8001ef6:	f002 feb1 	bl	8004c5c <HAL_DMA_Init>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <HAL_SAI_MspInit+0xf4>
    {
      Error_Handler();
 8001f00:	f7ff fd7c 	bl	80019fc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a0c      	ldr	r2, [pc, #48]	; (8001f38 <HAL_SAI_MspInit+0x128>)
 8001f08:	671a      	str	r2, [r3, #112]	; 0x70
 8001f0a:	4a0b      	ldr	r2, [pc, #44]	; (8001f38 <HAL_SAI_MspInit+0x128>)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a09      	ldr	r2, [pc, #36]	; (8001f38 <HAL_SAI_MspInit+0x128>)
 8001f14:	66da      	str	r2, [r3, #108]	; 0x6c
 8001f16:	4a08      	ldr	r2, [pc, #32]	; (8001f38 <HAL_SAI_MspInit+0x128>)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 8001f1c:	bf00      	nop
 8001f1e:	3720      	adds	r7, #32
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40015804 	.word	0x40015804
 8001f28:	20000138 	.word	0x20000138
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40021000 	.word	0x40021000
 8001f34:	40021800 	.word	0x40021800
 8001f38:	200026a0 	.word	0x200026a0
 8001f3c:	40026458 	.word	0x40026458

08001f40 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* hsai)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a15      	ldr	r2, [pc, #84]	; (8001fa4 <HAL_SAI_MspDeInit+0x64>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d123      	bne.n	8001f9a <HAL_SAI_MspDeInit+0x5a>
    {
    SAI1_client --;
 8001f52:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <HAL_SAI_MspDeInit+0x68>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	4a13      	ldr	r2, [pc, #76]	; (8001fa8 <HAL_SAI_MspDeInit+0x68>)
 8001f5a:	6013      	str	r3, [r2, #0]
    if (SAI1_client == 0)
 8001f5c:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <HAL_SAI_MspDeInit+0x68>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d108      	bne.n	8001f76 <HAL_SAI_MspDeInit+0x36>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI1_CLK_DISABLE();
 8001f64:	4b11      	ldr	r3, [pc, #68]	; (8001fac <HAL_SAI_MspDeInit+0x6c>)
 8001f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f68:	4a10      	ldr	r2, [pc, #64]	; (8001fac <HAL_SAI_MspDeInit+0x6c>)
 8001f6a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001f6e:	6453      	str	r3, [r2, #68]	; 0x44
      HAL_NVIC_DisableIRQ(SAI1_IRQn);
 8001f70:	2057      	movs	r0, #87	; 0x57
 8001f72:	f002 fd44 	bl	80049fe <HAL_NVIC_DisableIRQ>
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 8001f76:	2170      	movs	r1, #112	; 0x70
 8001f78:	480d      	ldr	r0, [pc, #52]	; (8001fb0 <HAL_SAI_MspDeInit+0x70>)
 8001f7a:	f003 fc7f 	bl	800587c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_7);
 8001f7e:	2180      	movs	r1, #128	; 0x80
 8001f80:	480c      	ldr	r0, [pc, #48]	; (8001fb4 <HAL_SAI_MspDeInit+0x74>)
 8001f82:	f003 fc7b 	bl	800587c <HAL_GPIO_DeInit>

    HAL_DMA_DeInit(hsai->hdmarx);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f002 ff14 	bl	8004db8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hsai->hdmatx);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f94:	4618      	mov	r0, r3
 8001f96:	f002 ff0f 	bl	8004db8 <HAL_DMA_DeInit>
    }
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40015804 	.word	0x40015804
 8001fa8:	20000138 	.word	0x20000138
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40021800 	.word	0x40021800

08001fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fbc:	e7fe      	b.n	8001fbc <NMI_Handler+0x4>

08001fbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fc2:	e7fe      	b.n	8001fc2 <HardFault_Handler+0x4>

08001fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fc8:	e7fe      	b.n	8001fc8 <MemManage_Handler+0x4>

08001fca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fce:	e7fe      	b.n	8001fce <BusFault_Handler+0x4>

08001fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fd4:	e7fe      	b.n	8001fd4 <UsageFault_Handler+0x4>

08001fd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002004:	f002 fb92 	bl	800472c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002008:	bf00      	nop
 800200a:	bd80      	pop	{r7, pc}

0800200c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002010:	4802      	ldr	r0, [pc, #8]	; (800201c <USART1_IRQHandler+0x10>)
 8002012:	f008 fc1d 	bl	800a850 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20006700 	.word	0x20006700

08002020 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8002024:	4802      	ldr	r0, [pc, #8]	; (8002030 <DMA2_Stream3_IRQHandler+0x10>)
 8002026:	f003 f817 	bl	8005058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	200026a0 	.word	0x200026a0

08002034 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002038:	4802      	ldr	r0, [pc, #8]	; (8002044 <USART6_IRQHandler+0x10>)
 800203a:	f008 fc09 	bl	800a850 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	200067b8 	.word	0x200067b8

08002048 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 800204c:	4802      	ldr	r0, [pc, #8]	; (8002058 <OTG_HS_IRQHandler+0x10>)
 800204e:	f003 fff9 	bl	8006044 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	2000b83c 	.word	0x2000b83c

0800205c <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 8002060:	4802      	ldr	r0, [pc, #8]	; (800206c <SAI1_IRQHandler+0x10>)
 8002062:	f007 fedd 	bl	8009e20 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20006838 	.word	0x20006838

08002070 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
	return 1;
 8002074:	2301      	movs	r3, #1
}
 8002076:	4618      	mov	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <_kill>:

int _kill(int pid, int sig)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800208a:	f010 fb21 	bl	80126d0 <__errno>
 800208e:	4602      	mov	r2, r0
 8002090:	2316      	movs	r3, #22
 8002092:	6013      	str	r3, [r2, #0]
	return -1;
 8002094:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002098:	4618      	mov	r0, r3
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <_exit>:

void _exit (int status)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020a8:	f04f 31ff 	mov.w	r1, #4294967295
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff ffe7 	bl	8002080 <_kill>
	while (1) {}		/* Make sure we hang here */
 80020b2:	e7fe      	b.n	80020b2 <_exit+0x12>

080020b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020bc:	4a14      	ldr	r2, [pc, #80]	; (8002110 <_sbrk+0x5c>)
 80020be:	4b15      	ldr	r3, [pc, #84]	; (8002114 <_sbrk+0x60>)
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020c8:	4b13      	ldr	r3, [pc, #76]	; (8002118 <_sbrk+0x64>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d102      	bne.n	80020d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020d0:	4b11      	ldr	r3, [pc, #68]	; (8002118 <_sbrk+0x64>)
 80020d2:	4a12      	ldr	r2, [pc, #72]	; (800211c <_sbrk+0x68>)
 80020d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020d6:	4b10      	ldr	r3, [pc, #64]	; (8002118 <_sbrk+0x64>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4413      	add	r3, r2
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d207      	bcs.n	80020f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020e4:	f010 faf4 	bl	80126d0 <__errno>
 80020e8:	4602      	mov	r2, r0
 80020ea:	230c      	movs	r3, #12
 80020ec:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80020ee:	f04f 33ff 	mov.w	r3, #4294967295
 80020f2:	e009      	b.n	8002108 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020f4:	4b08      	ldr	r3, [pc, #32]	; (8002118 <_sbrk+0x64>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020fa:	4b07      	ldr	r3, [pc, #28]	; (8002118 <_sbrk+0x64>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4413      	add	r3, r2
 8002102:	4a05      	ldr	r2, [pc, #20]	; (8002118 <_sbrk+0x64>)
 8002104:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002106:	68fb      	ldr	r3, [r7, #12]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20080000 	.word	0x20080000
 8002114:	00040000 	.word	0x00040000
 8002118:	2000013c 	.word	0x2000013c
 800211c:	2000bb08 	.word	0x2000bb08

08002120 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002124:	4b08      	ldr	r3, [pc, #32]	; (8002148 <SystemInit+0x28>)
 8002126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800212a:	4a07      	ldr	r2, [pc, #28]	; (8002148 <SystemInit+0x28>)
 800212c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002130:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002134:	4b04      	ldr	r3, [pc, #16]	; (8002148 <SystemInit+0x28>)
 8002136:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800213a:	609a      	str	r2, [r3, #8]
#endif
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	e000ed00 	.word	0xe000ed00

0800214c <SCB_CleanDCache_by_Addr>:
  \details Cleans D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800214c:	b480      	push	{r7}
 800214e:	b087      	sub	sp, #28
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800215e:	2320      	movs	r3, #32
 8002160:	60fb      	str	r3, [r7, #12]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002162:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 8002166:	e00b      	b.n	8002180 <SCB_CleanDCache_by_Addr+0x34>
      SCB->DCCMVAC = op_addr;
 8002168:	4a0c      	ldr	r2, [pc, #48]	; (800219c <SCB_CleanDCache_by_Addr+0x50>)
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	4413      	add	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	2b00      	cmp	r3, #0
 8002184:	dcf0      	bgt.n	8002168 <SCB_CleanDCache_by_Addr+0x1c>
 8002186:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800218a:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 800218e:	bf00      	nop
 8002190:	371c      	adds	r7, #28
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <AUDIO_PLAYER_Init>:
static AUDIO_ErrorTypeDef GetFileInfo(uint16_t file_idx, WAVE_FormatTypeDef *info);
static uint8_t PlayerInit(uint32_t AudioFreq);


AUDIO_ErrorTypeDef AUDIO_PLAYER_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  if(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, uwVolume, SAI_AUDIO_FREQUENCY_48K) == 0)
 80021a4:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <AUDIO_PLAYER_Init+0x28>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80021ae:	4619      	mov	r1, r3
 80021b0:	2004      	movs	r0, #4
 80021b2:	f002 f807 	bl	80041c4 <BSP_AUDIO_OUT_Init>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d101      	bne.n	80021c0 <AUDIO_PLAYER_Init+0x20>
  {
    return AUDIO_ERROR_NONE;
 80021bc:	2300      	movs	r3, #0
 80021be:	e000      	b.n	80021c2 <AUDIO_PLAYER_Init+0x22>
  }
  else
  {
    return AUDIO_ERROR_IO;
 80021c0:	2301      	movs	r3, #1
  }
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000004 	.word	0x20000004
 80021cc:	00000000 	.word	0x00000000

080021d0 <AUDIO_PLAYER_Start>:


// funkcja odtwarzająca dane z pliku WAV
AUDIO_ErrorTypeDef AUDIO_PLAYER_Start(uint8_t idx)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	71fb      	strb	r3, [r7, #7]
  uint32_t bytesread;

  f_close(&WavFile);
 80021da:	4839      	ldr	r0, [pc, #228]	; (80022c0 <AUDIO_PLAYER_Start+0xf0>)
 80021dc:	f00f faaf 	bl	801173e <f_close>
  if(Explorer_GetWavObjectNumber() > idx)
 80021e0:	f7ff f986 	bl	80014f0 <Explorer_GetWavObjectNumber>
 80021e4:	4603      	mov	r3, r0
 80021e6:	461a      	mov	r2, r3
 80021e8:	79fb      	ldrb	r3, [r7, #7]
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d957      	bls.n	80022a0 <AUDIO_PLAYER_Start+0xd0>
  {
    GetFileInfo(idx, &WaveFormat);
 80021f0:	79fb      	ldrb	r3, [r7, #7]
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	4933      	ldr	r1, [pc, #204]	; (80022c4 <AUDIO_PLAYER_Start+0xf4>)
 80021f6:	4618      	mov	r0, r3
 80021f8:	f000 f9de 	bl	80025b8 <GetFileInfo>

    /*Adjust the Audio frequency */
//    time_expected += 0.2;
//    grana = 127;
    double duration = WaveFormat.FileSize/4.;
 80021fc:	4b31      	ldr	r3, [pc, #196]	; (80022c4 <AUDIO_PLAYER_Start+0xf4>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	ee07 3a90 	vmov	s15, r3
 8002204:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002208:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800220c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002210:	ed87 7b04 	vstr	d7, [r7, #16]
    UINT new_rate = duration*1./time_expected;
 8002214:	4b2c      	ldr	r3, [pc, #176]	; (80022c8 <AUDIO_PLAYER_Start+0xf8>)
 8002216:	ed93 6b00 	vldr	d6, [r3]
 800221a:	ed97 5b04 	vldr	d5, [r7, #16]
 800221e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002222:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002226:	ee17 3a90 	vmov	r3, s15
 800222a:	60fb      	str	r3, [r7, #12]
//    new_rate = (grana*1./127)*48000;
    new_rate = grana*1./127*48000;
 800222c:	4b27      	ldr	r3, [pc, #156]	; (80022cc <AUDIO_PLAYER_Start+0xfc>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	ee07 3a90 	vmov	s15, r3
 8002234:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002238:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 80022b0 <AUDIO_PLAYER_Start+0xe0>
 800223c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002240:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 80022b8 <AUDIO_PLAYER_Start+0xe8>
 8002244:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002248:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800224c:	ee17 3a90 	vmov	r3, s15
 8002250:	60fb      	str	r3, [r7, #12]
    bytes_to_read = 3*new_rate;
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	4613      	mov	r3, r2
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	4413      	add	r3, r2
 800225a:	4a1d      	ldr	r2, [pc, #116]	; (80022d0 <AUDIO_PLAYER_Start+0x100>)
 800225c:	6013      	str	r3, [r2, #0]
//    rev = 1./new_rate;
//    new_rate = 48000;
    PlayerInit(new_rate); // alt arg: WaveFormat.SampleRate
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 f9da 	bl	8002618 <PlayerInit>

    BufferCtl.state = BUFFER_OFFSET_NONE;
 8002264:	4b1b      	ldr	r3, [pc, #108]	; (80022d4 <AUDIO_PLAYER_Start+0x104>)
 8002266:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800226a:	2200      	movs	r2, #0
 800226c:	701a      	strb	r2, [r3, #0]


    /* Get Data from USB Flash Disk */
    f_lseek(&WavFile, 0);
 800226e:	2100      	movs	r1, #0
 8002270:	4813      	ldr	r0, [pc, #76]	; (80022c0 <AUDIO_PLAYER_Start+0xf0>)
 8002272:	f00f fa8e 	bl	8011792 <f_lseek>
//			AUDIO_OUT_BUFFER_SIZE,//size/2,
//			(void *)&bytesread) == FR_OK)
//		{

			/* Clean Data Cache to update the content of the SRAM */
			SCB_CleanDCache_by_Addr((uint32_t*)&BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE);
 8002276:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800227a:	4816      	ldr	r0, [pc, #88]	; (80022d4 <AUDIO_PLAYER_Start+0x104>)
 800227c:	f7ff ff66 	bl	800214c <SCB_CleanDCache_by_Addr>

			AudioState = AUDIO_STATE_PLAY;
 8002280:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <AUDIO_PLAYER_Start+0x108>)
 8002282:	2203      	movs	r2, #3
 8002284:	701a      	strb	r2, [r3, #0]

			memset(&BufferCtl.buff[0], 0, AUDIO_OUT_BUFFER_SIZE);
 8002286:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800228a:	2100      	movs	r1, #0
 800228c:	4811      	ldr	r0, [pc, #68]	; (80022d4 <AUDIO_PLAYER_Start+0x104>)
 800228e:	f010 fa7d 	bl	801278c <memset>
		  //AUDIO_PlaybackDisplayButtons();
		  //BSP_LCD_DisplayStringAt(250, LINE(9), (uint8_t *)"  [PLAY ]", LEFT_MODE);
	//      {
//	        if(bytesread != 0)
//	        {
			  BSP_AUDIO_OUT_Play((uint16_t*)&BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE);
 8002292:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002296:	480f      	ldr	r0, [pc, #60]	; (80022d4 <AUDIO_PLAYER_Start+0x104>)
 8002298:	f001 ffe6 	bl	8004268 <BSP_AUDIO_OUT_Play>
			  return AUDIO_ERROR_NONE;
 800229c:	2300      	movs	r3, #0
 800229e:	e000      	b.n	80022a2 <AUDIO_PLAYER_Start+0xd2>
//	        }

//		}
  }
  return AUDIO_ERROR_IO;
 80022a0:	2301      	movs	r3, #1
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	f3af 8000 	nop.w
 80022b0:	00000000 	.word	0x00000000
 80022b4:	405fc000 	.word	0x405fc000
 80022b8:	00000000 	.word	0x00000000
 80022bc:	40e77000 	.word	0x40e77000
 80022c0:	2000a904 	.word	0x2000a904
 80022c4:	200068d8 	.word	0x200068d8
 80022c8:	20000008 	.word	0x20000008
 80022cc:	20000128 	.word	0x20000128
 80022d0:	2000214c 	.word	0x2000214c
 80022d4:	20000140 	.word	0x20000140
 80022d8:	200068bc 	.word	0x200068bc

080022dc <AUDIO_PLAYER_Process>:


/**/
AUDIO_ErrorTypeDef AUDIO_PLAYER_Process(void)
{
 80022dc:	b590      	push	{r4, r7, lr}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
  uint32_t bytesread;//, elapsed_time;
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 80022e2:	2300      	movs	r3, #0
 80022e4:	71fb      	strb	r3, [r7, #7]
  //uint8_t str[16];
  //static uint32_t prev_elapsed_time = 0xFFFFFFFF;

  switch(AudioState)
 80022e6:	4b92      	ldr	r3, [pc, #584]	; (8002530 <AUDIO_PLAYER_Process+0x254>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b06      	cmp	r3, #6
 80022ec:	f000 80ea 	beq.w	80024c4 <AUDIO_PLAYER_Process+0x1e8>
 80022f0:	2b0a      	cmp	r3, #10
 80022f2:	f000 80de 	beq.w	80024b2 <AUDIO_PLAYER_Process+0x1d6>
 80022f6:	2b03      	cmp	r3, #3
 80022f8:	d000      	beq.n	80022fc <AUDIO_PLAYER_Process+0x20>
  case AUDIO_STATE_IDLE:
  case AUDIO_STATE_INIT:
  default:
    /* Update audio state machine according to touch acquisition */
//    AUDIO_AcquireTouchButtons();
    break;
 80022fa:	e113      	b.n	8002524 <AUDIO_PLAYER_Process+0x248>
	  if (button_clicked)
 80022fc:	4b8d      	ldr	r3, [pc, #564]	; (8002534 <AUDIO_PLAYER_Process+0x258>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d009      	beq.n	8002318 <AUDIO_PLAYER_Process+0x3c>
		  BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002304:	2002      	movs	r0, #2
 8002306:	f001 ffd9 	bl	80042bc <BSP_AUDIO_OUT_Stop>
		  AudioState = AUDIO_STATE_NEXT;
 800230a:	4b89      	ldr	r3, [pc, #548]	; (8002530 <AUDIO_PLAYER_Process+0x254>)
 800230c:	2206      	movs	r2, #6
 800230e:	701a      	strb	r2, [r3, #0]
		  button_clicked = 0;
 8002310:	4b88      	ldr	r3, [pc, #544]	; (8002534 <AUDIO_PLAYER_Process+0x258>)
 8002312:	2200      	movs	r2, #0
 8002314:	701a      	strb	r2, [r3, #0]
		  break;
 8002316:	e105      	b.n	8002524 <AUDIO_PLAYER_Process+0x248>
	  if(BufferCtl.fptr >= WaveFormat.FileSize )
 8002318:	4a87      	ldr	r2, [pc, #540]	; (8002538 <AUDIO_PLAYER_Process+0x25c>)
 800231a:	f242 0304 	movw	r3, #8196	; 0x2004
 800231e:	4413      	add	r3, r2
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	4b86      	ldr	r3, [pc, #536]	; (800253c <AUDIO_PLAYER_Process+0x260>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	429a      	cmp	r2, r3
 8002328:	d309      	bcc.n	800233e <AUDIO_PLAYER_Process+0x62>
	    f_lseek(&WavFile, 0);
 800232a:	2100      	movs	r1, #0
 800232c:	4884      	ldr	r0, [pc, #528]	; (8002540 <AUDIO_PLAYER_Process+0x264>)
 800232e:	f00f fa30 	bl	8011792 <f_lseek>
	    BufferCtl.fptr=0;
 8002332:	4a81      	ldr	r2, [pc, #516]	; (8002538 <AUDIO_PLAYER_Process+0x25c>)
 8002334:	f242 0304 	movw	r3, #8196	; 0x2004
 8002338:	4413      	add	r3, r2
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
	  if (play_flag && !zagrana && !initialized)
 800233e:	4b81      	ldr	r3, [pc, #516]	; (8002544 <AUDIO_PLAYER_Process+0x268>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d018      	beq.n	8002378 <AUDIO_PLAYER_Process+0x9c>
 8002346:	4b80      	ldr	r3, [pc, #512]	; (8002548 <AUDIO_PLAYER_Process+0x26c>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	f083 0301 	eor.w	r3, r3, #1
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b00      	cmp	r3, #0
 8002352:	d011      	beq.n	8002378 <AUDIO_PLAYER_Process+0x9c>
 8002354:	4b7d      	ldr	r3, [pc, #500]	; (800254c <AUDIO_PLAYER_Process+0x270>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	f083 0301 	eor.w	r3, r3, #1
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00a      	beq.n	8002378 <AUDIO_PLAYER_Process+0x9c>
		  AUDIO_PLAYER_Start(FilePos);
 8002362:	4b7b      	ldr	r3, [pc, #492]	; (8002550 <AUDIO_PLAYER_Process+0x274>)
 8002364:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002368:	b2db      	uxtb	r3, r3
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff ff30 	bl	80021d0 <AUDIO_PLAYER_Start>
		  initialized=1;
 8002370:	4b76      	ldr	r3, [pc, #472]	; (800254c <AUDIO_PLAYER_Process+0x270>)
 8002372:	2201      	movs	r2, #1
 8002374:	701a      	strb	r2, [r3, #0]
		  break;
 8002376:	e0d5      	b.n	8002524 <AUDIO_PLAYER_Process+0x248>
	  if (play_flag && !zagrana)
 8002378:	4b72      	ldr	r3, [pc, #456]	; (8002544 <AUDIO_PLAYER_Process+0x268>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 808f 	beq.w	80024a0 <AUDIO_PLAYER_Process+0x1c4>
 8002382:	4b71      	ldr	r3, [pc, #452]	; (8002548 <AUDIO_PLAYER_Process+0x26c>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	f083 0301 	eor.w	r3, r3, #1
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 8087 	beq.w	80024a0 <AUDIO_PLAYER_Process+0x1c4>
					if(BufferCtl.state == BUFFER_OFFSET_HALF)
 8002392:	4b69      	ldr	r3, [pc, #420]	; (8002538 <AUDIO_PLAYER_Process+0x25c>)
 8002394:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d13c      	bne.n	8002418 <AUDIO_PLAYER_Process+0x13c>
						 if(f_read(&WavFile,
 800239e:	463b      	mov	r3, r7
 80023a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023a4:	496b      	ldr	r1, [pc, #428]	; (8002554 <AUDIO_PLAYER_Process+0x278>)
 80023a6:	4866      	ldr	r0, [pc, #408]	; (8002540 <AUDIO_PLAYER_Process+0x264>)
 80023a8:	f00f f80c 	bl	80113c4 <f_read>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d009      	beq.n	80023c6 <AUDIO_PLAYER_Process+0xea>
							SCB_CleanDCache_by_Addr((uint32_t*)&BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE/2);
 80023b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023b6:	4860      	ldr	r0, [pc, #384]	; (8002538 <AUDIO_PLAYER_Process+0x25c>)
 80023b8:	f7ff fec8 	bl	800214c <SCB_CleanDCache_by_Addr>
							BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 80023bc:	2002      	movs	r0, #2
 80023be:	f001 ff7d 	bl	80042bc <BSP_AUDIO_OUT_Stop>
							return AUDIO_ERROR_IO;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e0af      	b.n	8002526 <AUDIO_PLAYER_Process+0x24a>
					  	 memcpy(&BufferCtl.buff[0], &TempBufferptr[0], AUDIO_OUT_BUFFER_SIZE/2);
 80023c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023ca:	4962      	ldr	r1, [pc, #392]	; (8002554 <AUDIO_PLAYER_Process+0x278>)
 80023cc:	485a      	ldr	r0, [pc, #360]	; (8002538 <AUDIO_PLAYER_Process+0x25c>)
 80023ce:	f010 f9b9 	bl	8012744 <memcpy>
					  	 BufferCtl.state = BUFFER_OFFSET_NONE;
 80023d2:	4b59      	ldr	r3, [pc, #356]	; (8002538 <AUDIO_PLAYER_Process+0x25c>)
 80023d4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80023d8:	2200      	movs	r2, #0
 80023da:	701a      	strb	r2, [r3, #0]
					  	 BufferCtl.fptr += bytesread;
 80023dc:	4a56      	ldr	r2, [pc, #344]	; (8002538 <AUDIO_PLAYER_Process+0x25c>)
 80023de:	f242 0304 	movw	r3, #8196	; 0x2004
 80023e2:	4413      	add	r3, r2
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	441a      	add	r2, r3
 80023ea:	4953      	ldr	r1, [pc, #332]	; (8002538 <AUDIO_PLAYER_Process+0x25c>)
 80023ec:	f242 0304 	movw	r3, #8196	; 0x2004
 80023f0:	440b      	add	r3, r1
 80023f2:	601a      	str	r2, [r3, #0]
						bytes_readed += bytesread;
 80023f4:	4b58      	ldr	r3, [pc, #352]	; (8002558 <AUDIO_PLAYER_Process+0x27c>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	4413      	add	r3, r2
 80023fc:	4a56      	ldr	r2, [pc, #344]	; (8002558 <AUDIO_PLAYER_Process+0x27c>)
 80023fe:	6013      	str	r3, [r2, #0]
						if (bytes_readed > bytes_to_read)
 8002400:	4b55      	ldr	r3, [pc, #340]	; (8002558 <AUDIO_PLAYER_Process+0x27c>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	4b55      	ldr	r3, [pc, #340]	; (800255c <AUDIO_PLAYER_Process+0x280>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	429a      	cmp	r2, r3
 800240a:	d905      	bls.n	8002418 <AUDIO_PLAYER_Process+0x13c>
							zagrana=1;
 800240c:	4b4e      	ldr	r3, [pc, #312]	; (8002548 <AUDIO_PLAYER_Process+0x26c>)
 800240e:	2201      	movs	r2, #1
 8002410:	701a      	strb	r2, [r3, #0]
							bytes_readed=0;
 8002412:	4b51      	ldr	r3, [pc, #324]	; (8002558 <AUDIO_PLAYER_Process+0x27c>)
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
					if(BufferCtl.state == BUFFER_OFFSET_FULL)
 8002418:	4b47      	ldr	r3, [pc, #284]	; (8002538 <AUDIO_PLAYER_Process+0x25c>)
 800241a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	2b02      	cmp	r3, #2
 8002422:	d144      	bne.n	80024ae <AUDIO_PLAYER_Process+0x1d2>
						  if(f_read(&WavFile,
 8002424:	463b      	mov	r3, r7
 8002426:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800242a:	494a      	ldr	r1, [pc, #296]	; (8002554 <AUDIO_PLAYER_Process+0x278>)
 800242c:	4844      	ldr	r0, [pc, #272]	; (8002540 <AUDIO_PLAYER_Process+0x264>)
 800242e:	f00e ffc9 	bl	80113c4 <f_read>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d009      	beq.n	800244c <AUDIO_PLAYER_Process+0x170>
								SCB_CleanDCache_by_Addr((uint32_t*)&BufferCtl.buff[AUDIO_OUT_BUFFER_SIZE /2], AUDIO_OUT_BUFFER_SIZE/2);
 8002438:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800243c:	4848      	ldr	r0, [pc, #288]	; (8002560 <AUDIO_PLAYER_Process+0x284>)
 800243e:	f7ff fe85 	bl	800214c <SCB_CleanDCache_by_Addr>
								BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8002442:	2002      	movs	r0, #2
 8002444:	f001 ff3a 	bl	80042bc <BSP_AUDIO_OUT_Stop>
								return AUDIO_ERROR_IO;
 8002448:	2301      	movs	r3, #1
 800244a:	e06c      	b.n	8002526 <AUDIO_PLAYER_Process+0x24a>
						  memcpy(&BufferCtl.buff[AUDIO_OUT_BUFFER_SIZE/2], &TempBufferptr[0], AUDIO_OUT_BUFFER_SIZE/2);
 800244c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002450:	4940      	ldr	r1, [pc, #256]	; (8002554 <AUDIO_PLAYER_Process+0x278>)
 8002452:	4843      	ldr	r0, [pc, #268]	; (8002560 <AUDIO_PLAYER_Process+0x284>)
 8002454:	f010 f976 	bl	8012744 <memcpy>
						  BufferCtl.state = BUFFER_OFFSET_NONE;
 8002458:	4b37      	ldr	r3, [pc, #220]	; (8002538 <AUDIO_PLAYER_Process+0x25c>)
 800245a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800245e:	2200      	movs	r2, #0
 8002460:	701a      	strb	r2, [r3, #0]
						  BufferCtl.fptr += bytesread;
 8002462:	4a35      	ldr	r2, [pc, #212]	; (8002538 <AUDIO_PLAYER_Process+0x25c>)
 8002464:	f242 0304 	movw	r3, #8196	; 0x2004
 8002468:	4413      	add	r3, r2
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	441a      	add	r2, r3
 8002470:	4931      	ldr	r1, [pc, #196]	; (8002538 <AUDIO_PLAYER_Process+0x25c>)
 8002472:	f242 0304 	movw	r3, #8196	; 0x2004
 8002476:	440b      	add	r3, r1
 8002478:	601a      	str	r2, [r3, #0]
							bytes_readed += bytesread;
 800247a:	4b37      	ldr	r3, [pc, #220]	; (8002558 <AUDIO_PLAYER_Process+0x27c>)
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	4413      	add	r3, r2
 8002482:	4a35      	ldr	r2, [pc, #212]	; (8002558 <AUDIO_PLAYER_Process+0x27c>)
 8002484:	6013      	str	r3, [r2, #0]
							if (bytes_readed > bytes_to_read)
 8002486:	4b34      	ldr	r3, [pc, #208]	; (8002558 <AUDIO_PLAYER_Process+0x27c>)
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	4b34      	ldr	r3, [pc, #208]	; (800255c <AUDIO_PLAYER_Process+0x280>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	d90d      	bls.n	80024ae <AUDIO_PLAYER_Process+0x1d2>
								zagrana=1;
 8002492:	4b2d      	ldr	r3, [pc, #180]	; (8002548 <AUDIO_PLAYER_Process+0x26c>)
 8002494:	2201      	movs	r2, #1
 8002496:	701a      	strb	r2, [r3, #0]
								bytes_readed=0;
 8002498:	4b2f      	ldr	r3, [pc, #188]	; (8002558 <AUDIO_PLAYER_Process+0x27c>)
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
					if(BufferCtl.state == BUFFER_OFFSET_FULL)
 800249e:	e006      	b.n	80024ae <AUDIO_PLAYER_Process+0x1d2>
		  memset(&BufferCtl.buff[0], 0, AUDIO_OUT_BUFFER_SIZE);
 80024a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024a4:	2100      	movs	r1, #0
 80024a6:	4824      	ldr	r0, [pc, #144]	; (8002538 <AUDIO_PLAYER_Process+0x25c>)
 80024a8:	f010 f970 	bl	801278c <memset>
    break;
 80024ac:	e03a      	b.n	8002524 <AUDIO_PLAYER_Process+0x248>
					if(BufferCtl.state == BUFFER_OFFSET_FULL)
 80024ae:	bf00      	nop
    break;
 80024b0:	e038      	b.n	8002524 <AUDIO_PLAYER_Process+0x248>
    BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 80024b2:	2002      	movs	r0, #2
 80024b4:	f001 ff02 	bl	80042bc <BSP_AUDIO_OUT_Stop>
    AudioState = AUDIO_STATE_IDLE;
 80024b8:	4b1d      	ldr	r3, [pc, #116]	; (8002530 <AUDIO_PLAYER_Process+0x254>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	701a      	strb	r2, [r3, #0]
    audio_error = AUDIO_ERROR_IO;
 80024be:	2301      	movs	r3, #1
 80024c0:	71fb      	strb	r3, [r7, #7]
    break;
 80024c2:	e02f      	b.n	8002524 <AUDIO_PLAYER_Process+0x248>
	zagrana=0;
 80024c4:	4b20      	ldr	r3, [pc, #128]	; (8002548 <AUDIO_PLAYER_Process+0x26c>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	701a      	strb	r2, [r3, #0]
	play_flag=0;
 80024ca:	4b1e      	ldr	r3, [pc, #120]	; (8002544 <AUDIO_PLAYER_Process+0x268>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	701a      	strb	r2, [r3, #0]
	if(++FilePos >= Explorer_GetWavObjectNumber())
 80024d0:	4b1f      	ldr	r3, [pc, #124]	; (8002550 <AUDIO_PLAYER_Process+0x274>)
 80024d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	3301      	adds	r3, #1
 80024da:	b29b      	uxth	r3, r3
 80024dc:	b21a      	sxth	r2, r3
 80024de:	4b1c      	ldr	r3, [pc, #112]	; (8002550 <AUDIO_PLAYER_Process+0x274>)
 80024e0:	801a      	strh	r2, [r3, #0]
 80024e2:	4b1b      	ldr	r3, [pc, #108]	; (8002550 <AUDIO_PLAYER_Process+0x274>)
 80024e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024e8:	461c      	mov	r4, r3
 80024ea:	f7ff f801 	bl	80014f0 <Explorer_GetWavObjectNumber>
 80024ee:	4603      	mov	r3, r0
 80024f0:	429c      	cmp	r4, r3
 80024f2:	db02      	blt.n	80024fa <AUDIO_PLAYER_Process+0x21e>
	  FilePos = 0;
 80024f4:	4b16      	ldr	r3, [pc, #88]	; (8002550 <AUDIO_PLAYER_Process+0x274>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	801a      	strh	r2, [r3, #0]
	BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 80024fa:	2002      	movs	r0, #2
 80024fc:	f001 fede 	bl	80042bc <BSP_AUDIO_OUT_Stop>
	AUDIO_PLAYER_Start(FilePos);
 8002500:	4b13      	ldr	r3, [pc, #76]	; (8002550 <AUDIO_PLAYER_Process+0x274>)
 8002502:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002506:	b2db      	uxtb	r3, r3
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff fe61 	bl	80021d0 <AUDIO_PLAYER_Start>
	if(uwVolume == 0)
 800250e:	4b15      	ldr	r3, [pc, #84]	; (8002564 <AUDIO_PLAYER_Process+0x288>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d105      	bne.n	8002522 <AUDIO_PLAYER_Process+0x246>
	  BSP_AUDIO_OUT_SetVolume(uwVolume);
 8002516:	4b13      	ldr	r3, [pc, #76]	; (8002564 <AUDIO_PLAYER_Process+0x288>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	b2db      	uxtb	r3, r3
 800251c:	4618      	mov	r0, r3
 800251e:	f001 feef 	bl	8004300 <BSP_AUDIO_OUT_SetVolume>
	break;
 8002522:	bf00      	nop
  }
  return audio_error;
 8002524:	79fb      	ldrb	r3, [r7, #7]
}
 8002526:	4618      	mov	r0, r3
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	bd90      	pop	{r4, r7, pc}
 800252e:	bf00      	nop
 8002530:	200068bc 	.word	0x200068bc
 8002534:	20000132 	.word	0x20000132
 8002538:	20000140 	.word	0x20000140
 800253c:	200068d8 	.word	0x200068d8
 8002540:	2000a904 	.word	0x2000a904
 8002544:	20000129 	.word	0x20000129
 8002548:	2000214a 	.word	0x2000214a
 800254c:	2000214b 	.word	0x2000214b
 8002550:	20002148 	.word	0x20002148
 8002554:	20006904 	.word	0x20006904
 8002558:	20002150 	.word	0x20002150
 800255c:	2000214c 	.word	0x2000214c
 8002560:	20001140 	.word	0x20001140
 8002564:	20000004 	.word	0x20000004

08002568 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
}



void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 800256c:	4b06      	ldr	r3, [pc, #24]	; (8002588 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x20>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b03      	cmp	r3, #3
 8002572:	d104      	bne.n	800257e <BSP_AUDIO_OUT_TransferComplete_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_FULL;
 8002574:	4b05      	ldr	r3, [pc, #20]	; (800258c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x24>)
 8002576:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800257a:	2202      	movs	r2, #2
 800257c:	701a      	strb	r2, [r3, #0]
  }
}
 800257e:	bf00      	nop
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	200068bc 	.word	0x200068bc
 800258c:	20000140 	.word	0x20000140

08002590 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:


void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8002594:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b03      	cmp	r3, #3
 800259a:	d104      	bne.n	80025a6 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_HALF;
 800259c:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 800259e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80025a2:	2201      	movs	r2, #1
 80025a4:	701a      	strb	r2, [r3, #0]
  }
}
 80025a6:	bf00      	nop
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	200068bc 	.word	0x200068bc
 80025b4:	20000140 	.word	0x20000140

080025b8 <GetFileInfo>:
                            Static Functions
*******************************************************************************/


static AUDIO_ErrorTypeDef GetFileInfo(uint16_t file_idx, WAVE_FormatTypeDef *info)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	6039      	str	r1, [r7, #0]
 80025c2:	80fb      	strh	r3, [r7, #6]
  uint32_t bytesread;
  //uint32_t duration;
  //uint8_t str[FILEMGR_FILE_NAME_SIZE + 20];

  if(f_open(&WavFile, (char *)FileList.file[file_idx].name, FA_OPEN_EXISTING | FA_READ) == FR_OK)
 80025c4:	88fa      	ldrh	r2, [r7, #6]
 80025c6:	4613      	mov	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4413      	add	r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	4413      	add	r3, r2
 80025d0:	4a0f      	ldr	r2, [pc, #60]	; (8002610 <GetFileInfo+0x58>)
 80025d2:	4413      	add	r3, r2
 80025d4:	3301      	adds	r3, #1
 80025d6:	2201      	movs	r2, #1
 80025d8:	4619      	mov	r1, r3
 80025da:	480e      	ldr	r0, [pc, #56]	; (8002614 <GetFileInfo+0x5c>)
 80025dc:	f00e fd34 	bl	8011048 <f_open>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10e      	bne.n	8002604 <GetFileInfo+0x4c>
  {
    /* Fill the buffer to Send */
    if(f_read(&WavFile, info, sizeof(WaveFormat), (void *)&bytesread) == FR_OK)
 80025e6:	f107 030c 	add.w	r3, r7, #12
 80025ea:	222c      	movs	r2, #44	; 0x2c
 80025ec:	6839      	ldr	r1, [r7, #0]
 80025ee:	4809      	ldr	r0, [pc, #36]	; (8002614 <GetFileInfo+0x5c>)
 80025f0:	f00e fee8 	bl	80113c4 <f_read>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <GetFileInfo+0x46>

      //BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
      //sprintf((char *)str,  "Volume : %lu", uwVolume);
      //BSP_LCD_ClearStringLine(9);
      //BSP_LCD_DisplayStringAtLine(9, str);
      return AUDIO_ERROR_NONE;
 80025fa:	2300      	movs	r3, #0
 80025fc:	e003      	b.n	8002606 <GetFileInfo+0x4e>
    }
    f_close(&WavFile);
 80025fe:	4805      	ldr	r0, [pc, #20]	; (8002614 <GetFileInfo+0x5c>)
 8002600:	f00f f89d 	bl	801173e <f_close>
  }
  return AUDIO_ERROR_IO;
 8002604:	2301      	movs	r3, #1
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	20002274 	.word	0x20002274
 8002614:	2000a904 	.word	0x2000a904

08002618 <PlayerInit>:




static uint8_t PlayerInit(uint32_t AudioFreq)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Initialize the Audio codec and all related peripherals (I2S, I2C, IOExpander, IOs...) */
  if(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_BOTH, uwVolume, AudioFreq) != 0)
 8002620:	4b0a      	ldr	r3, [pc, #40]	; (800264c <PlayerInit+0x34>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	b2db      	uxtb	r3, r3
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	4619      	mov	r1, r3
 800262a:	2003      	movs	r0, #3
 800262c:	f001 fdca 	bl	80041c4 <BSP_AUDIO_OUT_Init>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <PlayerInit+0x22>
  {
    return 1;
 8002636:	2301      	movs	r3, #1
 8002638:	e003      	b.n	8002642 <PlayerInit+0x2a>
  }
  else
  {
    BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 800263a:	2005      	movs	r0, #5
 800263c:	f001 fe78 	bl	8004330 <BSP_AUDIO_OUT_SetAudioFrameSlot>
    return 0;
 8002640:	2300      	movs	r3, #0
  }
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000004 	.word	0x20000004

08002650 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002650:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002688 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002654:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002656:	e003      	b.n	8002660 <LoopCopyDataInit>

08002658 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002658:	4b0c      	ldr	r3, [pc, #48]	; (800268c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800265a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800265c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800265e:	3104      	adds	r1, #4

08002660 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002660:	480b      	ldr	r0, [pc, #44]	; (8002690 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002662:	4b0c      	ldr	r3, [pc, #48]	; (8002694 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002664:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002666:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002668:	d3f6      	bcc.n	8002658 <CopyDataInit>
  ldr  r2, =_sbss
 800266a:	4a0b      	ldr	r2, [pc, #44]	; (8002698 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800266c:	e002      	b.n	8002674 <LoopFillZerobss>

0800266e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800266e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002670:	f842 3b04 	str.w	r3, [r2], #4

08002674 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002674:	4b09      	ldr	r3, [pc, #36]	; (800269c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002676:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002678:	d3f9      	bcc.n	800266e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800267a:	f7ff fd51 	bl	8002120 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800267e:	f010 f82d 	bl	80126dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002682:	f7fe ff41 	bl	8001508 <main>
  bx  lr    
 8002686:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002688:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800268c:	08012b8c 	.word	0x08012b8c
  ldr  r0, =_sdata
 8002690:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002694:	200000e4 	.word	0x200000e4
  ldr  r2, =_sbss
 8002698:	20000100 	.word	0x20000100
  ldr  r3, = _ebss
 800269c:	2000bb04 	.word	0x2000bb04

080026a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026a0:	e7fe      	b.n	80026a0 <ADC_IRQHandler>
	...

080026a4 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	607b      	str	r3, [r7, #4]
 80026ac:	4603      	mov	r3, r0
 80026ae:	81fb      	strh	r3, [r7, #14]
 80026b0:	460b      	mov	r3, r1
 80026b2:	81bb      	strh	r3, [r7, #12]
 80026b4:	4613      	mov	r3, r2
 80026b6:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 80026b8:	2300      	movs	r3, #0
 80026ba:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 80026bc:	89bb      	ldrh	r3, [r7, #12]
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 80026c2:	89bb      	ldrh	r3, [r7, #12]
 80026c4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026c8:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 80026ca:	2300      	movs	r3, #0
 80026cc:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 80026ce:	f001 fd05 	bl	80040dc <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 80026d2:	89fb      	ldrh	r3, [r7, #14]
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2203      	movs	r2, #3
 80026d8:	f44f 7181 	mov.w	r1, #258	; 0x102
 80026dc:	4618      	mov	r0, r3
 80026de:	f001 fab3 	bl	8003c48 <CODEC_IO_Write>
 80026e2:	4603      	mov	r3, r0
 80026e4:	461a      	mov	r2, r3
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	4413      	add	r3, r2
 80026ea:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 80026ec:	89fb      	ldrh	r3, [r7, #14]
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2200      	movs	r2, #0
 80026f2:	f640 0117 	movw	r1, #2071	; 0x817
 80026f6:	4618      	mov	r0, r3
 80026f8:	f001 faa6 	bl	8003c48 <CODEC_IO_Write>
 80026fc:	4603      	mov	r3, r0
 80026fe:	461a      	mov	r2, r3
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	4413      	add	r3, r2
 8002704:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8002706:	89fb      	ldrh	r3, [r7, #14]
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2200      	movs	r2, #0
 800270c:	f44f 7181 	mov.w	r1, #258	; 0x102
 8002710:	4618      	mov	r0, r3
 8002712:	f001 fa99 	bl	8003c48 <CODEC_IO_Write>
 8002716:	4603      	mov	r3, r0
 8002718:	461a      	mov	r2, r3
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	4413      	add	r3, r2
 800271e:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8002720:	89fb      	ldrh	r3, [r7, #14]
 8002722:	b2db      	uxtb	r3, r3
 8002724:	226c      	movs	r2, #108	; 0x6c
 8002726:	2139      	movs	r1, #57	; 0x39
 8002728:	4618      	mov	r0, r3
 800272a:	f001 fa8d 	bl	8003c48 <CODEC_IO_Write>
 800272e:	4603      	mov	r3, r0
 8002730:	461a      	mov	r2, r3
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	4413      	add	r3, r2
 8002736:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8002738:	8afb      	ldrh	r3, [r7, #22]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00c      	beq.n	8002758 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 800273e:	89fb      	ldrh	r3, [r7, #14]
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2213      	movs	r2, #19
 8002744:	2101      	movs	r1, #1
 8002746:	4618      	mov	r0, r3
 8002748:	f001 fa7e 	bl	8003c48 <CODEC_IO_Write>
 800274c:	4603      	mov	r3, r0
 800274e:	461a      	mov	r2, r3
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	4413      	add	r3, r2
 8002754:	61fb      	str	r3, [r7, #28]
 8002756:	e00b      	b.n	8002770 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8002758:	89fb      	ldrh	r3, [r7, #14]
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2203      	movs	r2, #3
 800275e:	2101      	movs	r1, #1
 8002760:	4618      	mov	r0, r3
 8002762:	f001 fa71 	bl	8003c48 <CODEC_IO_Write>
 8002766:	4603      	mov	r3, r0
 8002768:	461a      	mov	r2, r3
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	4413      	add	r3, r2
 800276e:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8002770:	2032      	movs	r0, #50	; 0x32
 8002772:	f001 fd1b 	bl	80041ac <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8002776:	8b3b      	ldrh	r3, [r7, #24]
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 815b 	beq.w	8002a34 <wm8994_Init+0x390>
  {
    outputEnabled = 1;
 800277e:	4bbc      	ldr	r3, [pc, #752]	; (8002a70 <wm8994_Init+0x3cc>)
 8002780:	2201      	movs	r2, #1
 8002782:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8002784:	8b3b      	ldrh	r3, [r7, #24]
 8002786:	2b02      	cmp	r3, #2
 8002788:	d047      	beq.n	800281a <wm8994_Init+0x176>
 800278a:	2b03      	cmp	r3, #3
 800278c:	f000 8087 	beq.w	800289e <wm8994_Init+0x1fa>
 8002790:	2b01      	cmp	r3, #1
 8002792:	f040 810c 	bne.w	80029ae <wm8994_Init+0x30a>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8002796:	89fb      	ldrh	r3, [r7, #14]
 8002798:	b2db      	uxtb	r3, r3
 800279a:	f640 420c 	movw	r2, #3084	; 0xc0c
 800279e:	2105      	movs	r1, #5
 80027a0:	4618      	mov	r0, r3
 80027a2:	f001 fa51 	bl	8003c48 <CODEC_IO_Write>
 80027a6:	4603      	mov	r3, r0
 80027a8:	461a      	mov	r2, r3
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	4413      	add	r3, r2
 80027ae:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 80027b0:	89fb      	ldrh	r3, [r7, #14]
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2200      	movs	r2, #0
 80027b6:	f240 6101 	movw	r1, #1537	; 0x601
 80027ba:	4618      	mov	r0, r3
 80027bc:	f001 fa44 	bl	8003c48 <CODEC_IO_Write>
 80027c0:	4603      	mov	r3, r0
 80027c2:	461a      	mov	r2, r3
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	4413      	add	r3, r2
 80027c8:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 80027ca:	89fb      	ldrh	r3, [r7, #14]
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2200      	movs	r2, #0
 80027d0:	f240 6102 	movw	r1, #1538	; 0x602
 80027d4:	4618      	mov	r0, r3
 80027d6:	f001 fa37 	bl	8003c48 <CODEC_IO_Write>
 80027da:	4603      	mov	r3, r0
 80027dc:	461a      	mov	r2, r3
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	4413      	add	r3, r2
 80027e2:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80027e4:	89fb      	ldrh	r3, [r7, #14]
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2202      	movs	r2, #2
 80027ea:	f240 6104 	movw	r1, #1540	; 0x604
 80027ee:	4618      	mov	r0, r3
 80027f0:	f001 fa2a 	bl	8003c48 <CODEC_IO_Write>
 80027f4:	4603      	mov	r3, r0
 80027f6:	461a      	mov	r2, r3
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	4413      	add	r3, r2
 80027fc:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80027fe:	89fb      	ldrh	r3, [r7, #14]
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2202      	movs	r2, #2
 8002804:	f240 6105 	movw	r1, #1541	; 0x605
 8002808:	4618      	mov	r0, r3
 800280a:	f001 fa1d 	bl	8003c48 <CODEC_IO_Write>
 800280e:	4603      	mov	r3, r0
 8002810:	461a      	mov	r2, r3
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	4413      	add	r3, r2
 8002816:	61fb      	str	r3, [r7, #28]
      break;
 8002818:	e10f      	b.n	8002a3a <wm8994_Init+0x396>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800281a:	89fb      	ldrh	r3, [r7, #14]
 800281c:	b2db      	uxtb	r3, r3
 800281e:	f240 3203 	movw	r2, #771	; 0x303
 8002822:	2105      	movs	r1, #5
 8002824:	4618      	mov	r0, r3
 8002826:	f001 fa0f 	bl	8003c48 <CODEC_IO_Write>
 800282a:	4603      	mov	r3, r0
 800282c:	461a      	mov	r2, r3
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	4413      	add	r3, r2
 8002832:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8002834:	89fb      	ldrh	r3, [r7, #14]
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2201      	movs	r2, #1
 800283a:	f240 6101 	movw	r1, #1537	; 0x601
 800283e:	4618      	mov	r0, r3
 8002840:	f001 fa02 	bl	8003c48 <CODEC_IO_Write>
 8002844:	4603      	mov	r3, r0
 8002846:	461a      	mov	r2, r3
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	4413      	add	r3, r2
 800284c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800284e:	89fb      	ldrh	r3, [r7, #14]
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2201      	movs	r2, #1
 8002854:	f240 6102 	movw	r1, #1538	; 0x602
 8002858:	4618      	mov	r0, r3
 800285a:	f001 f9f5 	bl	8003c48 <CODEC_IO_Write>
 800285e:	4603      	mov	r3, r0
 8002860:	461a      	mov	r2, r3
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	4413      	add	r3, r2
 8002866:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8002868:	89fb      	ldrh	r3, [r7, #14]
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2200      	movs	r2, #0
 800286e:	f240 6104 	movw	r1, #1540	; 0x604
 8002872:	4618      	mov	r0, r3
 8002874:	f001 f9e8 	bl	8003c48 <CODEC_IO_Write>
 8002878:	4603      	mov	r3, r0
 800287a:	461a      	mov	r2, r3
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	4413      	add	r3, r2
 8002880:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8002882:	89fb      	ldrh	r3, [r7, #14]
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2200      	movs	r2, #0
 8002888:	f240 6105 	movw	r1, #1541	; 0x605
 800288c:	4618      	mov	r0, r3
 800288e:	f001 f9db 	bl	8003c48 <CODEC_IO_Write>
 8002892:	4603      	mov	r3, r0
 8002894:	461a      	mov	r2, r3
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	4413      	add	r3, r2
 800289a:	61fb      	str	r3, [r7, #28]
      break;
 800289c:	e0cd      	b.n	8002a3a <wm8994_Init+0x396>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800289e:	8afb      	ldrh	r3, [r7, #22]
 80028a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028a4:	d141      	bne.n	800292a <wm8994_Init+0x286>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80028a6:	89fb      	ldrh	r3, [r7, #14]
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	f640 720f 	movw	r2, #3855	; 0xf0f
 80028ae:	2105      	movs	r1, #5
 80028b0:	4618      	mov	r0, r3
 80028b2:	f001 f9c9 	bl	8003c48 <CODEC_IO_Write>
 80028b6:	4603      	mov	r3, r0
 80028b8:	461a      	mov	r2, r3
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	4413      	add	r3, r2
 80028be:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 80028c0:	89fb      	ldrh	r3, [r7, #14]
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2203      	movs	r2, #3
 80028c6:	f240 6101 	movw	r1, #1537	; 0x601
 80028ca:	4618      	mov	r0, r3
 80028cc:	f001 f9bc 	bl	8003c48 <CODEC_IO_Write>
 80028d0:	4603      	mov	r3, r0
 80028d2:	461a      	mov	r2, r3
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	4413      	add	r3, r2
 80028d8:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 80028da:	89fb      	ldrh	r3, [r7, #14]
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2203      	movs	r2, #3
 80028e0:	f240 6102 	movw	r1, #1538	; 0x602
 80028e4:	4618      	mov	r0, r3
 80028e6:	f001 f9af 	bl	8003c48 <CODEC_IO_Write>
 80028ea:	4603      	mov	r3, r0
 80028ec:	461a      	mov	r2, r3
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	4413      	add	r3, r2
 80028f2:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 80028f4:	89fb      	ldrh	r3, [r7, #14]
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2203      	movs	r2, #3
 80028fa:	f240 6104 	movw	r1, #1540	; 0x604
 80028fe:	4618      	mov	r0, r3
 8002900:	f001 f9a2 	bl	8003c48 <CODEC_IO_Write>
 8002904:	4603      	mov	r3, r0
 8002906:	461a      	mov	r2, r3
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	4413      	add	r3, r2
 800290c:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 800290e:	89fb      	ldrh	r3, [r7, #14]
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2203      	movs	r2, #3
 8002914:	f240 6105 	movw	r1, #1541	; 0x605
 8002918:	4618      	mov	r0, r3
 800291a:	f001 f995 	bl	8003c48 <CODEC_IO_Write>
 800291e:	4603      	mov	r3, r0
 8002920:	461a      	mov	r2, r3
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	4413      	add	r3, r2
 8002926:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 8002928:	e087      	b.n	8002a3a <wm8994_Init+0x396>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 800292a:	89fb      	ldrh	r3, [r7, #14]
 800292c:	b2db      	uxtb	r3, r3
 800292e:	f640 720f 	movw	r2, #3855	; 0xf0f
 8002932:	2105      	movs	r1, #5
 8002934:	4618      	mov	r0, r3
 8002936:	f001 f987 	bl	8003c48 <CODEC_IO_Write>
 800293a:	4603      	mov	r3, r0
 800293c:	461a      	mov	r2, r3
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	4413      	add	r3, r2
 8002942:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8002944:	89fb      	ldrh	r3, [r7, #14]
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2201      	movs	r2, #1
 800294a:	f240 6101 	movw	r1, #1537	; 0x601
 800294e:	4618      	mov	r0, r3
 8002950:	f001 f97a 	bl	8003c48 <CODEC_IO_Write>
 8002954:	4603      	mov	r3, r0
 8002956:	461a      	mov	r2, r3
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	4413      	add	r3, r2
 800295c:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800295e:	89fb      	ldrh	r3, [r7, #14]
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2201      	movs	r2, #1
 8002964:	f240 6102 	movw	r1, #1538	; 0x602
 8002968:	4618      	mov	r0, r3
 800296a:	f001 f96d 	bl	8003c48 <CODEC_IO_Write>
 800296e:	4603      	mov	r3, r0
 8002970:	461a      	mov	r2, r3
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	4413      	add	r3, r2
 8002976:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8002978:	89fb      	ldrh	r3, [r7, #14]
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2202      	movs	r2, #2
 800297e:	f240 6104 	movw	r1, #1540	; 0x604
 8002982:	4618      	mov	r0, r3
 8002984:	f001 f960 	bl	8003c48 <CODEC_IO_Write>
 8002988:	4603      	mov	r3, r0
 800298a:	461a      	mov	r2, r3
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	4413      	add	r3, r2
 8002990:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8002992:	89fb      	ldrh	r3, [r7, #14]
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2202      	movs	r2, #2
 8002998:	f240 6105 	movw	r1, #1541	; 0x605
 800299c:	4618      	mov	r0, r3
 800299e:	f001 f953 	bl	8003c48 <CODEC_IO_Write>
 80029a2:	4603      	mov	r3, r0
 80029a4:	461a      	mov	r2, r3
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	4413      	add	r3, r2
 80029aa:	61fb      	str	r3, [r7, #28]
      break;
 80029ac:	e045      	b.n	8002a3a <wm8994_Init+0x396>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80029ae:	89fb      	ldrh	r3, [r7, #14]
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	f240 3203 	movw	r2, #771	; 0x303
 80029b6:	2105      	movs	r1, #5
 80029b8:	4618      	mov	r0, r3
 80029ba:	f001 f945 	bl	8003c48 <CODEC_IO_Write>
 80029be:	4603      	mov	r3, r0
 80029c0:	461a      	mov	r2, r3
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	4413      	add	r3, r2
 80029c6:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80029c8:	89fb      	ldrh	r3, [r7, #14]
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2201      	movs	r2, #1
 80029ce:	f240 6101 	movw	r1, #1537	; 0x601
 80029d2:	4618      	mov	r0, r3
 80029d4:	f001 f938 	bl	8003c48 <CODEC_IO_Write>
 80029d8:	4603      	mov	r3, r0
 80029da:	461a      	mov	r2, r3
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	4413      	add	r3, r2
 80029e0:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80029e2:	89fb      	ldrh	r3, [r7, #14]
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2201      	movs	r2, #1
 80029e8:	f240 6102 	movw	r1, #1538	; 0x602
 80029ec:	4618      	mov	r0, r3
 80029ee:	f001 f92b 	bl	8003c48 <CODEC_IO_Write>
 80029f2:	4603      	mov	r3, r0
 80029f4:	461a      	mov	r2, r3
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	4413      	add	r3, r2
 80029fa:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80029fc:	89fb      	ldrh	r3, [r7, #14]
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2200      	movs	r2, #0
 8002a02:	f240 6104 	movw	r1, #1540	; 0x604
 8002a06:	4618      	mov	r0, r3
 8002a08:	f001 f91e 	bl	8003c48 <CODEC_IO_Write>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	461a      	mov	r2, r3
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	4413      	add	r3, r2
 8002a14:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8002a16:	89fb      	ldrh	r3, [r7, #14]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f240 6105 	movw	r1, #1541	; 0x605
 8002a20:	4618      	mov	r0, r3
 8002a22:	f001 f911 	bl	8003c48 <CODEC_IO_Write>
 8002a26:	4603      	mov	r3, r0
 8002a28:	461a      	mov	r2, r3
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	61fb      	str	r3, [r7, #28]
      break;
 8002a30:	bf00      	nop
 8002a32:	e002      	b.n	8002a3a <wm8994_Init+0x396>
    }
  }
  else
  {
    outputEnabled = 0;
 8002a34:	4b0e      	ldr	r3, [pc, #56]	; (8002a70 <wm8994_Init+0x3cc>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8002a3a:	8afb      	ldrh	r3, [r7, #22]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 81a7 	beq.w	8002d90 <wm8994_Init+0x6ec>
  {
    inputEnabled = 1;
 8002a42:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <wm8994_Init+0x3d0>)
 8002a44:	2201      	movs	r2, #1
 8002a46:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8002a48:	8afb      	ldrh	r3, [r7, #22]
 8002a4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a4e:	d013      	beq.n	8002a78 <wm8994_Init+0x3d4>
 8002a50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a54:	dc04      	bgt.n	8002a60 <wm8994_Init+0x3bc>
 8002a56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a5a:	f000 80cf 	beq.w	8002bfc <wm8994_Init+0x558>
 8002a5e:	e192      	b.n	8002d86 <wm8994_Init+0x6e2>
 8002a60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a64:	d057      	beq.n	8002b16 <wm8994_Init+0x472>
 8002a66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a6a:	f000 8116 	beq.w	8002c9a <wm8994_Init+0x5f6>
 8002a6e:	e18a      	b.n	8002d86 <wm8994_Init+0x6e2>
 8002a70:	20002154 	.word	0x20002154
 8002a74:	20002158 	.word	0x20002158
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8002a78:	89fb      	ldrh	r3, [r7, #14]
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 8002a80:	2104      	movs	r1, #4
 8002a82:	4618      	mov	r0, r3
 8002a84:	f001 f8e0 	bl	8003c48 <CODEC_IO_Write>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	4413      	add	r3, r2
 8002a90:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8002a92:	89fb      	ldrh	r3, [r7, #14]
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	22db      	movs	r2, #219	; 0xdb
 8002a98:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f001 f8d3 	bl	8003c48 <CODEC_IO_Write>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8002aac:	89fb      	ldrh	r3, [r7, #14]
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8002ab4:	2102      	movs	r1, #2
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f001 f8c6 	bl	8003c48 <CODEC_IO_Write>
 8002abc:	4603      	mov	r3, r0
 8002abe:	461a      	mov	r2, r3
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8002ac6:	89fb      	ldrh	r3, [r7, #14]
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2202      	movs	r2, #2
 8002acc:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f001 f8b9 	bl	8003c48 <CODEC_IO_Write>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	461a      	mov	r2, r3
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	4413      	add	r3, r2
 8002ade:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8002ae0:	89fb      	ldrh	r3, [r7, #14]
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	f240 6109 	movw	r1, #1545	; 0x609
 8002aea:	4618      	mov	r0, r3
 8002aec:	f001 f8ac 	bl	8003c48 <CODEC_IO_Write>
 8002af0:	4603      	mov	r3, r0
 8002af2:	461a      	mov	r2, r3
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	4413      	add	r3, r2
 8002af8:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8002afa:	89fb      	ldrh	r3, [r7, #14]
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	220e      	movs	r2, #14
 8002b00:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002b04:	4618      	mov	r0, r3
 8002b06:	f001 f89f 	bl	8003c48 <CODEC_IO_Write>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	4413      	add	r3, r2
 8002b12:	61fb      	str	r3, [r7, #28]
      break;
 8002b14:	e13f      	b.n	8002d96 <wm8994_Init+0x6f2>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8002b16:	89fb      	ldrh	r3, [r7, #14]
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2211      	movs	r2, #17
 8002b1c:	2128      	movs	r1, #40	; 0x28
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f001 f892 	bl	8003c48 <CODEC_IO_Write>
 8002b24:	4603      	mov	r3, r0
 8002b26:	461a      	mov	r2, r3
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 8002b2e:	89fb      	ldrh	r3, [r7, #14]
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2235      	movs	r2, #53	; 0x35
 8002b34:	2129      	movs	r1, #41	; 0x29
 8002b36:	4618      	mov	r0, r3
 8002b38:	f001 f886 	bl	8003c48 <CODEC_IO_Write>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	461a      	mov	r2, r3
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	4413      	add	r3, r2
 8002b44:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 8002b46:	89fb      	ldrh	r3, [r7, #14]
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2235      	movs	r2, #53	; 0x35
 8002b4c:	212a      	movs	r1, #42	; 0x2a
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f001 f87a 	bl	8003c48 <CODEC_IO_Write>
 8002b54:	4603      	mov	r3, r0
 8002b56:	461a      	mov	r2, r3
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8002b5e:	89fb      	ldrh	r3, [r7, #14]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	f240 3203 	movw	r2, #771	; 0x303
 8002b66:	2104      	movs	r1, #4
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f001 f86d 	bl	8003c48 <CODEC_IO_Write>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	461a      	mov	r2, r3
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	4413      	add	r3, r2
 8002b76:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8002b78:	89fb      	ldrh	r3, [r7, #14]
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	22db      	movs	r2, #219	; 0xdb
 8002b7e:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8002b82:	4618      	mov	r0, r3
 8002b84:	f001 f860 	bl	8003c48 <CODEC_IO_Write>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	4413      	add	r3, r2
 8002b90:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8002b92:	89fb      	ldrh	r3, [r7, #14]
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	f246 3250 	movw	r2, #25424	; 0x6350
 8002b9a:	2102      	movs	r1, #2
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f001 f853 	bl	8003c48 <CODEC_IO_Write>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	4413      	add	r3, r2
 8002baa:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8002bac:	89fb      	ldrh	r3, [r7, #14]
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	f240 6106 	movw	r1, #1542	; 0x606
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f001 f846 	bl	8003c48 <CODEC_IO_Write>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8002bc6:	89fb      	ldrh	r3, [r7, #14]
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2202      	movs	r2, #2
 8002bcc:	f240 6107 	movw	r1, #1543	; 0x607
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f001 f839 	bl	8003c48 <CODEC_IO_Write>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	461a      	mov	r2, r3
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	4413      	add	r3, r2
 8002bde:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8002be0:	89fb      	ldrh	r3, [r7, #14]
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	220d      	movs	r2, #13
 8002be6:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002bea:	4618      	mov	r0, r3
 8002bec:	f001 f82c 	bl	8003c48 <CODEC_IO_Write>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	61fb      	str	r3, [r7, #28]
      break;
 8002bfa:	e0cc      	b.n	8002d96 <wm8994_Init+0x6f2>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8002bfc:	89fb      	ldrh	r3, [r7, #14]
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8002c04:	2104      	movs	r1, #4
 8002c06:	4618      	mov	r0, r3
 8002c08:	f001 f81e 	bl	8003c48 <CODEC_IO_Write>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	461a      	mov	r2, r3
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	4413      	add	r3, r2
 8002c14:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8002c16:	89fb      	ldrh	r3, [r7, #14]
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	22db      	movs	r2, #219	; 0xdb
 8002c1c:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8002c20:	4618      	mov	r0, r3
 8002c22:	f001 f811 	bl	8003c48 <CODEC_IO_Write>
 8002c26:	4603      	mov	r3, r0
 8002c28:	461a      	mov	r2, r3
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8002c30:	89fb      	ldrh	r3, [r7, #14]
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	f246 3250 	movw	r2, #25424	; 0x6350
 8002c38:	2102      	movs	r1, #2
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f001 f804 	bl	8003c48 <CODEC_IO_Write>
 8002c40:	4603      	mov	r3, r0
 8002c42:	461a      	mov	r2, r3
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	4413      	add	r3, r2
 8002c48:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8002c4a:	89fb      	ldrh	r3, [r7, #14]
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2202      	movs	r2, #2
 8002c50:	f240 6106 	movw	r1, #1542	; 0x606
 8002c54:	4618      	mov	r0, r3
 8002c56:	f000 fff7 	bl	8003c48 <CODEC_IO_Write>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	4413      	add	r3, r2
 8002c62:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8002c64:	89fb      	ldrh	r3, [r7, #14]
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2202      	movs	r2, #2
 8002c6a:	f240 6107 	movw	r1, #1543	; 0x607
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 ffea 	bl	8003c48 <CODEC_IO_Write>
 8002c74:	4603      	mov	r3, r0
 8002c76:	461a      	mov	r2, r3
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8002c7e:	89fb      	ldrh	r3, [r7, #14]
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	220d      	movs	r2, #13
 8002c84:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f000 ffdd 	bl	8003c48 <CODEC_IO_Write>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	461a      	mov	r2, r3
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	4413      	add	r3, r2
 8002c96:	61fb      	str	r3, [r7, #28]
      break; 
 8002c98:	e07d      	b.n	8002d96 <wm8994_Init+0x6f2>
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8002c9a:	89fb      	ldrh	r3, [r7, #14]
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	f640 723c 	movw	r2, #3900	; 0xf3c
 8002ca2:	2104      	movs	r1, #4
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 ffcf 	bl	8003c48 <CODEC_IO_Write>
 8002caa:	4603      	mov	r3, r0
 8002cac:	461a      	mov	r2, r3
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8002cb4:	89fb      	ldrh	r3, [r7, #14]
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	22db      	movs	r2, #219	; 0xdb
 8002cba:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 ffc2 	bl	8003c48 <CODEC_IO_Write>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	4413      	add	r3, r2
 8002ccc:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8002cce:	89fb      	ldrh	r3, [r7, #14]
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	22db      	movs	r2, #219	; 0xdb
 8002cd4:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f000 ffb5 	bl	8003c48 <CODEC_IO_Write>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8002ce8:	89fb      	ldrh	r3, [r7, #14]
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	f246 32a0 	movw	r2, #25504	; 0x63a0
 8002cf0:	2102      	movs	r1, #2
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 ffa8 	bl	8003c48 <CODEC_IO_Write>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	4413      	add	r3, r2
 8002d00:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8002d02:	89fb      	ldrh	r3, [r7, #14]
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2202      	movs	r2, #2
 8002d08:	f240 6106 	movw	r1, #1542	; 0x606
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f000 ff9b 	bl	8003c48 <CODEC_IO_Write>
 8002d12:	4603      	mov	r3, r0
 8002d14:	461a      	mov	r2, r3
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	4413      	add	r3, r2
 8002d1a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8002d1c:	89fb      	ldrh	r3, [r7, #14]
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2202      	movs	r2, #2
 8002d22:	f240 6107 	movw	r1, #1543	; 0x607
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 ff8e 	bl	8003c48 <CODEC_IO_Write>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	461a      	mov	r2, r3
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	4413      	add	r3, r2
 8002d34:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8002d36:	89fb      	ldrh	r3, [r7, #14]
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8002d40:	4618      	mov	r0, r3
 8002d42:	f000 ff81 	bl	8003c48 <CODEC_IO_Write>
 8002d46:	4603      	mov	r3, r0
 8002d48:	461a      	mov	r2, r3
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8002d50:	89fb      	ldrh	r3, [r7, #14]
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2202      	movs	r2, #2
 8002d56:	f240 6109 	movw	r1, #1545	; 0x609
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 ff74 	bl	8003c48 <CODEC_IO_Write>
 8002d60:	4603      	mov	r3, r0
 8002d62:	461a      	mov	r2, r3
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	4413      	add	r3, r2
 8002d68:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8002d6a:	89fb      	ldrh	r3, [r7, #14]
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	220d      	movs	r2, #13
 8002d70:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002d74:	4618      	mov	r0, r3
 8002d76:	f000 ff67 	bl	8003c48 <CODEC_IO_Write>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	4413      	add	r3, r2
 8002d82:	61fb      	str	r3, [r7, #28]
      break;    
 8002d84:	e007      	b.n	8002d96 <wm8994_Init+0x6f2>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	61fb      	str	r3, [r7, #28]
      break;
 8002d8c:	bf00      	nop
 8002d8e:	e002      	b.n	8002d96 <wm8994_Init+0x6f2>
    }
  }
  else
  {
    inputEnabled = 0;
 8002d90:	4b95      	ldr	r3, [pc, #596]	; (8002fe8 <wm8994_Init+0x944>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f245 6222 	movw	r2, #22050	; 0x5622
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d076      	beq.n	8002e8e <wm8994_Init+0x7ea>
 8002da0:	f245 6222 	movw	r2, #22050	; 0x5622
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d80a      	bhi.n	8002dbe <wm8994_Init+0x71a>
 8002da8:	f642 3211 	movw	r2, #11025	; 0x2b11
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d060      	beq.n	8002e72 <wm8994_Init+0x7ce>
 8002db0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8002db4:	d025      	beq.n	8002e02 <wm8994_Init+0x75e>
 8002db6:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8002dba:	d014      	beq.n	8002de6 <wm8994_Init+0x742>
 8002dbc:	e083      	b.n	8002ec6 <wm8994_Init+0x822>
 8002dbe:	f64a 4244 	movw	r2, #44100	; 0xac44
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d071      	beq.n	8002eaa <wm8994_Init+0x806>
 8002dc6:	f64a 4244 	movw	r2, #44100	; 0xac44
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d803      	bhi.n	8002dd6 <wm8994_Init+0x732>
 8002dce:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002dd2:	d024      	beq.n	8002e1e <wm8994_Init+0x77a>
 8002dd4:	e077      	b.n	8002ec6 <wm8994_Init+0x822>
 8002dd6:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d02d      	beq.n	8002e3a <wm8994_Init+0x796>
 8002dde:	4a83      	ldr	r2, [pc, #524]	; (8002fec <wm8994_Init+0x948>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d038      	beq.n	8002e56 <wm8994_Init+0x7b2>
 8002de4:	e06f      	b.n	8002ec6 <wm8994_Init+0x822>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8002de6:	89fb      	ldrh	r3, [r7, #14]
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2203      	movs	r2, #3
 8002dec:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 ff29 	bl	8003c48 <CODEC_IO_Write>
 8002df6:	4603      	mov	r3, r0
 8002df8:	461a      	mov	r2, r3
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	61fb      	str	r3, [r7, #28]
    break;
 8002e00:	e06f      	b.n	8002ee2 <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8002e02:	89fb      	ldrh	r3, [r7, #14]
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2233      	movs	r2, #51	; 0x33
 8002e08:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f000 ff1b 	bl	8003c48 <CODEC_IO_Write>
 8002e12:	4603      	mov	r3, r0
 8002e14:	461a      	mov	r2, r3
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	4413      	add	r3, r2
 8002e1a:	61fb      	str	r3, [r7, #28]
    break;
 8002e1c:	e061      	b.n	8002ee2 <wm8994_Init+0x83e>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8002e1e:	89fb      	ldrh	r3, [r7, #14]
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2263      	movs	r2, #99	; 0x63
 8002e24:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 ff0d 	bl	8003c48 <CODEC_IO_Write>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	461a      	mov	r2, r3
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	4413      	add	r3, r2
 8002e36:	61fb      	str	r3, [r7, #28]
    break;
 8002e38:	e053      	b.n	8002ee2 <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8002e3a:	89fb      	ldrh	r3, [r7, #14]
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2283      	movs	r2, #131	; 0x83
 8002e40:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002e44:	4618      	mov	r0, r3
 8002e46:	f000 feff 	bl	8003c48 <CODEC_IO_Write>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	4413      	add	r3, r2
 8002e52:	61fb      	str	r3, [r7, #28]
    break;
 8002e54:	e045      	b.n	8002ee2 <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8002e56:	89fb      	ldrh	r3, [r7, #14]
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	22a3      	movs	r2, #163	; 0xa3
 8002e5c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002e60:	4618      	mov	r0, r3
 8002e62:	f000 fef1 	bl	8003c48 <CODEC_IO_Write>
 8002e66:	4603      	mov	r3, r0
 8002e68:	461a      	mov	r2, r3
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	61fb      	str	r3, [r7, #28]
    break;
 8002e70:	e037      	b.n	8002ee2 <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8002e72:	89fb      	ldrh	r3, [r7, #14]
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2213      	movs	r2, #19
 8002e78:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 fee3 	bl	8003c48 <CODEC_IO_Write>
 8002e82:	4603      	mov	r3, r0
 8002e84:	461a      	mov	r2, r3
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	4413      	add	r3, r2
 8002e8a:	61fb      	str	r3, [r7, #28]
    break;
 8002e8c:	e029      	b.n	8002ee2 <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8002e8e:	89fb      	ldrh	r3, [r7, #14]
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2243      	movs	r2, #67	; 0x43
 8002e94:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f000 fed5 	bl	8003c48 <CODEC_IO_Write>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	61fb      	str	r3, [r7, #28]
    break;
 8002ea8:	e01b      	b.n	8002ee2 <wm8994_Init+0x83e>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8002eaa:	89fb      	ldrh	r3, [r7, #14]
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2273      	movs	r2, #115	; 0x73
 8002eb0:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 fec7 	bl	8003c48 <CODEC_IO_Write>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	61fb      	str	r3, [r7, #28]
    break; 
 8002ec4:	e00d      	b.n	8002ee2 <wm8994_Init+0x83e>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8002ec6:	89fb      	ldrh	r3, [r7, #14]
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2283      	movs	r2, #131	; 0x83
 8002ecc:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f000 feb9 	bl	8003c48 <CODEC_IO_Write>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	461a      	mov	r2, r3
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	4413      	add	r3, r2
 8002ede:	61fb      	str	r3, [r7, #28]
    break; 
 8002ee0:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002ee2:	8afb      	ldrh	r3, [r7, #22]
 8002ee4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ee8:	d10e      	bne.n	8002f08 <wm8994_Init+0x864>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8002eea:	89fb      	ldrh	r3, [r7, #14]
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	f244 0218 	movw	r2, #16408	; 0x4018
 8002ef2:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 fea6 	bl	8003c48 <CODEC_IO_Write>
 8002efc:	4603      	mov	r3, r0
 8002efe:	461a      	mov	r2, r3
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	4413      	add	r3, r2
 8002f04:	61fb      	str	r3, [r7, #28]
 8002f06:	e00d      	b.n	8002f24 <wm8994_Init+0x880>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8002f08:	89fb      	ldrh	r3, [r7, #14]
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	f244 0210 	movw	r2, #16400	; 0x4010
 8002f10:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 fe97 	bl	8003c48 <CODEC_IO_Write>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	4413      	add	r3, r2
 8002f22:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8002f24:	89fb      	ldrh	r3, [r7, #14]
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f240 3102 	movw	r1, #770	; 0x302
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 fe8a 	bl	8003c48 <CODEC_IO_Write>
 8002f34:	4603      	mov	r3, r0
 8002f36:	461a      	mov	r2, r3
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8002f3e:	89fb      	ldrh	r3, [r7, #14]
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	220a      	movs	r2, #10
 8002f44:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 fe7d 	bl	8003c48 <CODEC_IO_Write>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	461a      	mov	r2, r3
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	4413      	add	r3, r2
 8002f56:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8002f58:	89fb      	ldrh	r3, [r7, #14]
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 fe70 	bl	8003c48 <CODEC_IO_Write>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	4413      	add	r3, r2
 8002f70:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8002f72:	8b3b      	ldrh	r3, [r7, #24]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 817b 	beq.w	8003270 <wm8994_Init+0xbcc>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8002f7a:	8b3b      	ldrh	r3, [r7, #24]
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d157      	bne.n	8003030 <wm8994_Init+0x98c>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8002f80:	89fb      	ldrh	r3, [r7, #14]
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f88:	212d      	movs	r1, #45	; 0x2d
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 fe5c 	bl	8003c48 <CODEC_IO_Write>
 8002f90:	4603      	mov	r3, r0
 8002f92:	461a      	mov	r2, r3
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	4413      	add	r3, r2
 8002f98:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 8002f9a:	89fb      	ldrh	r3, [r7, #14]
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fa2:	212e      	movs	r1, #46	; 0x2e
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f000 fe4f 	bl	8003c48 <CODEC_IO_Write>
 8002faa:	4603      	mov	r3, r0
 8002fac:	461a      	mov	r2, r3
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 8002fb4:	4b0e      	ldr	r3, [pc, #56]	; (8002ff0 <wm8994_Init+0x94c>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d01b      	beq.n	8002ff4 <wm8994_Init+0x950>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 8002fbc:	89fb      	ldrh	r3, [r7, #14]
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 8002fc4:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f000 fe3d 	bl	8003c48 <CODEC_IO_Write>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 8002fd8:	4b05      	ldr	r3, [pc, #20]	; (8002ff0 <wm8994_Init+0x94c>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 8002fde:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002fe2:	f001 f8e3 	bl	80041ac <AUDIO_IO_Delay>
 8002fe6:	e016      	b.n	8003016 <wm8994_Init+0x972>
 8002fe8:	20002158 	.word	0x20002158
 8002fec:	00017700 	.word	0x00017700
 8002ff0:	20000040 	.word	0x20000040
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 8002ff4:	89fb      	ldrh	r3, [r7, #14]
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	f248 1208 	movw	r2, #33032	; 0x8108
 8002ffc:	f44f 7188 	mov.w	r1, #272	; 0x110
 8003000:	4618      	mov	r0, r3
 8003002:	f000 fe21 	bl	8003c48 <CODEC_IO_Write>
 8003006:	4603      	mov	r3, r0
 8003008:	461a      	mov	r2, r3
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	4413      	add	r3, r2
 800300e:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 8003010:	2032      	movs	r0, #50	; 0x32
 8003012:	f001 f8cb 	bl	80041ac <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8003016:	89fb      	ldrh	r3, [r7, #14]
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2200      	movs	r2, #0
 800301c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8003020:	4618      	mov	r0, r3
 8003022:	f000 fe11 	bl	8003c48 <CODEC_IO_Write>
 8003026:	4603      	mov	r3, r0
 8003028:	461a      	mov	r2, r3
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	4413      	add	r3, r2
 800302e:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8003030:	89fb      	ldrh	r3, [r7, #14]
 8003032:	b2db      	uxtb	r3, r3
 8003034:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003038:	2103      	movs	r1, #3
 800303a:	4618      	mov	r0, r3
 800303c:	f000 fe04 	bl	8003c48 <CODEC_IO_Write>
 8003040:	4603      	mov	r3, r0
 8003042:	461a      	mov	r2, r3
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	4413      	add	r3, r2
 8003048:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 800304a:	89fb      	ldrh	r3, [r7, #14]
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2200      	movs	r2, #0
 8003050:	2122      	movs	r1, #34	; 0x22
 8003052:	4618      	mov	r0, r3
 8003054:	f000 fdf8 	bl	8003c48 <CODEC_IO_Write>
 8003058:	4603      	mov	r3, r0
 800305a:	461a      	mov	r2, r3
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	4413      	add	r3, r2
 8003060:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8003062:	89fb      	ldrh	r3, [r7, #14]
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2200      	movs	r2, #0
 8003068:	2123      	movs	r1, #35	; 0x23
 800306a:	4618      	mov	r0, r3
 800306c:	f000 fdec 	bl	8003c48 <CODEC_IO_Write>
 8003070:	4603      	mov	r3, r0
 8003072:	461a      	mov	r2, r3
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	4413      	add	r3, r2
 8003078:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 800307a:	89fb      	ldrh	r3, [r7, #14]
 800307c:	b2db      	uxtb	r3, r3
 800307e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003082:	2136      	movs	r1, #54	; 0x36
 8003084:	4618      	mov	r0, r3
 8003086:	f000 fddf 	bl	8003c48 <CODEC_IO_Write>
 800308a:	4603      	mov	r3, r0
 800308c:	461a      	mov	r2, r3
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	4413      	add	r3, r2
 8003092:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8003094:	89fb      	ldrh	r3, [r7, #14]
 8003096:	b2db      	uxtb	r3, r3
 8003098:	f243 0203 	movw	r2, #12291	; 0x3003
 800309c:	2101      	movs	r1, #1
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 fdd2 	bl	8003c48 <CODEC_IO_Write>
 80030a4:	4603      	mov	r3, r0
 80030a6:	461a      	mov	r2, r3
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	4413      	add	r3, r2
 80030ac:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80030ae:	8afb      	ldrh	r3, [r7, #22]
 80030b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030b4:	d10d      	bne.n	80030d2 <wm8994_Init+0xa2e>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 80030b6:	89fb      	ldrh	r3, [r7, #14]
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	f240 2205 	movw	r2, #517	; 0x205
 80030be:	2151      	movs	r1, #81	; 0x51
 80030c0:	4618      	mov	r0, r3
 80030c2:	f000 fdc1 	bl	8003c48 <CODEC_IO_Write>
 80030c6:	4603      	mov	r3, r0
 80030c8:	461a      	mov	r2, r3
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	4413      	add	r3, r2
 80030ce:	61fb      	str	r3, [r7, #28]
 80030d0:	e00b      	b.n	80030ea <wm8994_Init+0xa46>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 80030d2:	89fb      	ldrh	r3, [r7, #14]
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2205      	movs	r2, #5
 80030d8:	2151      	movs	r1, #81	; 0x51
 80030da:	4618      	mov	r0, r3
 80030dc:	f000 fdb4 	bl	8003c48 <CODEC_IO_Write>
 80030e0:	4603      	mov	r3, r0
 80030e2:	461a      	mov	r2, r3
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	4413      	add	r3, r2
 80030e8:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 80030ea:	8b7b      	ldrh	r3, [r7, #26]
 80030ec:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 80030f0:	f043 0303 	orr.w	r3, r3, #3
 80030f4:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80030f6:	89fb      	ldrh	r3, [r7, #14]
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	8b7a      	ldrh	r2, [r7, #26]
 80030fc:	2101      	movs	r1, #1
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 fda2 	bl	8003c48 <CODEC_IO_Write>
 8003104:	4603      	mov	r3, r0
 8003106:	461a      	mov	r2, r3
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	4413      	add	r3, r2
 800310c:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 800310e:	89fb      	ldrh	r3, [r7, #14]
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2222      	movs	r2, #34	; 0x22
 8003114:	2160      	movs	r1, #96	; 0x60
 8003116:	4618      	mov	r0, r3
 8003118:	f000 fd96 	bl	8003c48 <CODEC_IO_Write>
 800311c:	4603      	mov	r3, r0
 800311e:	461a      	mov	r2, r3
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	4413      	add	r3, r2
 8003124:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8003126:	89fb      	ldrh	r3, [r7, #14]
 8003128:	b2db      	uxtb	r3, r3
 800312a:	f649 7225 	movw	r2, #40741	; 0x9f25
 800312e:	214c      	movs	r1, #76	; 0x4c
 8003130:	4618      	mov	r0, r3
 8003132:	f000 fd89 	bl	8003c48 <CODEC_IO_Write>
 8003136:	4603      	mov	r3, r0
 8003138:	461a      	mov	r2, r3
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	4413      	add	r3, r2
 800313e:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8003140:	200f      	movs	r0, #15
 8003142:	f001 f833 	bl	80041ac <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8003146:	89fb      	ldrh	r3, [r7, #14]
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2201      	movs	r2, #1
 800314c:	212d      	movs	r1, #45	; 0x2d
 800314e:	4618      	mov	r0, r3
 8003150:	f000 fd7a 	bl	8003c48 <CODEC_IO_Write>
 8003154:	4603      	mov	r3, r0
 8003156:	461a      	mov	r2, r3
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	4413      	add	r3, r2
 800315c:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 800315e:	89fb      	ldrh	r3, [r7, #14]
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2201      	movs	r2, #1
 8003164:	212e      	movs	r1, #46	; 0x2e
 8003166:	4618      	mov	r0, r3
 8003168:	f000 fd6e 	bl	8003c48 <CODEC_IO_Write>
 800316c:	4603      	mov	r3, r0
 800316e:	461a      	mov	r2, r3
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	4413      	add	r3, r2
 8003174:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8003176:	89fb      	ldrh	r3, [r7, #14]
 8003178:	b2db      	uxtb	r3, r3
 800317a:	f44f 724c 	mov.w	r2, #816	; 0x330
 800317e:	2103      	movs	r1, #3
 8003180:	4618      	mov	r0, r3
 8003182:	f000 fd61 	bl	8003c48 <CODEC_IO_Write>
 8003186:	4603      	mov	r3, r0
 8003188:	461a      	mov	r2, r3
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	4413      	add	r3, r2
 800318e:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8003190:	89fb      	ldrh	r3, [r7, #14]
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2233      	movs	r2, #51	; 0x33
 8003196:	2154      	movs	r1, #84	; 0x54
 8003198:	4618      	mov	r0, r3
 800319a:	f000 fd55 	bl	8003c48 <CODEC_IO_Write>
 800319e:	4603      	mov	r3, r0
 80031a0:	461a      	mov	r2, r3
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	4413      	add	r3, r2
 80031a6:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 80031a8:	f240 1001 	movw	r0, #257	; 0x101
 80031ac:	f000 fffe 	bl	80041ac <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 80031b0:	89fb      	ldrh	r3, [r7, #14]
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	22ee      	movs	r2, #238	; 0xee
 80031b6:	2160      	movs	r1, #96	; 0x60
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 fd45 	bl	8003c48 <CODEC_IO_Write>
 80031be:	4603      	mov	r3, r0
 80031c0:	461a      	mov	r2, r3
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	4413      	add	r3, r2
 80031c6:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 80031c8:	89fb      	ldrh	r3, [r7, #14]
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	22c0      	movs	r2, #192	; 0xc0
 80031ce:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 fd38 	bl	8003c48 <CODEC_IO_Write>
 80031d8:	4603      	mov	r3, r0
 80031da:	461a      	mov	r2, r3
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	4413      	add	r3, r2
 80031e0:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 80031e2:	89fb      	ldrh	r3, [r7, #14]
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	22c0      	movs	r2, #192	; 0xc0
 80031e8:	f240 6111 	movw	r1, #1553	; 0x611
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 fd2b 	bl	8003c48 <CODEC_IO_Write>
 80031f2:	4603      	mov	r3, r0
 80031f4:	461a      	mov	r2, r3
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	4413      	add	r3, r2
 80031fa:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 80031fc:	89fb      	ldrh	r3, [r7, #14]
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2210      	movs	r2, #16
 8003202:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8003206:	4618      	mov	r0, r3
 8003208:	f000 fd1e 	bl	8003c48 <CODEC_IO_Write>
 800320c:	4603      	mov	r3, r0
 800320e:	461a      	mov	r2, r3
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	4413      	add	r3, r2
 8003214:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8003216:	89fb      	ldrh	r3, [r7, #14]
 8003218:	b2db      	uxtb	r3, r3
 800321a:	22c0      	movs	r2, #192	; 0xc0
 800321c:	f240 6112 	movw	r1, #1554	; 0x612
 8003220:	4618      	mov	r0, r3
 8003222:	f000 fd11 	bl	8003c48 <CODEC_IO_Write>
 8003226:	4603      	mov	r3, r0
 8003228:	461a      	mov	r2, r3
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	4413      	add	r3, r2
 800322e:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8003230:	89fb      	ldrh	r3, [r7, #14]
 8003232:	b2db      	uxtb	r3, r3
 8003234:	22c0      	movs	r2, #192	; 0xc0
 8003236:	f240 6113 	movw	r1, #1555	; 0x613
 800323a:	4618      	mov	r0, r3
 800323c:	f000 fd04 	bl	8003c48 <CODEC_IO_Write>
 8003240:	4603      	mov	r3, r0
 8003242:	461a      	mov	r2, r3
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	4413      	add	r3, r2
 8003248:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 800324a:	89fb      	ldrh	r3, [r7, #14]
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2210      	movs	r2, #16
 8003250:	f240 4122 	movw	r1, #1058	; 0x422
 8003254:	4618      	mov	r0, r3
 8003256:	f000 fcf7 	bl	8003c48 <CODEC_IO_Write>
 800325a:	4603      	mov	r3, r0
 800325c:	461a      	mov	r2, r3
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	4413      	add	r3, r2
 8003262:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8003264:	7afa      	ldrb	r2, [r7, #11]
 8003266:	89fb      	ldrh	r3, [r7, #14]
 8003268:	4611      	mov	r1, r2
 800326a:	4618      	mov	r0, r3
 800326c:	f000 f984 	bl	8003578 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8003270:	8afb      	ldrh	r3, [r7, #22]
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 80a6 	beq.w	80033c4 <wm8994_Init+0xd20>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8003278:	8afb      	ldrh	r3, [r7, #22]
 800327a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800327e:	d003      	beq.n	8003288 <wm8994_Init+0xbe4>
 8003280:	8afb      	ldrh	r3, [r7, #22]
 8003282:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003286:	d12b      	bne.n	80032e0 <wm8994_Init+0xc3c>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8003288:	8b7b      	ldrh	r3, [r7, #26]
 800328a:	f043 0313 	orr.w	r3, r3, #19
 800328e:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8003290:	89fb      	ldrh	r3, [r7, #14]
 8003292:	b2db      	uxtb	r3, r3
 8003294:	8b7a      	ldrh	r2, [r7, #26]
 8003296:	2101      	movs	r1, #1
 8003298:	4618      	mov	r0, r3
 800329a:	f000 fcd5 	bl	8003c48 <CODEC_IO_Write>
 800329e:	4603      	mov	r3, r0
 80032a0:	461a      	mov	r2, r3
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	4413      	add	r3, r2
 80032a6:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 80032a8:	89fb      	ldrh	r3, [r7, #14]
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2202      	movs	r2, #2
 80032ae:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 fcc8 	bl	8003c48 <CODEC_IO_Write>
 80032b8:	4603      	mov	r3, r0
 80032ba:	461a      	mov	r2, r3
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	4413      	add	r3, r2
 80032c0:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 80032c2:	89fb      	ldrh	r3, [r7, #14]
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80032ca:	f240 4111 	movw	r1, #1041	; 0x411
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 fcba 	bl	8003c48 <CODEC_IO_Write>
 80032d4:	4603      	mov	r3, r0
 80032d6:	461a      	mov	r2, r3
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	4413      	add	r3, r2
 80032dc:	61fb      	str	r3, [r7, #28]
 80032de:	e06b      	b.n	80033b8 <wm8994_Init+0xd14>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80032e0:	8afb      	ldrh	r3, [r7, #22]
 80032e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032e6:	d139      	bne.n	800335c <wm8994_Init+0xcb8>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 80032e8:	8b7b      	ldrh	r3, [r7, #26]
 80032ea:	f043 0313 	orr.w	r3, r3, #19
 80032ee:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80032f0:	89fb      	ldrh	r3, [r7, #14]
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	8b7a      	ldrh	r2, [r7, #26]
 80032f6:	2101      	movs	r1, #1
 80032f8:	4618      	mov	r0, r3
 80032fa:	f000 fca5 	bl	8003c48 <CODEC_IO_Write>
 80032fe:	4603      	mov	r3, r0
 8003300:	461a      	mov	r2, r3
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	4413      	add	r3, r2
 8003306:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8003308:	89fb      	ldrh	r3, [r7, #14]
 800330a:	b2db      	uxtb	r3, r3
 800330c:	2202      	movs	r2, #2
 800330e:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8003312:	4618      	mov	r0, r3
 8003314:	f000 fc98 	bl	8003c48 <CODEC_IO_Write>
 8003318:	4603      	mov	r3, r0
 800331a:	461a      	mov	r2, r3
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	4413      	add	r3, r2
 8003320:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8003322:	89fb      	ldrh	r3, [r7, #14]
 8003324:	b2db      	uxtb	r3, r3
 8003326:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800332a:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800332e:	4618      	mov	r0, r3
 8003330:	f000 fc8a 	bl	8003c48 <CODEC_IO_Write>
 8003334:	4603      	mov	r3, r0
 8003336:	461a      	mov	r2, r3
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	4413      	add	r3, r2
 800333c:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 800333e:	89fb      	ldrh	r3, [r7, #14]
 8003340:	b2db      	uxtb	r3, r3
 8003342:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8003346:	f240 4111 	movw	r1, #1041	; 0x411
 800334a:	4618      	mov	r0, r3
 800334c:	f000 fc7c 	bl	8003c48 <CODEC_IO_Write>
 8003350:	4603      	mov	r3, r0
 8003352:	461a      	mov	r2, r3
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	4413      	add	r3, r2
 8003358:	61fb      	str	r3, [r7, #28]
 800335a:	e02d      	b.n	80033b8 <wm8994_Init+0xd14>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 800335c:	8afb      	ldrh	r3, [r7, #22]
 800335e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003362:	d003      	beq.n	800336c <wm8994_Init+0xcc8>
 8003364:	8afb      	ldrh	r3, [r7, #22]
 8003366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800336a:	d125      	bne.n	80033b8 <wm8994_Init+0xd14>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 800336c:	89fb      	ldrh	r3, [r7, #14]
 800336e:	b2db      	uxtb	r3, r3
 8003370:	220b      	movs	r2, #11
 8003372:	2118      	movs	r1, #24
 8003374:	4618      	mov	r0, r3
 8003376:	f000 fc67 	bl	8003c48 <CODEC_IO_Write>
 800337a:	4603      	mov	r3, r0
 800337c:	461a      	mov	r2, r3
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	4413      	add	r3, r2
 8003382:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8003384:	89fb      	ldrh	r3, [r7, #14]
 8003386:	b2db      	uxtb	r3, r3
 8003388:	220b      	movs	r2, #11
 800338a:	211a      	movs	r1, #26
 800338c:	4618      	mov	r0, r3
 800338e:	f000 fc5b 	bl	8003c48 <CODEC_IO_Write>
 8003392:	4603      	mov	r3, r0
 8003394:	461a      	mov	r2, r3
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	4413      	add	r3, r2
 800339a:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 800339c:	89fb      	ldrh	r3, [r7, #14]
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 80033a4:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 fc4d 	bl	8003c48 <CODEC_IO_Write>
 80033ae:	4603      	mov	r3, r0
 80033b0:	461a      	mov	r2, r3
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	4413      	add	r3, r2
 80033b6:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 80033b8:	7afa      	ldrb	r2, [r7, #11]
 80033ba:	89fb      	ldrh	r3, [r7, #14]
 80033bc:	4611      	mov	r1, r2
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 f8da 	bl	8003578 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 80033c4:	69fb      	ldr	r3, [r7, #28]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3720      	adds	r7, #32
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop

080033d0 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 80033d4:	f000 fe8c 	bl	80040f0 <AUDIO_IO_DeInit>
}
 80033d8:	bf00      	nop
 80033da:	bd80      	pop	{r7, pc}

080033dc <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 80033e6:	f000 fe79 	bl	80040dc <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 80033ea:	88fb      	ldrh	r3, [r7, #6]
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2100      	movs	r1, #0
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 feaf 	bl	8004154 <AUDIO_IO_Read>
 80033f6:	4603      	mov	r3, r0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3708      	adds	r7, #8
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	4603      	mov	r3, r0
 8003408:	6039      	str	r1, [r7, #0]
 800340a:	80fb      	strh	r3, [r7, #6]
 800340c:	4613      	mov	r3, r2
 800340e:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8003410:	2300      	movs	r3, #0
 8003412:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003414:	88fb      	ldrh	r3, [r7, #6]
 8003416:	2100      	movs	r1, #0
 8003418:	4618      	mov	r0, r3
 800341a:	f000 f9d1 	bl	80037c0 <wm8994_SetMute>
 800341e:	4602      	mov	r2, r0
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4413      	add	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8003426:	68fb      	ldr	r3, [r7, #12]
}
 8003428:	4618      	mov	r0, r3
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	4603      	mov	r3, r0
 8003438:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800343a:	2300      	movs	r3, #0
 800343c:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800343e:	88fb      	ldrh	r3, [r7, #6]
 8003440:	2101      	movs	r1, #1
 8003442:	4618      	mov	r0, r3
 8003444:	f000 f9bc 	bl	80037c0 <wm8994_SetMute>
 8003448:	4602      	mov	r2, r0
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	4413      	add	r3, r2
 800344e:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8003450:	88fb      	ldrh	r3, [r7, #6]
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2201      	movs	r2, #1
 8003456:	2102      	movs	r1, #2
 8003458:	4618      	mov	r0, r3
 800345a:	f000 fbf5 	bl	8003c48 <CODEC_IO_Write>
 800345e:	4603      	mov	r3, r0
 8003460:	461a      	mov	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	4413      	add	r3, r2
 8003466:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8003468:	68fb      	ldr	r3, [r7, #12]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b084      	sub	sp, #16
 8003476:	af00      	add	r7, sp, #0
 8003478:	4603      	mov	r3, r0
 800347a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800347c:	2300      	movs	r3, #0
 800347e:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003480:	88fb      	ldrh	r3, [r7, #6]
 8003482:	2100      	movs	r1, #0
 8003484:	4618      	mov	r0, r3
 8003486:	f000 f99b 	bl	80037c0 <wm8994_SetMute>
 800348a:	4602      	mov	r2, r0
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4413      	add	r3, r2
 8003490:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8003492:	68fb      	ldr	r3, [r7, #12]
}
 8003494:	4618      	mov	r0, r3
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	4603      	mov	r3, r0
 80034a4:	6039      	str	r1, [r7, #0]
 80034a6:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80034a8:	2300      	movs	r3, #0
 80034aa:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 80034ac:	4b31      	ldr	r3, [pc, #196]	; (8003574 <wm8994_Stop+0xd8>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d05a      	beq.n	800356a <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80034b4:	88fb      	ldrh	r3, [r7, #6]
 80034b6:	2101      	movs	r1, #1
 80034b8:	4618      	mov	r0, r3
 80034ba:	f000 f981 	bl	80037c0 <wm8994_SetMute>
 80034be:	4602      	mov	r2, r0
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4413      	add	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d04e      	beq.n	800356a <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80034cc:	88fb      	ldrh	r3, [r7, #6]
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034d4:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80034d8:	4618      	mov	r0, r3
 80034da:	f000 fbb5 	bl	8003c48 <CODEC_IO_Write>
 80034de:	4603      	mov	r3, r0
 80034e0:	461a      	mov	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	4413      	add	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80034e8:	88fb      	ldrh	r3, [r7, #6]
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034f0:	f240 4122 	movw	r1, #1058	; 0x422
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 fba7 	bl	8003c48 <CODEC_IO_Write>
 80034fa:	4603      	mov	r3, r0
 80034fc:	461a      	mov	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	4413      	add	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 8003504:	88fb      	ldrh	r3, [r7, #6]
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2200      	movs	r2, #0
 800350a:	212d      	movs	r1, #45	; 0x2d
 800350c:	4618      	mov	r0, r3
 800350e:	f000 fb9b 	bl	8003c48 <CODEC_IO_Write>
 8003512:	4603      	mov	r3, r0
 8003514:	461a      	mov	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	4413      	add	r3, r2
 800351a:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 800351c:	88fb      	ldrh	r3, [r7, #6]
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2200      	movs	r2, #0
 8003522:	212e      	movs	r1, #46	; 0x2e
 8003524:	4618      	mov	r0, r3
 8003526:	f000 fb8f 	bl	8003c48 <CODEC_IO_Write>
 800352a:	4603      	mov	r3, r0
 800352c:	461a      	mov	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	4413      	add	r3, r2
 8003532:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8003534:	88fb      	ldrh	r3, [r7, #6]
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2200      	movs	r2, #0
 800353a:	2105      	movs	r1, #5
 800353c:	4618      	mov	r0, r3
 800353e:	f000 fb83 	bl	8003c48 <CODEC_IO_Write>
 8003542:	4603      	mov	r3, r0
 8003544:	461a      	mov	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	4413      	add	r3, r2
 800354a:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 800354c:	88fb      	ldrh	r3, [r7, #6]
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2200      	movs	r2, #0
 8003552:	2100      	movs	r1, #0
 8003554:	4618      	mov	r0, r3
 8003556:	f000 fb77 	bl	8003c48 <CODEC_IO_Write>
 800355a:	4603      	mov	r3, r0
 800355c:	461a      	mov	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	4413      	add	r3, r2
 8003562:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8003564:	4b03      	ldr	r3, [pc, #12]	; (8003574 <wm8994_Stop+0xd8>)
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 800356a:	68fb      	ldr	r3, [r7, #12]
}
 800356c:	4618      	mov	r0, r3
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	20002154 	.word	0x20002154

08003578 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	4603      	mov	r3, r0
 8003580:	460a      	mov	r2, r1
 8003582:	80fb      	strh	r3, [r7, #6]
 8003584:	4613      	mov	r3, r2
 8003586:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8003588:	2300      	movs	r3, #0
 800358a:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 800358c:	797b      	ldrb	r3, [r7, #5]
 800358e:	2b64      	cmp	r3, #100	; 0x64
 8003590:	d80b      	bhi.n	80035aa <wm8994_SetVolume+0x32>
 8003592:	797a      	ldrb	r2, [r7, #5]
 8003594:	4613      	mov	r3, r2
 8003596:	019b      	lsls	r3, r3, #6
 8003598:	1a9b      	subs	r3, r3, r2
 800359a:	4a86      	ldr	r2, [pc, #536]	; (80037b4 <wm8994_SetVolume+0x23c>)
 800359c:	fb82 1203 	smull	r1, r2, r2, r3
 80035a0:	1152      	asrs	r2, r2, #5
 80035a2:	17db      	asrs	r3, r3, #31
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	e000      	b.n	80035ac <wm8994_SetVolume+0x34>
 80035aa:	2364      	movs	r3, #100	; 0x64
 80035ac:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 80035ae:	4b82      	ldr	r3, [pc, #520]	; (80037b8 <wm8994_SetVolume+0x240>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f000 809b 	beq.w	80036ee <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 80035b8:	7afb      	ldrb	r3, [r7, #11]
 80035ba:	2b3e      	cmp	r3, #62	; 0x3e
 80035bc:	d93d      	bls.n	800363a <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80035be:	88fb      	ldrh	r3, [r7, #6]
 80035c0:	2100      	movs	r1, #0
 80035c2:	4618      	mov	r0, r3
 80035c4:	f000 f8fc 	bl	80037c0 <wm8994_SetMute>
 80035c8:	4602      	mov	r2, r0
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	4413      	add	r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 80035d0:	88fb      	ldrh	r3, [r7, #6]
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	f240 127f 	movw	r2, #383	; 0x17f
 80035d8:	211c      	movs	r1, #28
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 fb34 	bl	8003c48 <CODEC_IO_Write>
 80035e0:	4603      	mov	r3, r0
 80035e2:	461a      	mov	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	4413      	add	r3, r2
 80035e8:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 80035ea:	88fb      	ldrh	r3, [r7, #6]
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	f240 127f 	movw	r2, #383	; 0x17f
 80035f2:	211d      	movs	r1, #29
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 fb27 	bl	8003c48 <CODEC_IO_Write>
 80035fa:	4603      	mov	r3, r0
 80035fc:	461a      	mov	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	4413      	add	r3, r2
 8003602:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8003604:	88fb      	ldrh	r3, [r7, #6]
 8003606:	b2db      	uxtb	r3, r3
 8003608:	f240 127f 	movw	r2, #383	; 0x17f
 800360c:	2126      	movs	r1, #38	; 0x26
 800360e:	4618      	mov	r0, r3
 8003610:	f000 fb1a 	bl	8003c48 <CODEC_IO_Write>
 8003614:	4603      	mov	r3, r0
 8003616:	461a      	mov	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4413      	add	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 800361e:	88fb      	ldrh	r3, [r7, #6]
 8003620:	b2db      	uxtb	r3, r3
 8003622:	f240 127f 	movw	r2, #383	; 0x17f
 8003626:	2127      	movs	r1, #39	; 0x27
 8003628:	4618      	mov	r0, r3
 800362a:	f000 fb0d 	bl	8003c48 <CODEC_IO_Write>
 800362e:	4603      	mov	r3, r0
 8003630:	461a      	mov	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	4413      	add	r3, r2
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	e059      	b.n	80036ee <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 800363a:	797b      	ldrb	r3, [r7, #5]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d109      	bne.n	8003654 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8003640:	88fb      	ldrh	r3, [r7, #6]
 8003642:	2101      	movs	r1, #1
 8003644:	4618      	mov	r0, r3
 8003646:	f000 f8bb 	bl	80037c0 <wm8994_SetMute>
 800364a:	4602      	mov	r2, r0
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	4413      	add	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	e04c      	b.n	80036ee <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003654:	88fb      	ldrh	r3, [r7, #6]
 8003656:	2100      	movs	r1, #0
 8003658:	4618      	mov	r0, r3
 800365a:	f000 f8b1 	bl	80037c0 <wm8994_SetMute>
 800365e:	4602      	mov	r2, r0
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	4413      	add	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8003666:	88fb      	ldrh	r3, [r7, #6]
 8003668:	b2d8      	uxtb	r0, r3
 800366a:	7afb      	ldrb	r3, [r7, #11]
 800366c:	b21b      	sxth	r3, r3
 800366e:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8003672:	b21b      	sxth	r3, r3
 8003674:	b29b      	uxth	r3, r3
 8003676:	461a      	mov	r2, r3
 8003678:	211c      	movs	r1, #28
 800367a:	f000 fae5 	bl	8003c48 <CODEC_IO_Write>
 800367e:	4603      	mov	r3, r0
 8003680:	461a      	mov	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4413      	add	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8003688:	88fb      	ldrh	r3, [r7, #6]
 800368a:	b2d8      	uxtb	r0, r3
 800368c:	7afb      	ldrb	r3, [r7, #11]
 800368e:	b21b      	sxth	r3, r3
 8003690:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8003694:	b21b      	sxth	r3, r3
 8003696:	b29b      	uxth	r3, r3
 8003698:	461a      	mov	r2, r3
 800369a:	211d      	movs	r1, #29
 800369c:	f000 fad4 	bl	8003c48 <CODEC_IO_Write>
 80036a0:	4603      	mov	r3, r0
 80036a2:	461a      	mov	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4413      	add	r3, r2
 80036a8:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 80036aa:	88fb      	ldrh	r3, [r7, #6]
 80036ac:	b2d8      	uxtb	r0, r3
 80036ae:	7afb      	ldrb	r3, [r7, #11]
 80036b0:	b21b      	sxth	r3, r3
 80036b2:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80036b6:	b21b      	sxth	r3, r3
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	461a      	mov	r2, r3
 80036bc:	2126      	movs	r1, #38	; 0x26
 80036be:	f000 fac3 	bl	8003c48 <CODEC_IO_Write>
 80036c2:	4603      	mov	r3, r0
 80036c4:	461a      	mov	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	4413      	add	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 80036cc:	88fb      	ldrh	r3, [r7, #6]
 80036ce:	b2d8      	uxtb	r0, r3
 80036d0:	7afb      	ldrb	r3, [r7, #11]
 80036d2:	b21b      	sxth	r3, r3
 80036d4:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80036d8:	b21b      	sxth	r3, r3
 80036da:	b29b      	uxth	r3, r3
 80036dc:	461a      	mov	r2, r3
 80036de:	2127      	movs	r1, #39	; 0x27
 80036e0:	f000 fab2 	bl	8003c48 <CODEC_IO_Write>
 80036e4:	4603      	mov	r3, r0
 80036e6:	461a      	mov	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4413      	add	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 80036ee:	4b33      	ldr	r3, [pc, #204]	; (80037bc <wm8994_SetVolume+0x244>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d059      	beq.n	80037aa <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80036f6:	797b      	ldrb	r3, [r7, #5]
 80036f8:	2b63      	cmp	r3, #99	; 0x63
 80036fa:	d80c      	bhi.n	8003716 <wm8994_SetVolume+0x19e>
 80036fc:	797a      	ldrb	r2, [r7, #5]
 80036fe:	4613      	mov	r3, r2
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	1a9b      	subs	r3, r3, r2
 8003704:	011b      	lsls	r3, r3, #4
 8003706:	4a2b      	ldr	r2, [pc, #172]	; (80037b4 <wm8994_SetVolume+0x23c>)
 8003708:	fb82 1203 	smull	r1, r2, r2, r3
 800370c:	1152      	asrs	r2, r2, #5
 800370e:	17db      	asrs	r3, r3, #31
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	b2db      	uxtb	r3, r3
 8003714:	e000      	b.n	8003718 <wm8994_SetVolume+0x1a0>
 8003716:	23ef      	movs	r3, #239	; 0xef
 8003718:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 800371a:	88fb      	ldrh	r3, [r7, #6]
 800371c:	b2d8      	uxtb	r0, r3
 800371e:	7afb      	ldrb	r3, [r7, #11]
 8003720:	b21b      	sxth	r3, r3
 8003722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003726:	b21b      	sxth	r3, r3
 8003728:	b29b      	uxth	r3, r3
 800372a:	461a      	mov	r2, r3
 800372c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003730:	f000 fa8a 	bl	8003c48 <CODEC_IO_Write>
 8003734:	4603      	mov	r3, r0
 8003736:	461a      	mov	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	4413      	add	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 800373e:	88fb      	ldrh	r3, [r7, #6]
 8003740:	b2d8      	uxtb	r0, r3
 8003742:	7afb      	ldrb	r3, [r7, #11]
 8003744:	b21b      	sxth	r3, r3
 8003746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800374a:	b21b      	sxth	r3, r3
 800374c:	b29b      	uxth	r3, r3
 800374e:	461a      	mov	r2, r3
 8003750:	f240 4101 	movw	r1, #1025	; 0x401
 8003754:	f000 fa78 	bl	8003c48 <CODEC_IO_Write>
 8003758:	4603      	mov	r3, r0
 800375a:	461a      	mov	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4413      	add	r3, r2
 8003760:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8003762:	88fb      	ldrh	r3, [r7, #6]
 8003764:	b2d8      	uxtb	r0, r3
 8003766:	7afb      	ldrb	r3, [r7, #11]
 8003768:	b21b      	sxth	r3, r3
 800376a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800376e:	b21b      	sxth	r3, r3
 8003770:	b29b      	uxth	r3, r3
 8003772:	461a      	mov	r2, r3
 8003774:	f240 4104 	movw	r1, #1028	; 0x404
 8003778:	f000 fa66 	bl	8003c48 <CODEC_IO_Write>
 800377c:	4603      	mov	r3, r0
 800377e:	461a      	mov	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4413      	add	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8003786:	88fb      	ldrh	r3, [r7, #6]
 8003788:	b2d8      	uxtb	r0, r3
 800378a:	7afb      	ldrb	r3, [r7, #11]
 800378c:	b21b      	sxth	r3, r3
 800378e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003792:	b21b      	sxth	r3, r3
 8003794:	b29b      	uxth	r3, r3
 8003796:	461a      	mov	r2, r3
 8003798:	f240 4105 	movw	r1, #1029	; 0x405
 800379c:	f000 fa54 	bl	8003c48 <CODEC_IO_Write>
 80037a0:	4603      	mov	r3, r0
 80037a2:	461a      	mov	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4413      	add	r3, r2
 80037a8:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80037aa:	68fb      	ldr	r3, [r7, #12]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	51eb851f 	.word	0x51eb851f
 80037b8:	20002154 	.word	0x20002154
 80037bc:	20002158 	.word	0x20002158

080037c0 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	6039      	str	r1, [r7, #0]
 80037ca:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80037cc:	2300      	movs	r3, #0
 80037ce:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 80037d0:	4b21      	ldr	r3, [pc, #132]	; (8003858 <wm8994_SetMute+0x98>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d039      	beq.n	800384c <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d11c      	bne.n	8003818 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80037de:	88fb      	ldrh	r3, [r7, #6]
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037e6:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 fa2c 	bl	8003c48 <CODEC_IO_Write>
 80037f0:	4603      	mov	r3, r0
 80037f2:	461a      	mov	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4413      	add	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80037fa:	88fb      	ldrh	r3, [r7, #6]
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003802:	f240 4122 	movw	r1, #1058	; 0x422
 8003806:	4618      	mov	r0, r3
 8003808:	f000 fa1e 	bl	8003c48 <CODEC_IO_Write>
 800380c:	4603      	mov	r3, r0
 800380e:	461a      	mov	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4413      	add	r3, r2
 8003814:	60fb      	str	r3, [r7, #12]
 8003816:	e019      	b.n	800384c <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8003818:	88fb      	ldrh	r3, [r7, #6]
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2210      	movs	r2, #16
 800381e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8003822:	4618      	mov	r0, r3
 8003824:	f000 fa10 	bl	8003c48 <CODEC_IO_Write>
 8003828:	4603      	mov	r3, r0
 800382a:	461a      	mov	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4413      	add	r3, r2
 8003830:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8003832:	88fb      	ldrh	r3, [r7, #6]
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2210      	movs	r2, #16
 8003838:	f240 4122 	movw	r1, #1058	; 0x422
 800383c:	4618      	mov	r0, r3
 800383e:	f000 fa03 	bl	8003c48 <CODEC_IO_Write>
 8003842:	4603      	mov	r3, r0
 8003844:	461a      	mov	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	4413      	add	r3, r2
 800384a:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 800384c:	68fb      	ldr	r3, [r7, #12]
}
 800384e:	4618      	mov	r0, r3
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	20002154 	.word	0x20002154

0800385c <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	4603      	mov	r3, r0
 8003864:	460a      	mov	r2, r1
 8003866:	80fb      	strh	r3, [r7, #6]
 8003868:	4613      	mov	r3, r2
 800386a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 800386c:	2300      	movs	r3, #0
 800386e:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8003870:	797b      	ldrb	r3, [r7, #5]
 8003872:	2b02      	cmp	r3, #2
 8003874:	d047      	beq.n	8003906 <wm8994_SetOutputMode+0xaa>
 8003876:	2b03      	cmp	r3, #3
 8003878:	f000 8087 	beq.w	800398a <wm8994_SetOutputMode+0x12e>
 800387c:	2b01      	cmp	r3, #1
 800387e:	f040 80c6 	bne.w	8003a0e <wm8994_SetOutputMode+0x1b2>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8003882:	88fb      	ldrh	r3, [r7, #6]
 8003884:	b2db      	uxtb	r3, r3
 8003886:	f640 420c 	movw	r2, #3084	; 0xc0c
 800388a:	2105      	movs	r1, #5
 800388c:	4618      	mov	r0, r3
 800388e:	f000 f9db 	bl	8003c48 <CODEC_IO_Write>
 8003892:	4603      	mov	r3, r0
 8003894:	461a      	mov	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	4413      	add	r3, r2
 800389a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 800389c:	88fb      	ldrh	r3, [r7, #6]
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2200      	movs	r2, #0
 80038a2:	f240 6101 	movw	r1, #1537	; 0x601
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 f9ce 	bl	8003c48 <CODEC_IO_Write>
 80038ac:	4603      	mov	r3, r0
 80038ae:	461a      	mov	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4413      	add	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 80038b6:	88fb      	ldrh	r3, [r7, #6]
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2200      	movs	r2, #0
 80038bc:	f240 6102 	movw	r1, #1538	; 0x602
 80038c0:	4618      	mov	r0, r3
 80038c2:	f000 f9c1 	bl	8003c48 <CODEC_IO_Write>
 80038c6:	4603      	mov	r3, r0
 80038c8:	461a      	mov	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	4413      	add	r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80038d0:	88fb      	ldrh	r3, [r7, #6]
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2202      	movs	r2, #2
 80038d6:	f240 6104 	movw	r1, #1540	; 0x604
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 f9b4 	bl	8003c48 <CODEC_IO_Write>
 80038e0:	4603      	mov	r3, r0
 80038e2:	461a      	mov	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	4413      	add	r3, r2
 80038e8:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80038ea:	88fb      	ldrh	r3, [r7, #6]
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2202      	movs	r2, #2
 80038f0:	f240 6105 	movw	r1, #1541	; 0x605
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 f9a7 	bl	8003c48 <CODEC_IO_Write>
 80038fa:	4603      	mov	r3, r0
 80038fc:	461a      	mov	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	4413      	add	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]
    break;
 8003904:	e0c5      	b.n	8003a92 <wm8994_SetOutputMode+0x236>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003906:	88fb      	ldrh	r3, [r7, #6]
 8003908:	b2db      	uxtb	r3, r3
 800390a:	f240 3203 	movw	r2, #771	; 0x303
 800390e:	2105      	movs	r1, #5
 8003910:	4618      	mov	r0, r3
 8003912:	f000 f999 	bl	8003c48 <CODEC_IO_Write>
 8003916:	4603      	mov	r3, r0
 8003918:	461a      	mov	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	4413      	add	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003920:	88fb      	ldrh	r3, [r7, #6]
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2201      	movs	r2, #1
 8003926:	f240 6101 	movw	r1, #1537	; 0x601
 800392a:	4618      	mov	r0, r3
 800392c:	f000 f98c 	bl	8003c48 <CODEC_IO_Write>
 8003930:	4603      	mov	r3, r0
 8003932:	461a      	mov	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4413      	add	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800393a:	88fb      	ldrh	r3, [r7, #6]
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2201      	movs	r2, #1
 8003940:	f240 6102 	movw	r1, #1538	; 0x602
 8003944:	4618      	mov	r0, r3
 8003946:	f000 f97f 	bl	8003c48 <CODEC_IO_Write>
 800394a:	4603      	mov	r3, r0
 800394c:	461a      	mov	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	4413      	add	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8003954:	88fb      	ldrh	r3, [r7, #6]
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2200      	movs	r2, #0
 800395a:	f240 6104 	movw	r1, #1540	; 0x604
 800395e:	4618      	mov	r0, r3
 8003960:	f000 f972 	bl	8003c48 <CODEC_IO_Write>
 8003964:	4603      	mov	r3, r0
 8003966:	461a      	mov	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4413      	add	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800396e:	88fb      	ldrh	r3, [r7, #6]
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2200      	movs	r2, #0
 8003974:	f240 6105 	movw	r1, #1541	; 0x605
 8003978:	4618      	mov	r0, r3
 800397a:	f000 f965 	bl	8003c48 <CODEC_IO_Write>
 800397e:	4603      	mov	r3, r0
 8003980:	461a      	mov	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4413      	add	r3, r2
 8003986:	60fb      	str	r3, [r7, #12]
    break;
 8003988:	e083      	b.n	8003a92 <wm8994_SetOutputMode+0x236>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 800398a:	88fb      	ldrh	r3, [r7, #6]
 800398c:	b2db      	uxtb	r3, r3
 800398e:	f640 720f 	movw	r2, #3855	; 0xf0f
 8003992:	2105      	movs	r1, #5
 8003994:	4618      	mov	r0, r3
 8003996:	f000 f957 	bl	8003c48 <CODEC_IO_Write>
 800399a:	4603      	mov	r3, r0
 800399c:	461a      	mov	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	4413      	add	r3, r2
 80039a2:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80039a4:	88fb      	ldrh	r3, [r7, #6]
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2201      	movs	r2, #1
 80039aa:	f240 6101 	movw	r1, #1537	; 0x601
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 f94a 	bl	8003c48 <CODEC_IO_Write>
 80039b4:	4603      	mov	r3, r0
 80039b6:	461a      	mov	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4413      	add	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80039be:	88fb      	ldrh	r3, [r7, #6]
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2201      	movs	r2, #1
 80039c4:	f240 6102 	movw	r1, #1538	; 0x602
 80039c8:	4618      	mov	r0, r3
 80039ca:	f000 f93d 	bl	8003c48 <CODEC_IO_Write>
 80039ce:	4603      	mov	r3, r0
 80039d0:	461a      	mov	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	4413      	add	r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80039d8:	88fb      	ldrh	r3, [r7, #6]
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2202      	movs	r2, #2
 80039de:	f240 6104 	movw	r1, #1540	; 0x604
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 f930 	bl	8003c48 <CODEC_IO_Write>
 80039e8:	4603      	mov	r3, r0
 80039ea:	461a      	mov	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4413      	add	r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80039f2:	88fb      	ldrh	r3, [r7, #6]
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2202      	movs	r2, #2
 80039f8:	f240 6105 	movw	r1, #1541	; 0x605
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 f923 	bl	8003c48 <CODEC_IO_Write>
 8003a02:	4603      	mov	r3, r0
 8003a04:	461a      	mov	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	4413      	add	r3, r2
 8003a0a:	60fb      	str	r3, [r7, #12]
    break;
 8003a0c:	e041      	b.n	8003a92 <wm8994_SetOutputMode+0x236>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003a0e:	88fb      	ldrh	r3, [r7, #6]
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	f240 3203 	movw	r2, #771	; 0x303
 8003a16:	2105      	movs	r1, #5
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f000 f915 	bl	8003c48 <CODEC_IO_Write>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	461a      	mov	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	4413      	add	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003a28:	88fb      	ldrh	r3, [r7, #6]
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f240 6101 	movw	r1, #1537	; 0x601
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 f908 	bl	8003c48 <CODEC_IO_Write>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	4413      	add	r3, r2
 8003a40:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003a42:	88fb      	ldrh	r3, [r7, #6]
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2201      	movs	r2, #1
 8003a48:	f240 6102 	movw	r1, #1538	; 0x602
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f000 f8fb 	bl	8003c48 <CODEC_IO_Write>
 8003a52:	4603      	mov	r3, r0
 8003a54:	461a      	mov	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	4413      	add	r3, r2
 8003a5a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8003a5c:	88fb      	ldrh	r3, [r7, #6]
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2200      	movs	r2, #0
 8003a62:	f240 6104 	movw	r1, #1540	; 0x604
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 f8ee 	bl	8003c48 <CODEC_IO_Write>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	461a      	mov	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4413      	add	r3, r2
 8003a74:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8003a76:	88fb      	ldrh	r3, [r7, #6]
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f240 6105 	movw	r1, #1541	; 0x605
 8003a80:	4618      	mov	r0, r3
 8003a82:	f000 f8e1 	bl	8003c48 <CODEC_IO_Write>
 8003a86:	4603      	mov	r3, r0
 8003a88:	461a      	mov	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	60fb      	str	r3, [r7, #12]
    break;    
 8003a90:	bf00      	nop
  }  
  return counter;
 8003a92:	68fb      	ldr	r3, [r7, #12]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	6039      	str	r1, [r7, #0]
 8003aa6:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	f245 6222 	movw	r2, #22050	; 0x5622
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d076      	beq.n	8003ba4 <wm8994_SetFrequency+0x108>
 8003ab6:	f245 6222 	movw	r2, #22050	; 0x5622
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d80a      	bhi.n	8003ad4 <wm8994_SetFrequency+0x38>
 8003abe:	f642 3211 	movw	r2, #11025	; 0x2b11
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d060      	beq.n	8003b88 <wm8994_SetFrequency+0xec>
 8003ac6:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8003aca:	d025      	beq.n	8003b18 <wm8994_SetFrequency+0x7c>
 8003acc:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8003ad0:	d014      	beq.n	8003afc <wm8994_SetFrequency+0x60>
 8003ad2:	e083      	b.n	8003bdc <wm8994_SetFrequency+0x140>
 8003ad4:	f64a 4244 	movw	r2, #44100	; 0xac44
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d071      	beq.n	8003bc0 <wm8994_SetFrequency+0x124>
 8003adc:	f64a 4244 	movw	r2, #44100	; 0xac44
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d803      	bhi.n	8003aec <wm8994_SetFrequency+0x50>
 8003ae4:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8003ae8:	d024      	beq.n	8003b34 <wm8994_SetFrequency+0x98>
 8003aea:	e077      	b.n	8003bdc <wm8994_SetFrequency+0x140>
 8003aec:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d02d      	beq.n	8003b50 <wm8994_SetFrequency+0xb4>
 8003af4:	4a43      	ldr	r2, [pc, #268]	; (8003c04 <wm8994_SetFrequency+0x168>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d038      	beq.n	8003b6c <wm8994_SetFrequency+0xd0>
 8003afa:	e06f      	b.n	8003bdc <wm8994_SetFrequency+0x140>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8003afc:	88fb      	ldrh	r3, [r7, #6]
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2203      	movs	r2, #3
 8003b02:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 f89e 	bl	8003c48 <CODEC_IO_Write>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	461a      	mov	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	4413      	add	r3, r2
 8003b14:	60fb      	str	r3, [r7, #12]
    break;
 8003b16:	e06f      	b.n	8003bf8 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8003b18:	88fb      	ldrh	r3, [r7, #6]
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2233      	movs	r2, #51	; 0x33
 8003b1e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 f890 	bl	8003c48 <CODEC_IO_Write>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4413      	add	r3, r2
 8003b30:	60fb      	str	r3, [r7, #12]
    break;
 8003b32:	e061      	b.n	8003bf8 <wm8994_SetFrequency+0x15c>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8003b34:	88fb      	ldrh	r3, [r7, #6]
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2263      	movs	r2, #99	; 0x63
 8003b3a:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 f882 	bl	8003c48 <CODEC_IO_Write>
 8003b44:	4603      	mov	r3, r0
 8003b46:	461a      	mov	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]
    break;
 8003b4e:	e053      	b.n	8003bf8 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8003b50:	88fb      	ldrh	r3, [r7, #6]
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2283      	movs	r2, #131	; 0x83
 8003b56:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 f874 	bl	8003c48 <CODEC_IO_Write>
 8003b60:	4603      	mov	r3, r0
 8003b62:	461a      	mov	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	4413      	add	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]
    break;
 8003b6a:	e045      	b.n	8003bf8 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8003b6c:	88fb      	ldrh	r3, [r7, #6]
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	22a3      	movs	r2, #163	; 0xa3
 8003b72:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 f866 	bl	8003c48 <CODEC_IO_Write>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	461a      	mov	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	4413      	add	r3, r2
 8003b84:	60fb      	str	r3, [r7, #12]
    break;
 8003b86:	e037      	b.n	8003bf8 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8003b88:	88fb      	ldrh	r3, [r7, #6]
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2213      	movs	r2, #19
 8003b8e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 f858 	bl	8003c48 <CODEC_IO_Write>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]
    break;
 8003ba2:	e029      	b.n	8003bf8 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8003ba4:	88fb      	ldrh	r3, [r7, #6]
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2243      	movs	r2, #67	; 0x43
 8003baa:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 f84a 	bl	8003c48 <CODEC_IO_Write>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	4413      	add	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]
    break;
 8003bbe:	e01b      	b.n	8003bf8 <wm8994_SetFrequency+0x15c>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8003bc0:	88fb      	ldrh	r3, [r7, #6]
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2273      	movs	r2, #115	; 0x73
 8003bc6:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 f83c 	bl	8003c48 <CODEC_IO_Write>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]
    break; 
 8003bda:	e00d      	b.n	8003bf8 <wm8994_SetFrequency+0x15c>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8003bdc:	88fb      	ldrh	r3, [r7, #6]
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2283      	movs	r2, #131	; 0x83
 8003be2:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 f82e 	bl	8003c48 <CODEC_IO_Write>
 8003bec:	4603      	mov	r3, r0
 8003bee:	461a      	mov	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	60fb      	str	r3, [r7, #12]
    break; 
 8003bf6:	bf00      	nop
  }
  return counter;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	00017700 	.word	0x00017700

08003c08 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	4603      	mov	r3, r0
 8003c10:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003c12:	2300      	movs	r3, #0
 8003c14:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8003c16:	88fb      	ldrh	r3, [r7, #6]
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 f812 	bl	8003c48 <CODEC_IO_Write>
 8003c24:	4603      	mov	r3, r0
 8003c26:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8003c28:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <wm8994_Reset+0x38>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8003c2e:	4b05      	ldr	r3, [pc, #20]	; (8003c44 <wm8994_Reset+0x3c>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	601a      	str	r2, [r3, #0]

  return counter;
 8003c34:	68fb      	ldr	r3, [r7, #12]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	20002154 	.word	0x20002154
 8003c44:	20002158 	.word	0x20002158

08003c48 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	4603      	mov	r3, r0
 8003c50:	71fb      	strb	r3, [r7, #7]
 8003c52:	460b      	mov	r3, r1
 8003c54:	80bb      	strh	r3, [r7, #4]
 8003c56:	4613      	mov	r3, r2
 8003c58:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8003c5e:	887a      	ldrh	r2, [r7, #2]
 8003c60:	88b9      	ldrh	r1, [r7, #4]
 8003c62:	79fb      	ldrb	r3, [r7, #7]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f000 fa4b 	bl	8004100 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	b2db      	uxtb	r3, r3
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
	...

08003c78 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b088      	sub	sp, #32
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	4603      	mov	r3, r0
 8003c80:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE();
 8003c82:	4b12      	ldr	r3, [pc, #72]	; (8003ccc <BSP_LED_Init+0x54>)
 8003c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c86:	4a11      	ldr	r2, [pc, #68]	; (8003ccc <BSP_LED_Init+0x54>)
 8003c88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c8e:	4b0f      	ldr	r3, [pc, #60]	; (8003ccc <BSP_LED_Init+0x54>)
 8003c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c96:	60bb      	str	r3, [r7, #8]
 8003c98:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8003c9a:	79fb      	ldrb	r3, [r7, #7]
 8003c9c:	4a0c      	ldr	r2, [pc, #48]	; (8003cd0 <BSP_LED_Init+0x58>)
 8003c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ca2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003cac:	2303      	movs	r3, #3
 8003cae:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8003cb0:	79fb      	ldrb	r3, [r7, #7]
 8003cb2:	4a08      	ldr	r2, [pc, #32]	; (8003cd4 <BSP_LED_Init+0x5c>)
 8003cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cb8:	f107 020c 	add.w	r2, r7, #12
 8003cbc:	4611      	mov	r1, r2
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f001 fc32 	bl	8005528 <HAL_GPIO_Init>

}
 8003cc4:	bf00      	nop
 8003cc6:	3720      	adds	r7, #32
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	40023800 	.word	0x40023800
 8003cd0:	20000044 	.word	0x20000044
 8003cd4:	2000004c 	.word	0x2000004c

08003cd8 <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	4603      	mov	r3, r0
 8003ce0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8003ce2:	79fb      	ldrb	r3, [r7, #7]
 8003ce4:	4a07      	ldr	r2, [pc, #28]	; (8003d04 <BSP_LED_On+0x2c>)
 8003ce6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003cea:	79fb      	ldrb	r3, [r7, #7]
 8003cec:	4a06      	ldr	r2, [pc, #24]	; (8003d08 <BSP_LED_On+0x30>)
 8003cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	f001 fee2 	bl	8005ac0 <HAL_GPIO_WritePin>
}
 8003cfc:	bf00      	nop
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	2000004c 	.word	0x2000004c
 8003d08:	20000044 	.word	0x20000044

08003d0c <BSP_LED_Toggle>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	4603      	mov	r3, r0
 8003d14:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8003d16:	79fb      	ldrb	r3, [r7, #7]
 8003d18:	4a07      	ldr	r2, [pc, #28]	; (8003d38 <BSP_LED_Toggle+0x2c>)
 8003d1a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003d1e:	79fb      	ldrb	r3, [r7, #7]
 8003d20:	4a06      	ldr	r2, [pc, #24]	; (8003d3c <BSP_LED_Toggle+0x30>)
 8003d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	4619      	mov	r1, r3
 8003d2a:	f001 fee2 	bl	8005af2 <HAL_GPIO_TogglePin>
}
 8003d2e:	bf00      	nop
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	2000004c 	.word	0x2000004c
 8003d3c:	20000044 	.word	0x20000044

08003d40 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b088      	sub	sp, #32
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	4603      	mov	r3, r0
 8003d48:	460a      	mov	r2, r1
 8003d4a:	71fb      	strb	r3, [r7, #7]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable the BUTTON clock */
  BUTTON_GPIO_CLK_ENABLE();
 8003d50:	4b22      	ldr	r3, [pc, #136]	; (8003ddc <BSP_PB_Init+0x9c>)
 8003d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d54:	4a21      	ldr	r2, [pc, #132]	; (8003ddc <BSP_PB_Init+0x9c>)
 8003d56:	f043 0301 	orr.w	r3, r3, #1
 8003d5a:	6313      	str	r3, [r2, #48]	; 0x30
 8003d5c:	4b1f      	ldr	r3, [pc, #124]	; (8003ddc <BSP_PB_Init+0x9c>)
 8003d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	60bb      	str	r3, [r7, #8]
 8003d66:	68bb      	ldr	r3, [r7, #8]

  if(Button_Mode == BUTTON_MODE_GPIO)
 8003d68:	79bb      	ldrb	r3, [r7, #6]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d111      	bne.n	8003d92 <BSP_PB_Init+0x52>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8003d6e:	2301      	movs	r3, #1
 8003d70:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8003d72:	2300      	movs	r3, #0
 8003d74:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003d76:	2300      	movs	r3, #0
 8003d78:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8003d7e:	79fb      	ldrb	r3, [r7, #7]
 8003d80:	4a17      	ldr	r2, [pc, #92]	; (8003de0 <BSP_PB_Init+0xa0>)
 8003d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d86:	f107 020c 	add.w	r2, r7, #12
 8003d8a:	4611      	mov	r1, r2
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f001 fbcb 	bl	8005528 <HAL_GPIO_Init>
  }

  if(Button_Mode == BUTTON_MODE_EXTI)
 8003d92:	79bb      	ldrb	r3, [r7, #6]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d11d      	bne.n	8003dd4 <BSP_PB_Init+0x94>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8003d98:	2301      	movs	r3, #1
 8003d9a:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003da0:	2302      	movs	r3, #2
 8003da2:	61bb      	str	r3, [r7, #24]

    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8003da4:	4b0f      	ldr	r3, [pc, #60]	; (8003de4 <BSP_PB_Init+0xa4>)
 8003da6:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8003da8:	79fb      	ldrb	r3, [r7, #7]
 8003daa:	4a0d      	ldr	r2, [pc, #52]	; (8003de0 <BSP_PB_Init+0xa0>)
 8003dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003db0:	f107 020c 	add.w	r2, r7, #12
 8003db4:	4611      	mov	r1, r2
 8003db6:	4618      	mov	r0, r3
 8003db8:	f001 fbb6 	bl	8005528 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8003dbc:	2306      	movs	r3, #6
 8003dbe:	b25b      	sxtb	r3, r3
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	210f      	movs	r1, #15
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f000 fdf0 	bl	80049aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8003dca:	2306      	movs	r3, #6
 8003dcc:	b25b      	sxtb	r3, r3
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f000 fe07 	bl	80049e2 <HAL_NVIC_EnableIRQ>
  }
}
 8003dd4:	bf00      	nop
 8003dd6:	3720      	adds	r7, #32
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	20000054 	.word	0x20000054
 8003de4:	10110000 	.word	0x10110000

08003de8 <BSP_PB_GetState>:
  *            @arg  BUTTON_WAKEUP: Wakeup Push Button
  *            @arg  BUTTON_USER: User Push Button
  * @retval The Button GPIO pin value
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	4603      	mov	r3, r0
 8003df0:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8003df2:	79fb      	ldrb	r3, [r7, #7]
 8003df4:	4a06      	ldr	r2, [pc, #24]	; (8003e10 <BSP_PB_GetState+0x28>)
 8003df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	4611      	mov	r1, r2
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f001 fe46 	bl	8005a90 <HAL_GPIO_ReadPin>
 8003e04:	4603      	mov	r3, r0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	20000054 	.word	0x20000054

08003e14 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b08c      	sub	sp, #48	; 0x30
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a58      	ldr	r2, [pc, #352]	; (8003f80 <I2Cx_MspInit+0x16c>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d15b      	bne.n	8003edc <I2Cx_MspInit+0xc8>
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8003e24:	4b57      	ldr	r3, [pc, #348]	; (8003f84 <I2Cx_MspInit+0x170>)
 8003e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e28:	4a56      	ldr	r2, [pc, #344]	; (8003f84 <I2Cx_MspInit+0x170>)
 8003e2a:	f043 0308 	orr.w	r3, r3, #8
 8003e2e:	6313      	str	r3, [r2, #48]	; 0x30
 8003e30:	4b54      	ldr	r3, [pc, #336]	; (8003f84 <I2Cx_MspInit+0x170>)
 8003e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e34:	f003 0308 	and.w	r3, r3, #8
 8003e38:	61bb      	str	r3, [r7, #24]
 8003e3a:	69bb      	ldr	r3, [r7, #24]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 8003e3c:	4b51      	ldr	r3, [pc, #324]	; (8003f84 <I2Cx_MspInit+0x170>)
 8003e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e40:	4a50      	ldr	r2, [pc, #320]	; (8003f84 <I2Cx_MspInit+0x170>)
 8003e42:	f043 0302 	orr.w	r3, r3, #2
 8003e46:	6313      	str	r3, [r2, #48]	; 0x30
 8003e48:	4b4e      	ldr	r3, [pc, #312]	; (8003f84 <I2Cx_MspInit+0x170>)
 8003e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	617b      	str	r3, [r7, #20]
 8003e52:	697b      	ldr	r3, [r7, #20]
  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8003e54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e58:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003e5a:	2312      	movs	r3, #18
 8003e5c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003e62:	2302      	movs	r3, #2
 8003e64:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 8003e66:	2304      	movs	r3, #4
 8003e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 8003e6a:	f107 031c 	add.w	r3, r7, #28
 8003e6e:	4619      	mov	r1, r3
 8003e70:	4845      	ldr	r0, [pc, #276]	; (8003f88 <I2Cx_MspInit+0x174>)
 8003e72:	f001 fb59 	bl	8005528 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8003e76:	2380      	movs	r3, #128	; 0x80
 8003e78:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 8003e7a:	230b      	movs	r3, #11
 8003e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 8003e7e:	f107 031c 	add.w	r3, r7, #28
 8003e82:	4619      	mov	r1, r3
 8003e84:	4841      	ldr	r0, [pc, #260]	; (8003f8c <I2Cx_MspInit+0x178>)
 8003e86:	f001 fb4f 	bl	8005528 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8003e8a:	4b3e      	ldr	r3, [pc, #248]	; (8003f84 <I2Cx_MspInit+0x170>)
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	4a3d      	ldr	r2, [pc, #244]	; (8003f84 <I2Cx_MspInit+0x170>)
 8003e90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e94:	6413      	str	r3, [r2, #64]	; 0x40
 8003e96:	4b3b      	ldr	r3, [pc, #236]	; (8003f84 <I2Cx_MspInit+0x170>)
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e9e:	613b      	str	r3, [r7, #16]
 8003ea0:	693b      	ldr	r3, [r7, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8003ea2:	4b38      	ldr	r3, [pc, #224]	; (8003f84 <I2Cx_MspInit+0x170>)
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	4a37      	ldr	r2, [pc, #220]	; (8003f84 <I2Cx_MspInit+0x170>)
 8003ea8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eac:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8003eae:	4b35      	ldr	r3, [pc, #212]	; (8003f84 <I2Cx_MspInit+0x170>)
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	4a34      	ldr	r2, [pc, #208]	; (8003f84 <I2Cx_MspInit+0x170>)
 8003eb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eb8:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8003eba:	2200      	movs	r2, #0
 8003ebc:	210f      	movs	r1, #15
 8003ebe:	205f      	movs	r0, #95	; 0x5f
 8003ec0:	f000 fd73 	bl	80049aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8003ec4:	205f      	movs	r0, #95	; 0x5f
 8003ec6:	f000 fd8c 	bl	80049e2 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8003eca:	2200      	movs	r2, #0
 8003ecc:	210f      	movs	r1, #15
 8003ece:	2060      	movs	r0, #96	; 0x60
 8003ed0:	f000 fd6b 	bl	80049aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 8003ed4:	2060      	movs	r0, #96	; 0x60
 8003ed6:	f000 fd84 	bl	80049e2 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8003eda:	e04d      	b.n	8003f78 <I2Cx_MspInit+0x164>
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003edc:	4b29      	ldr	r3, [pc, #164]	; (8003f84 <I2Cx_MspInit+0x170>)
 8003ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee0:	4a28      	ldr	r2, [pc, #160]	; (8003f84 <I2Cx_MspInit+0x170>)
 8003ee2:	f043 0302 	orr.w	r3, r3, #2
 8003ee6:	6313      	str	r3, [r2, #48]	; 0x30
 8003ee8:	4b26      	ldr	r3, [pc, #152]	; (8003f84 <I2Cx_MspInit+0x170>)
 8003eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8003ef4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ef8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003efa:	2312      	movs	r3, #18
 8003efc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003efe:	2300      	movs	r3, #0
 8003f00:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003f02:	2302      	movs	r3, #2
 8003f04:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8003f06:	2304      	movs	r3, #4
 8003f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003f0a:	f107 031c 	add.w	r3, r7, #28
 8003f0e:	4619      	mov	r1, r3
 8003f10:	481e      	ldr	r0, [pc, #120]	; (8003f8c <I2Cx_MspInit+0x178>)
 8003f12:	f001 fb09 	bl	8005528 <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8003f16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003f1c:	f107 031c 	add.w	r3, r7, #28
 8003f20:	4619      	mov	r1, r3
 8003f22:	481a      	ldr	r0, [pc, #104]	; (8003f8c <I2Cx_MspInit+0x178>)
 8003f24:	f001 fb00 	bl	8005528 <HAL_GPIO_Init>
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8003f28:	4b16      	ldr	r3, [pc, #88]	; (8003f84 <I2Cx_MspInit+0x170>)
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	4a15      	ldr	r2, [pc, #84]	; (8003f84 <I2Cx_MspInit+0x170>)
 8003f2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f32:	6413      	str	r3, [r2, #64]	; 0x40
 8003f34:	4b13      	ldr	r3, [pc, #76]	; (8003f84 <I2Cx_MspInit+0x170>)
 8003f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f3c:	60bb      	str	r3, [r7, #8]
 8003f3e:	68bb      	ldr	r3, [r7, #8]
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8003f40:	4b10      	ldr	r3, [pc, #64]	; (8003f84 <I2Cx_MspInit+0x170>)
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	4a0f      	ldr	r2, [pc, #60]	; (8003f84 <I2Cx_MspInit+0x170>)
 8003f46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f4a:	6213      	str	r3, [r2, #32]
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8003f4c:	4b0d      	ldr	r3, [pc, #52]	; (8003f84 <I2Cx_MspInit+0x170>)
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	4a0c      	ldr	r2, [pc, #48]	; (8003f84 <I2Cx_MspInit+0x170>)
 8003f52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f56:	6213      	str	r3, [r2, #32]
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8003f58:	2200      	movs	r2, #0
 8003f5a:	210f      	movs	r1, #15
 8003f5c:	201f      	movs	r0, #31
 8003f5e:	f000 fd24 	bl	80049aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8003f62:	201f      	movs	r0, #31
 8003f64:	f000 fd3d 	bl	80049e2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8003f68:	2200      	movs	r2, #0
 8003f6a:	210f      	movs	r1, #15
 8003f6c:	2020      	movs	r0, #32
 8003f6e:	f000 fd1c 	bl	80049aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8003f72:	2020      	movs	r0, #32
 8003f74:	f000 fd35 	bl	80049e2 <HAL_NVIC_EnableIRQ>
}
 8003f78:	bf00      	nop
 8003f7a:	3730      	adds	r7, #48	; 0x30
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	2000215c 	.word	0x2000215c
 8003f84:	40023800 	.word	0x40023800
 8003f88:	40020c00 	.word	0x40020c00
 8003f8c:	40020400 	.word	0x40020400

08003f90 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f003 fda3 	bl	8007ae4 <HAL_I2C_GetState>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d125      	bne.n	8003ff0 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a14      	ldr	r2, [pc, #80]	; (8003ff8 <I2Cx_Init+0x68>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d103      	bne.n	8003fb4 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a13      	ldr	r2, [pc, #76]	; (8003ffc <I2Cx_Init+0x6c>)
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	e002      	b.n	8003fba <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a12      	ldr	r2, [pc, #72]	; (8004000 <I2Cx_Init+0x70>)
 8003fb8:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a11      	ldr	r2, [pc, #68]	; (8004004 <I2Cx_Init+0x74>)
 8003fbe:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f7ff ff15 	bl	8003e14 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f003 fa8c 	bl	8007508 <HAL_I2C_Init>
  }
}
 8003ff0:	bf00      	nop
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	2000215c 	.word	0x2000215c
 8003ffc:	40006000 	.word	0x40006000
 8004000:	40005400 	.word	0x40005400
 8004004:	40912732 	.word	0x40912732

08004008 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b08a      	sub	sp, #40	; 0x28
 800400c:	af04      	add	r7, sp, #16
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	4608      	mov	r0, r1
 8004012:	4611      	mov	r1, r2
 8004014:	461a      	mov	r2, r3
 8004016:	4603      	mov	r3, r0
 8004018:	72fb      	strb	r3, [r7, #11]
 800401a:	460b      	mov	r3, r1
 800401c:	813b      	strh	r3, [r7, #8]
 800401e:	4613      	mov	r3, r2
 8004020:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004022:	2300      	movs	r3, #0
 8004024:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004026:	7afb      	ldrb	r3, [r7, #11]
 8004028:	b299      	uxth	r1, r3
 800402a:	88f8      	ldrh	r0, [r7, #6]
 800402c:	893a      	ldrh	r2, [r7, #8]
 800402e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004032:	9302      	str	r3, [sp, #8]
 8004034:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004036:	9301      	str	r3, [sp, #4]
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	4603      	mov	r3, r0
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f003 fc36 	bl	80078b0 <HAL_I2C_Mem_Read>
 8004044:	4603      	mov	r3, r0
 8004046:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8004048:	7dfb      	ldrb	r3, [r7, #23]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d004      	beq.n	8004058 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 800404e:	7afb      	ldrb	r3, [r7, #11]
 8004050:	4619      	mov	r1, r3
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	f000 f832 	bl	80040bc <I2Cx_Error>
  }
  return status;
 8004058:	7dfb      	ldrb	r3, [r7, #23]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3718      	adds	r7, #24
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b08a      	sub	sp, #40	; 0x28
 8004066:	af04      	add	r7, sp, #16
 8004068:	60f8      	str	r0, [r7, #12]
 800406a:	4608      	mov	r0, r1
 800406c:	4611      	mov	r1, r2
 800406e:	461a      	mov	r2, r3
 8004070:	4603      	mov	r3, r0
 8004072:	72fb      	strb	r3, [r7, #11]
 8004074:	460b      	mov	r3, r1
 8004076:	813b      	strh	r3, [r7, #8]
 8004078:	4613      	mov	r3, r2
 800407a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800407c:	2300      	movs	r3, #0
 800407e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004080:	7afb      	ldrb	r3, [r7, #11]
 8004082:	b299      	uxth	r1, r3
 8004084:	88f8      	ldrh	r0, [r7, #6]
 8004086:	893a      	ldrh	r2, [r7, #8]
 8004088:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800408c:	9302      	str	r3, [sp, #8]
 800408e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004090:	9301      	str	r3, [sp, #4]
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	4603      	mov	r3, r0
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f003 faf5 	bl	8007688 <HAL_I2C_Mem_Write>
 800409e:	4603      	mov	r3, r0
 80040a0:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80040a2:	7dfb      	ldrb	r3, [r7, #23]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d004      	beq.n	80040b2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80040a8:	7afb      	ldrb	r3, [r7, #11]
 80040aa:	4619      	mov	r1, r3
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f000 f805 	bl	80040bc <I2Cx_Error>
  }
  return status;
 80040b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3718      	adds	r7, #24
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	460b      	mov	r3, r1
 80040c6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f003 faad 	bl	8007628 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7ff ff5e 	bl	8003f90 <I2Cx_Init>
}
 80040d4:	bf00      	nop
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80040e0:	4802      	ldr	r0, [pc, #8]	; (80040ec <AUDIO_IO_Init+0x10>)
 80040e2:	f7ff ff55 	bl	8003f90 <I2Cx_Init>
}
 80040e6:	bf00      	nop
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	2000215c 	.word	0x2000215c

080040f0 <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0

}
 80040f4:	bf00      	nop
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
	...

08004100 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af02      	add	r7, sp, #8
 8004106:	4603      	mov	r3, r0
 8004108:	71fb      	strb	r3, [r7, #7]
 800410a:	460b      	mov	r3, r1
 800410c:	80bb      	strh	r3, [r7, #4]
 800410e:	4613      	mov	r3, r2
 8004110:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 8004112:	887b      	ldrh	r3, [r7, #2]
 8004114:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8004116:	89fb      	ldrh	r3, [r7, #14]
 8004118:	0a1b      	lsrs	r3, r3, #8
 800411a:	b29b      	uxth	r3, r3
 800411c:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 800411e:	89fb      	ldrh	r3, [r7, #14]
 8004120:	021b      	lsls	r3, r3, #8
 8004122:	b29b      	uxth	r3, r3
 8004124:	b21a      	sxth	r2, r3
 8004126:	887b      	ldrh	r3, [r7, #2]
 8004128:	b21b      	sxth	r3, r3
 800412a:	4313      	orrs	r3, r2
 800412c:	b21b      	sxth	r3, r3
 800412e:	b29b      	uxth	r3, r3
 8004130:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8004132:	88ba      	ldrh	r2, [r7, #4]
 8004134:	79f9      	ldrb	r1, [r7, #7]
 8004136:	2302      	movs	r3, #2
 8004138:	9301      	str	r3, [sp, #4]
 800413a:	1cbb      	adds	r3, r7, #2
 800413c:	9300      	str	r3, [sp, #0]
 800413e:	2302      	movs	r3, #2
 8004140:	4803      	ldr	r0, [pc, #12]	; (8004150 <AUDIO_IO_Write+0x50>)
 8004142:	f7ff ff8e 	bl	8004062 <I2Cx_WriteMultiple>
}
 8004146:	bf00      	nop
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	2000215c 	.word	0x2000215c

08004154 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af02      	add	r7, sp, #8
 800415a:	4603      	mov	r3, r0
 800415c:	460a      	mov	r2, r1
 800415e:	71fb      	strb	r3, [r7, #7]
 8004160:	4613      	mov	r3, r2
 8004162:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 8004164:	2300      	movs	r3, #0
 8004166:	81bb      	strh	r3, [r7, #12]
 8004168:	2300      	movs	r3, #0
 800416a:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 800416c:	88ba      	ldrh	r2, [r7, #4]
 800416e:	79f9      	ldrb	r1, [r7, #7]
 8004170:	2302      	movs	r3, #2
 8004172:	9301      	str	r3, [sp, #4]
 8004174:	f107 030c 	add.w	r3, r7, #12
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	2302      	movs	r3, #2
 800417c:	480a      	ldr	r0, [pc, #40]	; (80041a8 <AUDIO_IO_Read+0x54>)
 800417e:	f7ff ff43 	bl	8004008 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8004182:	89bb      	ldrh	r3, [r7, #12]
 8004184:	0a1b      	lsrs	r3, r3, #8
 8004186:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8004188:	89bb      	ldrh	r3, [r7, #12]
 800418a:	021b      	lsls	r3, r3, #8
 800418c:	b29b      	uxth	r3, r3
 800418e:	b21a      	sxth	r2, r3
 8004190:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004194:	4313      	orrs	r3, r2
 8004196:	b21b      	sxth	r3, r3
 8004198:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 800419a:	89fb      	ldrh	r3, [r7, #14]
 800419c:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 800419e:	89bb      	ldrh	r3, [r7, #12]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	2000215c 	.word	0x2000215c

080041ac <AUDIO_IO_Delay>:
/**
  * @brief  AUDIO Codec delay
  * @param  Delay: Delay in ms
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 fad9 	bl	800476c <HAL_Delay>
}
 80041ba:	bf00      	nop
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
	...

080041c4 <BSP_AUDIO_OUT_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{ 
 80041c4:	b590      	push	{r4, r7, lr}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	4603      	mov	r3, r0
 80041cc:	603a      	str	r2, [r7, #0]
 80041ce:	80fb      	strh	r3, [r7, #6]
 80041d0:	460b      	mov	r3, r1
 80041d2:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	73fb      	strb	r3, [r7, #15]
  uint32_t deviceid = 0x00;
 80041d8:	2300      	movs	r3, #0
 80041da:	60bb      	str	r3, [r7, #8]

  /* Disable SAI */
  SAIx_Out_DeInit();
 80041dc:	f000 fa4c 	bl	8004678 <SAIx_Out_DeInit>

  /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 80041e0:	2200      	movs	r2, #0
 80041e2:	6839      	ldr	r1, [r7, #0]
 80041e4:	481c      	ldr	r0, [pc, #112]	; (8004258 <BSP_AUDIO_OUT_Init+0x94>)
 80041e6:	f000 f995 	bl	8004514 <BSP_AUDIO_OUT_ClockConfig>
 
  /* SAI data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to SAI peripheral */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80041ea:	4b1b      	ldr	r3, [pc, #108]	; (8004258 <BSP_AUDIO_OUT_Init+0x94>)
 80041ec:	4a1b      	ldr	r2, [pc, #108]	; (800425c <BSP_AUDIO_OUT_Init+0x98>)
 80041ee:	601a      	str	r2, [r3, #0]
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 80041f0:	4819      	ldr	r0, [pc, #100]	; (8004258 <BSP_AUDIO_OUT_Init+0x94>)
 80041f2:	f005 ff51 	bl	800a098 <HAL_SAI_GetState>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d103      	bne.n	8004204 <BSP_AUDIO_OUT_Init+0x40>
  {
    /* Init the SAI MSP: this __weak function can be redefined by the application*/
    BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 80041fc:	2100      	movs	r1, #0
 80041fe:	4816      	ldr	r0, [pc, #88]	; (8004258 <BSP_AUDIO_OUT_Init+0x94>)
 8004200:	f000 f8e6 	bl	80043d0 <BSP_AUDIO_OUT_MspInit>
  }
  SAIx_Out_Init(AudioFreq);
 8004204:	6838      	ldr	r0, [r7, #0]
 8004206:	f000 f9c9 	bl	800459c <SAIx_Out_Init>

  /* wm8994 codec initialization */
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 800420a:	4b15      	ldr	r3, [pc, #84]	; (8004260 <BSP_AUDIO_OUT_Init+0x9c>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	2034      	movs	r0, #52	; 0x34
 8004210:	4798      	blx	r3
 8004212:	60b8      	str	r0, [r7, #8]
  
  if((deviceid) == WM8994_ID)
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	f648 1294 	movw	r2, #35220	; 0x8994
 800421a:	4293      	cmp	r3, r2
 800421c:	d109      	bne.n	8004232 <BSP_AUDIO_OUT_Init+0x6e>
  {  
    /* Reset the Codec Registers */
    wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 800421e:	4b10      	ldr	r3, [pc, #64]	; (8004260 <BSP_AUDIO_OUT_Init+0x9c>)
 8004220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004222:	2034      	movs	r0, #52	; 0x34
 8004224:	4798      	blx	r3
    /* Initialize the audio driver structure */
    audio_drv = &wm8994_drv; 
 8004226:	4b0f      	ldr	r3, [pc, #60]	; (8004264 <BSP_AUDIO_OUT_Init+0xa0>)
 8004228:	4a0d      	ldr	r2, [pc, #52]	; (8004260 <BSP_AUDIO_OUT_Init+0x9c>)
 800422a:	601a      	str	r2, [r3, #0]
    ret = AUDIO_OK;
 800422c:	2300      	movs	r3, #0
 800422e:	73fb      	strb	r3, [r7, #15]
 8004230:	e001      	b.n	8004236 <BSP_AUDIO_OUT_Init+0x72>
  }
  else
  {
    ret = AUDIO_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 8004236:	7bfb      	ldrb	r3, [r7, #15]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d107      	bne.n	800424c <BSP_AUDIO_OUT_Init+0x88>
  {
    /* Initialize the codec internal registers */
    audio_drv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 800423c:	4b09      	ldr	r3, [pc, #36]	; (8004264 <BSP_AUDIO_OUT_Init+0xa0>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681c      	ldr	r4, [r3, #0]
 8004242:	797a      	ldrb	r2, [r7, #5]
 8004244:	88f9      	ldrh	r1, [r7, #6]
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2034      	movs	r0, #52	; 0x34
 800424a:	47a0      	blx	r4
  }
 
  return ret;
 800424c:	7bfb      	ldrb	r3, [r7, #15]
}
 800424e:	4618      	mov	r0, r3
 8004250:	3714      	adds	r7, #20
 8004252:	46bd      	mov	sp, r7
 8004254:	bd90      	pop	{r4, r7, pc}
 8004256:	bf00      	nop
 8004258:	2000ac6c 	.word	0x2000ac6c
 800425c:	40015804 	.word	0x40015804
 8004260:	20000010 	.word	0x20000010
 8004264:	2000adac 	.word	0x2000adac

08004268 <BSP_AUDIO_OUT_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data BYTES.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, (uint16_t *)pBuffer, Size) != 0)
 8004272:	4b10      	ldr	r3, [pc, #64]	; (80042b4 <BSP_AUDIO_OUT_Play+0x4c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	b292      	uxth	r2, r2
 800427c:	6879      	ldr	r1, [r7, #4]
 800427e:	2034      	movs	r0, #52	; 0x34
 8004280:	4798      	blx	r3
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <BSP_AUDIO_OUT_Play+0x24>
  {  
    return AUDIO_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e00f      	b.n	80042ac <BSP_AUDIO_OUT_Play+0x44>
  }
  else
  {
    /* Update the Media layer and enable it for play */  
    HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE));
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004292:	d203      	bcs.n	800429c <BSP_AUDIO_OUT_Play+0x34>
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	085b      	lsrs	r3, r3, #1
 8004298:	b29b      	uxth	r3, r3
 800429a:	e001      	b.n	80042a0 <BSP_AUDIO_OUT_Play+0x38>
 800429c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80042a0:	461a      	mov	r2, r3
 80042a2:	6879      	ldr	r1, [r7, #4]
 80042a4:	4804      	ldr	r0, [pc, #16]	; (80042b8 <BSP_AUDIO_OUT_Play+0x50>)
 80042a6:	f005 fd2d 	bl	8009d04 <HAL_SAI_Transmit_DMA>
    
    return AUDIO_OK;
 80042aa:	2300      	movs	r3, #0
  }
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	2000adac 	.word	0x2000adac
 80042b8:	2000ac6c 	.word	0x2000ac6c

080042bc <BSP_AUDIO_OUT_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically). 
  *                            Then need to reconfigure the Codec after power on.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Stop(uint32_t Option)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Call the Media layer stop function */
  HAL_SAI_DMAStop(&haudio_out_sai);
 80042c4:	480c      	ldr	r0, [pc, #48]	; (80042f8 <BSP_AUDIO_OUT_Stop+0x3c>)
 80042c6:	f005 fc26 	bl	8009b16 <HAL_SAI_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 80042ca:	4b0c      	ldr	r3, [pc, #48]	; (80042fc <BSP_AUDIO_OUT_Stop+0x40>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	6879      	ldr	r1, [r7, #4]
 80042d2:	2034      	movs	r0, #52	; 0x34
 80042d4:	4798      	blx	r3
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <BSP_AUDIO_OUT_Stop+0x24>
  {
    return AUDIO_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e006      	b.n	80042ee <BSP_AUDIO_OUT_Stop+0x32>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d102      	bne.n	80042ec <BSP_AUDIO_OUT_Stop+0x30>
    { 
      /* Wait at least 100us */
      HAL_Delay(1);
 80042e6:	2001      	movs	r0, #1
 80042e8:	f000 fa40 	bl	800476c <HAL_Delay>
    }
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80042ec:	2300      	movs	r3, #0
  }
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	2000ac6c 	.word	0x2000ac6c
 80042fc:	2000adac 	.word	0x2000adac

08004300 <BSP_AUDIO_OUT_SetVolume>:
  * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for 
  *         Mute and 100 for Max volume level).
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_SetVolume(uint8_t Volume)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	4603      	mov	r3, r0
 8004308:	71fb      	strb	r3, [r7, #7]
  /* Call the codec volume control function with converted volume value */
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 800430a:	4b08      	ldr	r3, [pc, #32]	; (800432c <BSP_AUDIO_OUT_SetVolume+0x2c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	79fa      	ldrb	r2, [r7, #7]
 8004312:	4611      	mov	r1, r2
 8004314:	2034      	movs	r0, #52	; 0x34
 8004316:	4798      	blx	r3
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <BSP_AUDIO_OUT_SetVolume+0x22>
  {
    return AUDIO_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e000      	b.n	8004324 <BSP_AUDIO_OUT_SetVolume+0x24>
  }
  else
  {
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8004322:	2300      	movs	r3, #0
  }
}
 8004324:	4618      	mov	r0, r3
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	2000adac 	.word	0x2000adac

08004330 <BSP_AUDIO_OUT_SetAudioFrameSlot>:
  * @note   This API should be called after the BSP_AUDIO_OUT_Init() to adjust the
  *         audio frame slot.
  * @retval None
  */
void BSP_AUDIO_OUT_SetAudioFrameSlot(uint32_t AudioFrameSlot)
{ 
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8004338:	4b0c      	ldr	r3, [pc, #48]	; (800436c <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	4b0b      	ldr	r3, [pc, #44]	; (800436c <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004346:	601a      	str	r2, [r3, #0]
  
  /* Update the SAI audio frame slot configuration */
  haudio_out_sai.SlotInit.SlotActive = AudioFrameSlot;
 8004348:	4a08      	ldr	r2, [pc, #32]	; (800436c <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6613      	str	r3, [r2, #96]	; 0x60
  HAL_SAI_Init(&haudio_out_sai);
 800434e:	4807      	ldr	r0, [pc, #28]	; (800436c <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8004350:	f005 fa3a 	bl	80097c8 <HAL_SAI_Init>
  
  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8004354:	4b05      	ldr	r3, [pc, #20]	; (800436c <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	4b04      	ldr	r3, [pc, #16]	; (800436c <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004362:	601a      	str	r2, [r3, #0]
}
 8004364:	bf00      	nop
 8004366:	3708      	adds	r7, #8
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	2000ac6c 	.word	0x2000ac6c

08004370 <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32f769i_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 8004378:	f7fe f8f6 	bl	8002568 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 800437c:	bf00      	nop
 800437e:	3708      	adds	r7, #8
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32f769i_discovery_audio.h) */
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 800438c:	f7fe f900 	bl	8002590 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 8004390:	bf00      	nop
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a05      	ldr	r2, [pc, #20]	; (80043bc <HAL_SAI_ErrorCallback+0x24>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d102      	bne.n	80043b0 <HAL_SAI_ErrorCallback+0x18>
  {
  BSP_AUDIO_OUT_Error_CallBack();
 80043aa:	f000 f809 	bl	80043c0 <BSP_AUDIO_OUT_Error_CallBack>
  }
  else
  {
    BSP_AUDIO_IN_Error_CallBack();
  }
}
 80043ae:	e001      	b.n	80043b4 <HAL_SAI_ErrorCallback+0x1c>
    BSP_AUDIO_IN_Error_CallBack();
 80043b0:	f000 f978 	bl	80046a4 <BSP_AUDIO_IN_Error_CallBack>
}
 80043b4:	bf00      	nop
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	40015804 	.word	0x40015804

080043c0 <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
}
 80043c4:	bf00      	nop
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
	...

080043d0 <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b08c      	sub	sp, #48	; 0x30
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  
  
  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 80043da:	4b48      	ldr	r3, [pc, #288]	; (80044fc <BSP_AUDIO_OUT_MspInit+0x12c>)
 80043dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043de:	4a47      	ldr	r2, [pc, #284]	; (80044fc <BSP_AUDIO_OUT_MspInit+0x12c>)
 80043e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80043e4:	6453      	str	r3, [r2, #68]	; 0x44
 80043e6:	4b45      	ldr	r3, [pc, #276]	; (80044fc <BSP_AUDIO_OUT_MspInit+0x12c>)
 80043e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ee:	61bb      	str	r3, [r7, #24]
 80043f0:	69bb      	ldr	r3, [r7, #24]
  
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 80043f2:	4b42      	ldr	r3, [pc, #264]	; (80044fc <BSP_AUDIO_OUT_MspInit+0x12c>)
 80043f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f6:	4a41      	ldr	r2, [pc, #260]	; (80044fc <BSP_AUDIO_OUT_MspInit+0x12c>)
 80043f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043fc:	6313      	str	r3, [r2, #48]	; 0x30
 80043fe:	4b3f      	ldr	r3, [pc, #252]	; (80044fc <BSP_AUDIO_OUT_MspInit+0x12c>)
 8004400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004406:	617b      	str	r3, [r7, #20]
 8004408:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SD_FS_CLK_ENABLE();
 800440a:	4b3c      	ldr	r3, [pc, #240]	; (80044fc <BSP_AUDIO_OUT_MspInit+0x12c>)
 800440c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440e:	4a3b      	ldr	r2, [pc, #236]	; (80044fc <BSP_AUDIO_OUT_MspInit+0x12c>)
 8004410:	f043 0310 	orr.w	r3, r3, #16
 8004414:	6313      	str	r3, [r2, #48]	; 0x30
 8004416:	4b39      	ldr	r3, [pc, #228]	; (80044fc <BSP_AUDIO_OUT_MspInit+0x12c>)
 8004418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441a:	f003 0310 	and.w	r3, r3, #16
 800441e:	613b      	str	r3, [r7, #16]
 8004420:	693b      	ldr	r3, [r7, #16]
  
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN | AUDIO_OUT_SAIx_SCK_PIN | AUDIO_OUT_SAIx_SD_PIN;
 8004422:	2370      	movs	r3, #112	; 0x70
 8004424:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004426:	2302      	movs	r3, #2
 8004428:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800442a:	2300      	movs	r3, #0
 800442c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800442e:	2303      	movs	r3, #3
 8004430:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_AF;
 8004432:	2306      	movs	r3, #6
 8004434:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_FS_SCK_GPIO_PORT, &gpio_init_structure);
 8004436:	f107 031c 	add.w	r3, r7, #28
 800443a:	4619      	mov	r1, r3
 800443c:	4830      	ldr	r0, [pc, #192]	; (8004500 <BSP_AUDIO_OUT_MspInit+0x130>)
 800443e:	f001 f873 	bl	8005528 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8004442:	2380      	movs	r3, #128	; 0x80
 8004444:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8004446:	f107 031c 	add.w	r3, r7, #28
 800444a:	4619      	mov	r1, r3
 800444c:	482d      	ldr	r0, [pc, #180]	; (8004504 <BSP_AUDIO_OUT_MspInit+0x134>)
 800444e:	f001 f86b 	bl	8005528 <HAL_GPIO_Init>
  
  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8004452:	4b2a      	ldr	r3, [pc, #168]	; (80044fc <BSP_AUDIO_OUT_MspInit+0x12c>)
 8004454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004456:	4a29      	ldr	r2, [pc, #164]	; (80044fc <BSP_AUDIO_OUT_MspInit+0x12c>)
 8004458:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800445c:	6313      	str	r3, [r2, #48]	; 0x30
 800445e:	4b27      	ldr	r3, [pc, #156]	; (80044fc <BSP_AUDIO_OUT_MspInit+0x12c>)
 8004460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004466:	60fb      	str	r3, [r7, #12]
 8004468:	68fb      	ldr	r3, [r7, #12]
  
  if(hsai->Instance == AUDIO_OUT_SAIx)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a26      	ldr	r2, [pc, #152]	; (8004508 <BSP_AUDIO_OUT_MspInit+0x138>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d137      	bne.n	80044e4 <BSP_AUDIO_OUT_MspInit+0x114>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8004474:	4b25      	ldr	r3, [pc, #148]	; (800450c <BSP_AUDIO_OUT_MspInit+0x13c>)
 8004476:	2200      	movs	r2, #0
 8004478:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800447a:	4b24      	ldr	r3, [pc, #144]	; (800450c <BSP_AUDIO_OUT_MspInit+0x13c>)
 800447c:	2240      	movs	r2, #64	; 0x40
 800447e:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8004480:	4b22      	ldr	r3, [pc, #136]	; (800450c <BSP_AUDIO_OUT_MspInit+0x13c>)
 8004482:	2200      	movs	r2, #0
 8004484:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8004486:	4b21      	ldr	r3, [pc, #132]	; (800450c <BSP_AUDIO_OUT_MspInit+0x13c>)
 8004488:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800448c:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 800448e:	4b1f      	ldr	r3, [pc, #124]	; (800450c <BSP_AUDIO_OUT_MspInit+0x13c>)
 8004490:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004494:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8004496:	4b1d      	ldr	r3, [pc, #116]	; (800450c <BSP_AUDIO_OUT_MspInit+0x13c>)
 8004498:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800449c:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 800449e:	4b1b      	ldr	r3, [pc, #108]	; (800450c <BSP_AUDIO_OUT_MspInit+0x13c>)
 80044a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044a4:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 80044a6:	4b19      	ldr	r3, [pc, #100]	; (800450c <BSP_AUDIO_OUT_MspInit+0x13c>)
 80044a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80044ac:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 80044ae:	4b17      	ldr	r3, [pc, #92]	; (800450c <BSP_AUDIO_OUT_MspInit+0x13c>)
 80044b0:	2204      	movs	r2, #4
 80044b2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80044b4:	4b15      	ldr	r3, [pc, #84]	; (800450c <BSP_AUDIO_OUT_MspInit+0x13c>)
 80044b6:	2203      	movs	r2, #3
 80044b8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80044ba:	4b14      	ldr	r3, [pc, #80]	; (800450c <BSP_AUDIO_OUT_MspInit+0x13c>)
 80044bc:	2200      	movs	r2, #0
 80044be:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80044c0:	4b12      	ldr	r3, [pc, #72]	; (800450c <BSP_AUDIO_OUT_MspInit+0x13c>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 80044c6:	4b11      	ldr	r3, [pc, #68]	; (800450c <BSP_AUDIO_OUT_MspInit+0x13c>)
 80044c8:	4a11      	ldr	r2, [pc, #68]	; (8004510 <BSP_AUDIO_OUT_MspInit+0x140>)
 80044ca:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a0f      	ldr	r2, [pc, #60]	; (800450c <BSP_AUDIO_OUT_MspInit+0x13c>)
 80044d0:	66da      	str	r2, [r3, #108]	; 0x6c
 80044d2:	4a0e      	ldr	r2, [pc, #56]	; (800450c <BSP_AUDIO_OUT_MspInit+0x13c>)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 80044d8:	480c      	ldr	r0, [pc, #48]	; (800450c <BSP_AUDIO_OUT_MspInit+0x13c>)
 80044da:	f000 fc6d 	bl	8004db8 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);
 80044de:	480b      	ldr	r0, [pc, #44]	; (800450c <BSP_AUDIO_OUT_MspInit+0x13c>)
 80044e0:	f000 fbbc 	bl	8004c5c <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80044e4:	2200      	movs	r2, #0
 80044e6:	210e      	movs	r1, #14
 80044e8:	2039      	movs	r0, #57	; 0x39
 80044ea:	f000 fa5e 	bl	80049aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 80044ee:	2039      	movs	r0, #57	; 0x39
 80044f0:	f000 fa77 	bl	80049e2 <HAL_NVIC_EnableIRQ>
}
 80044f4:	bf00      	nop
 80044f6:	3730      	adds	r7, #48	; 0x30
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	40023800 	.word	0x40023800
 8004500:	40021000 	.word	0x40021000
 8004504:	40021800 	.word	0x40021800
 8004508:	40015804 	.word	0x40015804
 800450c:	200021a8 	.word	0x200021a8
 8004510:	40026428 	.word	0x40026428

08004514 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 8004514:	b580      	push	{r7, lr}
 8004516:	b0a8      	sub	sp, #160	; 0xa0
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8004520:	f107 0310 	add.w	r3, r7, #16
 8004524:	4618      	mov	r0, r3
 8004526:	f004 fe95 	bl	8009254 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	f642 3211 	movw	r2, #11025	; 0x2b11
 8004530:	4293      	cmp	r3, r2
 8004532:	d009      	beq.n	8004548 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	f245 6222 	movw	r2, #22050	; 0x5622
 800453a:	4293      	cmp	r3, r2
 800453c:	d004      	beq.n	8004548 <BSP_AUDIO_OUT_ClockConfig+0x34>
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	f64a 4244 	movw	r2, #44100	; 0xac44
 8004544:	4293      	cmp	r3, r2
 8004546:	d112      	bne.n	800456e <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLSAI prescalers */
    /* PLLSAI_VCO: VCO_429M 
    SAI_CLK(first level) = PLLSAI_VCO/PLLSAIQ = 429/2 = 214.5 Mhz
    SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ = 214.5/19 = 11.289 Mhz */ 
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8004548:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800454c:	613b      	str	r3, [r7, #16]
    rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 800454e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004552:	64fb      	str	r3, [r7, #76]	; 0x4c
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8004554:	f240 13ad 	movw	r3, #429	; 0x1ad
 8004558:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 800455a:	2302      	movs	r3, #2
 800455c:	61fb      	str	r3, [r7, #28]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 800455e:	2313      	movs	r3, #19
 8004560:	637b      	str	r3, [r7, #52]	; 0x34
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8004562:	f107 0310 	add.w	r3, r7, #16
 8004566:	4618      	mov	r0, r3
 8004568:	f004 fa4e 	bl	8008a08 <HAL_RCCEx_PeriphCLKConfig>
 800456c:	e011      	b.n	8004592 <BSP_AUDIO_OUT_ClockConfig+0x7e>
  {
    /* SAI clock config 
    PLLSAI_VCO: VCO_344M 
    SAI_CLK(first level) = PLLSAI_VCO/PLLSAIQ = 344/7 = 49.142 Mhz 
    SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ = 49.142/1 = 49.142 Mhz */  
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800456e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004572:	613b      	str	r3, [r7, #16]
    rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 8004574:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004578:	64fb      	str	r3, [r7, #76]	; 0x4c
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344; 
 800457a:	f44f 73ac 	mov.w	r3, #344	; 0x158
 800457e:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7; 
 8004580:	2307      	movs	r3, #7
 8004582:	61fb      	str	r3, [r7, #28]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;      
 8004584:	2301      	movs	r3, #1
 8004586:	637b      	str	r3, [r7, #52]	; 0x34
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8004588:	f107 0310 	add.w	r3, r7, #16
 800458c:	4618      	mov	r0, r3
 800458e:	f004 fa3b 	bl	8008a08 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 8004592:	bf00      	nop
 8004594:	37a0      	adds	r7, #160	; 0xa0
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
	...

0800459c <SAIx_Out_Init>:
  * @note   The default SlotActive configuration is set to CODEC_AUDIOFRAME_SLOT_0123 
  *         and user can update this configuration using 
  * @retval None
  */
static void SAIx_Out_Init(uint32_t AudioFreq)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80045a4:	4b32      	ldr	r3, [pc, #200]	; (8004670 <SAIx_Out_Init+0xd4>)
 80045a6:	4a33      	ldr	r2, [pc, #204]	; (8004674 <SAIx_Out_Init+0xd8>)
 80045a8:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80045aa:	4b31      	ldr	r3, [pc, #196]	; (8004670 <SAIx_Out_Init+0xd4>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	4b2f      	ldr	r3, [pc, #188]	; (8004670 <SAIx_Out_Init+0xd4>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80045b8:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x 
  LSBFirst: Disabled 
  DataSize: 16 */
  haudio_out_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 80045ba:	4b2d      	ldr	r3, [pc, #180]	; (8004670 <SAIx_Out_Init+0xd4>)
 80045bc:	2200      	movs	r2, #0
 80045be:	625a      	str	r2, [r3, #36]	; 0x24
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 80045c0:	4a2b      	ldr	r2, [pc, #172]	; (8004670 <SAIx_Out_Init+0xd4>)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 80045c6:	4b2a      	ldr	r3, [pc, #168]	; (8004670 <SAIx_Out_Init+0xd4>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	605a      	str	r2, [r3, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 80045cc:	4b28      	ldr	r3, [pc, #160]	; (8004670 <SAIx_Out_Init+0xd4>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 80045d2:	4b27      	ldr	r3, [pc, #156]	; (8004670 <SAIx_Out_Init+0xd4>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 80045d8:	4b25      	ldr	r3, [pc, #148]	; (8004670 <SAIx_Out_Init+0xd4>)
 80045da:	2280      	movs	r2, #128	; 0x80
 80045dc:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80045de:	4b24      	ldr	r3, [pc, #144]	; (8004670 <SAIx_Out_Init+0xd4>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80045e4:	4b22      	ldr	r3, [pc, #136]	; (8004670 <SAIx_Out_Init+0xd4>)
 80045e6:	2201      	movs	r2, #1
 80045e8:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 80045ea:	4b21      	ldr	r3, [pc, #132]	; (8004670 <SAIx_Out_Init+0xd4>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 80045f0:	4b1f      	ldr	r3, [pc, #124]	; (8004670 <SAIx_Out_Init+0xd4>)
 80045f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80045f6:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80045f8:	4b1d      	ldr	r3, [pc, #116]	; (8004670 <SAIx_Out_Init+0xd4>)
 80045fa:	2201      	movs	r2, #1
 80045fc:	619a      	str	r2, [r3, #24]
  haudio_out_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 80045fe:	4b1c      	ldr	r3, [pc, #112]	; (8004670 <SAIx_Out_Init+0xd4>)
 8004600:	2200      	movs	r2, #0
 8004602:	60da      	str	r2, [r3, #12]
  haudio_out_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 8004604:	4b1a      	ldr	r3, [pc, #104]	; (8004670 <SAIx_Out_Init+0xd4>)
 8004606:	2200      	movs	r2, #0
 8004608:	629a      	str	r2, [r3, #40]	; 0x28
  haudio_out_sai.Init.TriState       = SAI_OUTPUT_NOTRELEASED;
 800460a:	4b19      	ldr	r3, [pc, #100]	; (8004670 <SAIx_Out_Init+0xd4>)
 800460c:	2200      	movs	r2, #0
 800460e:	62da      	str	r2, [r3, #44]	; 0x2c
  haudio_out_sai.Init.Mckdiv         = 0;
 8004610:	4b17      	ldr	r3, [pc, #92]	; (8004670 <SAIx_Out_Init+0xd4>)
 8004612:	2200      	movs	r2, #0
 8004614:	621a      	str	r2, [r3, #32]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */ 
  haudio_out_sai.FrameInit.FrameLength = 128; 
 8004616:	4b16      	ldr	r3, [pc, #88]	; (8004670 <SAIx_Out_Init+0xd4>)
 8004618:	2280      	movs	r2, #128	; 0x80
 800461a:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 64;
 800461c:	4b14      	ldr	r3, [pc, #80]	; (8004670 <SAIx_Out_Init+0xd4>)
 800461e:	2240      	movs	r2, #64	; 0x40
 8004620:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8004622:	4b13      	ldr	r3, [pc, #76]	; (8004670 <SAIx_Out_Init+0xd4>)
 8004624:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004628:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800462a:	4b11      	ldr	r3, [pc, #68]	; (8004670 <SAIx_Out_Init+0xd4>)
 800462c:	2200      	movs	r2, #0
 800462e:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8004630:	4b0f      	ldr	r3, [pc, #60]	; (8004670 <SAIx_Out_Init+0xd4>)
 8004632:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004636:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot 
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8004638:	4b0d      	ldr	r3, [pc, #52]	; (8004670 <SAIx_Out_Init+0xd4>)
 800463a:	2200      	movs	r2, #0
 800463c:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800463e:	4b0c      	ldr	r3, [pc, #48]	; (8004670 <SAIx_Out_Init+0xd4>)
 8004640:	2200      	movs	r2, #0
 8004642:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4; 
 8004644:	4b0a      	ldr	r3, [pc, #40]	; (8004670 <SAIx_Out_Init+0xd4>)
 8004646:	2204      	movs	r2, #4
 8004648:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
 800464a:	4b09      	ldr	r3, [pc, #36]	; (8004670 <SAIx_Out_Init+0xd4>)
 800464c:	220f      	movs	r2, #15
 800464e:	661a      	str	r2, [r3, #96]	; 0x60

  HAL_SAI_Init(&haudio_out_sai);
 8004650:	4807      	ldr	r0, [pc, #28]	; (8004670 <SAIx_Out_Init+0xd4>)
 8004652:	f005 f8b9 	bl	80097c8 <HAL_SAI_Init>
  
  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8004656:	4b06      	ldr	r3, [pc, #24]	; (8004670 <SAIx_Out_Init+0xd4>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	4b04      	ldr	r3, [pc, #16]	; (8004670 <SAIx_Out_Init+0xd4>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004664:	601a      	str	r2, [r3, #0]
}
 8004666:	bf00      	nop
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	2000ac6c 	.word	0x2000ac6c
 8004674:	40015804 	.word	0x40015804

08004678 <SAIx_Out_DeInit>:
/**
  * @brief  Deinitializes the Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_Out_DeInit(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800467c:	4b07      	ldr	r3, [pc, #28]	; (800469c <SAIx_Out_DeInit+0x24>)
 800467e:	4a08      	ldr	r2, [pc, #32]	; (80046a0 <SAIx_Out_DeInit+0x28>)
 8004680:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8004682:	4b06      	ldr	r3, [pc, #24]	; (800469c <SAIx_Out_DeInit+0x24>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	4b04      	ldr	r3, [pc, #16]	; (800469c <SAIx_Out_DeInit+0x24>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004690:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_out_sai);
 8004692:	4802      	ldr	r0, [pc, #8]	; (800469c <SAIx_Out_DeInit+0x24>)
 8004694:	f005 fa0a 	bl	8009aac <HAL_SAI_DeInit>
}
 8004698:	bf00      	nop
 800469a:	bd80      	pop	{r7, pc}
 800469c:	2000ac6c 	.word	0x2000ac6c
 80046a0:	40015804 	.word	0x40015804

080046a4 <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(void)
{   
 80046a4:	b480      	push	{r7}
 80046a6:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 80046a8:	bf00      	nop
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046b6:	2003      	movs	r0, #3
 80046b8:	f000 f96c 	bl	8004994 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80046bc:	2000      	movs	r0, #0
 80046be:	f000 f805 	bl	80046cc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80046c2:	f7fd fa51 	bl	8001b68 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	bd80      	pop	{r7, pc}

080046cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80046d4:	4b12      	ldr	r3, [pc, #72]	; (8004720 <HAL_InitTick+0x54>)
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	4b12      	ldr	r3, [pc, #72]	; (8004724 <HAL_InitTick+0x58>)
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	4619      	mov	r1, r3
 80046de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80046e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 f995 	bl	8004a1a <HAL_SYSTICK_Config>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e00e      	b.n	8004718 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b0f      	cmp	r3, #15
 80046fe:	d80a      	bhi.n	8004716 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004700:	2200      	movs	r2, #0
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	f04f 30ff 	mov.w	r0, #4294967295
 8004708:	f000 f94f 	bl	80049aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800470c:	4a06      	ldr	r2, [pc, #24]	; (8004728 <HAL_InitTick+0x5c>)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004712:	2300      	movs	r3, #0
 8004714:	e000      	b.n	8004718 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
}
 8004718:	4618      	mov	r0, r3
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	20000000 	.word	0x20000000
 8004724:	2000005c 	.word	0x2000005c
 8004728:	20000058 	.word	0x20000058

0800472c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800472c:	b480      	push	{r7}
 800472e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004730:	4b06      	ldr	r3, [pc, #24]	; (800474c <HAL_IncTick+0x20>)
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	461a      	mov	r2, r3
 8004736:	4b06      	ldr	r3, [pc, #24]	; (8004750 <HAL_IncTick+0x24>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4413      	add	r3, r2
 800473c:	4a04      	ldr	r2, [pc, #16]	; (8004750 <HAL_IncTick+0x24>)
 800473e:	6013      	str	r3, [r2, #0]
}
 8004740:	bf00      	nop
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	2000005c 	.word	0x2000005c
 8004750:	2000aff8 	.word	0x2000aff8

08004754 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004754:	b480      	push	{r7}
 8004756:	af00      	add	r7, sp, #0
  return uwTick;
 8004758:	4b03      	ldr	r3, [pc, #12]	; (8004768 <HAL_GetTick+0x14>)
 800475a:	681b      	ldr	r3, [r3, #0]
}
 800475c:	4618      	mov	r0, r3
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	2000aff8 	.word	0x2000aff8

0800476c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004774:	f7ff ffee 	bl	8004754 <HAL_GetTick>
 8004778:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004784:	d005      	beq.n	8004792 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004786:	4b09      	ldr	r3, [pc, #36]	; (80047ac <HAL_Delay+0x40>)
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	461a      	mov	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4413      	add	r3, r2
 8004790:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004792:	bf00      	nop
 8004794:	f7ff ffde 	bl	8004754 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d8f7      	bhi.n	8004794 <HAL_Delay+0x28>
  {
  }
}
 80047a4:	bf00      	nop
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	2000005c 	.word	0x2000005c

080047b0 <__NVIC_SetPriorityGrouping>:
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f003 0307 	and.w	r3, r3, #7
 80047be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047c0:	4b0b      	ldr	r3, [pc, #44]	; (80047f0 <__NVIC_SetPriorityGrouping+0x40>)
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80047cc:	4013      	ands	r3, r2
 80047ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80047d8:	4b06      	ldr	r3, [pc, #24]	; (80047f4 <__NVIC_SetPriorityGrouping+0x44>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047de:	4a04      	ldr	r2, [pc, #16]	; (80047f0 <__NVIC_SetPriorityGrouping+0x40>)
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	60d3      	str	r3, [r2, #12]
}
 80047e4:	bf00      	nop
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr
 80047f0:	e000ed00 	.word	0xe000ed00
 80047f4:	05fa0000 	.word	0x05fa0000

080047f8 <__NVIC_GetPriorityGrouping>:
{
 80047f8:	b480      	push	{r7}
 80047fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047fc:	4b04      	ldr	r3, [pc, #16]	; (8004810 <__NVIC_GetPriorityGrouping+0x18>)
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	0a1b      	lsrs	r3, r3, #8
 8004802:	f003 0307 	and.w	r3, r3, #7
}
 8004806:	4618      	mov	r0, r3
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	e000ed00 	.word	0xe000ed00

08004814 <__NVIC_EnableIRQ>:
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	4603      	mov	r3, r0
 800481c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800481e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004822:	2b00      	cmp	r3, #0
 8004824:	db0b      	blt.n	800483e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004826:	79fb      	ldrb	r3, [r7, #7]
 8004828:	f003 021f 	and.w	r2, r3, #31
 800482c:	4907      	ldr	r1, [pc, #28]	; (800484c <__NVIC_EnableIRQ+0x38>)
 800482e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004832:	095b      	lsrs	r3, r3, #5
 8004834:	2001      	movs	r0, #1
 8004836:	fa00 f202 	lsl.w	r2, r0, r2
 800483a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	e000e100 	.word	0xe000e100

08004850 <__NVIC_DisableIRQ>:
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	4603      	mov	r3, r0
 8004858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800485a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800485e:	2b00      	cmp	r3, #0
 8004860:	db10      	blt.n	8004884 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004862:	79fb      	ldrb	r3, [r7, #7]
 8004864:	f003 021f 	and.w	r2, r3, #31
 8004868:	4909      	ldr	r1, [pc, #36]	; (8004890 <__NVIC_DisableIRQ+0x40>)
 800486a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800486e:	095b      	lsrs	r3, r3, #5
 8004870:	2001      	movs	r0, #1
 8004872:	fa00 f202 	lsl.w	r2, r0, r2
 8004876:	3320      	adds	r3, #32
 8004878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800487c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004880:	f3bf 8f6f 	isb	sy
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	e000e100 	.word	0xe000e100

08004894 <__NVIC_SetPriority>:
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	4603      	mov	r3, r0
 800489c:	6039      	str	r1, [r7, #0]
 800489e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	db0a      	blt.n	80048be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	b2da      	uxtb	r2, r3
 80048ac:	490c      	ldr	r1, [pc, #48]	; (80048e0 <__NVIC_SetPriority+0x4c>)
 80048ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048b2:	0112      	lsls	r2, r2, #4
 80048b4:	b2d2      	uxtb	r2, r2
 80048b6:	440b      	add	r3, r1
 80048b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80048bc:	e00a      	b.n	80048d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	4908      	ldr	r1, [pc, #32]	; (80048e4 <__NVIC_SetPriority+0x50>)
 80048c4:	79fb      	ldrb	r3, [r7, #7]
 80048c6:	f003 030f 	and.w	r3, r3, #15
 80048ca:	3b04      	subs	r3, #4
 80048cc:	0112      	lsls	r2, r2, #4
 80048ce:	b2d2      	uxtb	r2, r2
 80048d0:	440b      	add	r3, r1
 80048d2:	761a      	strb	r2, [r3, #24]
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr
 80048e0:	e000e100 	.word	0xe000e100
 80048e4:	e000ed00 	.word	0xe000ed00

080048e8 <NVIC_EncodePriority>:
{
 80048e8:	b480      	push	{r7}
 80048ea:	b089      	sub	sp, #36	; 0x24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f003 0307 	and.w	r3, r3, #7
 80048fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	f1c3 0307 	rsb	r3, r3, #7
 8004902:	2b04      	cmp	r3, #4
 8004904:	bf28      	it	cs
 8004906:	2304      	movcs	r3, #4
 8004908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	3304      	adds	r3, #4
 800490e:	2b06      	cmp	r3, #6
 8004910:	d902      	bls.n	8004918 <NVIC_EncodePriority+0x30>
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	3b03      	subs	r3, #3
 8004916:	e000      	b.n	800491a <NVIC_EncodePriority+0x32>
 8004918:	2300      	movs	r3, #0
 800491a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800491c:	f04f 32ff 	mov.w	r2, #4294967295
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	fa02 f303 	lsl.w	r3, r2, r3
 8004926:	43da      	mvns	r2, r3
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	401a      	ands	r2, r3
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004930:	f04f 31ff 	mov.w	r1, #4294967295
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	fa01 f303 	lsl.w	r3, r1, r3
 800493a:	43d9      	mvns	r1, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004940:	4313      	orrs	r3, r2
}
 8004942:	4618      	mov	r0, r3
 8004944:	3724      	adds	r7, #36	; 0x24
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
	...

08004950 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	3b01      	subs	r3, #1
 800495c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004960:	d301      	bcc.n	8004966 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004962:	2301      	movs	r3, #1
 8004964:	e00f      	b.n	8004986 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004966:	4a0a      	ldr	r2, [pc, #40]	; (8004990 <SysTick_Config+0x40>)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	3b01      	subs	r3, #1
 800496c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800496e:	210f      	movs	r1, #15
 8004970:	f04f 30ff 	mov.w	r0, #4294967295
 8004974:	f7ff ff8e 	bl	8004894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004978:	4b05      	ldr	r3, [pc, #20]	; (8004990 <SysTick_Config+0x40>)
 800497a:	2200      	movs	r2, #0
 800497c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800497e:	4b04      	ldr	r3, [pc, #16]	; (8004990 <SysTick_Config+0x40>)
 8004980:	2207      	movs	r2, #7
 8004982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3708      	adds	r7, #8
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	e000e010 	.word	0xe000e010

08004994 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f7ff ff07 	bl	80047b0 <__NVIC_SetPriorityGrouping>
}
 80049a2:	bf00      	nop
 80049a4:	3708      	adds	r7, #8
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b086      	sub	sp, #24
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	4603      	mov	r3, r0
 80049b2:	60b9      	str	r1, [r7, #8]
 80049b4:	607a      	str	r2, [r7, #4]
 80049b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80049b8:	2300      	movs	r3, #0
 80049ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80049bc:	f7ff ff1c 	bl	80047f8 <__NVIC_GetPriorityGrouping>
 80049c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	68b9      	ldr	r1, [r7, #8]
 80049c6:	6978      	ldr	r0, [r7, #20]
 80049c8:	f7ff ff8e 	bl	80048e8 <NVIC_EncodePriority>
 80049cc:	4602      	mov	r2, r0
 80049ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049d2:	4611      	mov	r1, r2
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7ff ff5d 	bl	8004894 <__NVIC_SetPriority>
}
 80049da:	bf00      	nop
 80049dc:	3718      	adds	r7, #24
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b082      	sub	sp, #8
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	4603      	mov	r3, r0
 80049ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7ff ff0f 	bl	8004814 <__NVIC_EnableIRQ>
}
 80049f6:	bf00      	nop
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b082      	sub	sp, #8
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	4603      	mov	r3, r0
 8004a06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7ff ff1f 	bl	8004850 <__NVIC_DisableIRQ>
}
 8004a12:	bf00      	nop
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b082      	sub	sp, #8
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7ff ff94 	bl	8004950 <SysTick_Config>
 8004a28:	4603      	mov	r3, r0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3708      	adds	r7, #8
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
	...

08004a34 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e0ac      	b.n	8004ba0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
  /* Check that channel has not been already initialized */
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 f8b2 	bl	8004bb4 <DFSDM_GetChannelFromInstance>
 8004a50:	4602      	mov	r2, r0
 8004a52:	4b55      	ldr	r3, [pc, #340]	; (8004ba8 <HAL_DFSDM_ChannelInit+0x174>)
 8004a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d001      	beq.n	8004a60 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e09f      	b.n	8004ba0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f7fd f8a5 	bl	8001bb0 <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8004a66:	4b51      	ldr	r3, [pc, #324]	; (8004bac <HAL_DFSDM_ChannelInit+0x178>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	4a4f      	ldr	r2, [pc, #316]	; (8004bac <HAL_DFSDM_ChannelInit+0x178>)
 8004a6e:	6013      	str	r3, [r2, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(v_dfsdm1ChannelCounter == 1)
 8004a70:	4b4e      	ldr	r3, [pc, #312]	; (8004bac <HAL_DFSDM_ChannelInit+0x178>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d125      	bne.n	8004ac4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004a78:	4b4d      	ldr	r3, [pc, #308]	; (8004bb0 <HAL_DFSDM_ChannelInit+0x17c>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a4c      	ldr	r2, [pc, #304]	; (8004bb0 <HAL_DFSDM_ChannelInit+0x17c>)
 8004a7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a82:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004a84:	4b4a      	ldr	r3, [pc, #296]	; (8004bb0 <HAL_DFSDM_ChannelInit+0x17c>)
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	4948      	ldr	r1, [pc, #288]	; (8004bb0 <HAL_DFSDM_ChannelInit+0x17c>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	600b      	str	r3, [r1, #0]
    
    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8004a92:	4b47      	ldr	r3, [pc, #284]	; (8004bb0 <HAL_DFSDM_ChannelInit+0x17c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a46      	ldr	r2, [pc, #280]	; (8004bb0 <HAL_DFSDM_ChannelInit+0x17c>)
 8004a98:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8004a9c:	6013      	str	r3, [r2, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	791b      	ldrb	r3, [r3, #4]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d108      	bne.n	8004ab8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) << 
 8004aa6:	4b42      	ldr	r3, [pc, #264]	; (8004bb0 <HAL_DFSDM_ChannelInit+0x17c>)
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	041b      	lsls	r3, r3, #16
 8004ab2:	493f      	ldr	r1, [pc, #252]	; (8004bb0 <HAL_DFSDM_ChannelInit+0x17c>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004ab8:	4b3d      	ldr	r3, [pc, #244]	; (8004bb0 <HAL_DFSDM_ChannelInit+0x17c>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a3c      	ldr	r2, [pc, #240]	; (8004bb0 <HAL_DFSDM_ChannelInit+0x17c>)
 8004abe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ac2:	6013      	str	r3, [r2, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8004ad2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6819      	ldr	r1, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8004ae2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8004ae8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f022 020f 	bic.w	r2, r2, #15
 8004b00:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	6819      	ldr	r1, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8004b10:	431a      	orrs	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8004b28:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	6899      	ldr	r1, [r3, #8]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f002 0207 	and.w	r2, r2, #7
 8004b54:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6859      	ldr	r1, [r3, #4]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b60:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b66:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8004b68:	431a      	orrs	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b80:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 f810 	bl	8004bb4 <DFSDM_GetChannelFromInstance>
 8004b94:	4601      	mov	r1, r0
 8004b96:	4a04      	ldr	r2, [pc, #16]	; (8004ba8 <HAL_DFSDM_ChannelInit+0x174>)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3708      	adds	r7, #8
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	2000220c 	.word	0x2000220c
 8004bac:	20002208 	.word	0x20002208
 8004bb0:	40017400 	.word	0x40017400

08004bb4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  uint32_t channel = 0xFF;
 8004bbc:	23ff      	movs	r3, #255	; 0xff
 8004bbe:	60fb      	str	r3, [r7, #12]
  
  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a1e      	ldr	r2, [pc, #120]	; (8004c3c <DFSDM_GetChannelFromInstance+0x88>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d102      	bne.n	8004bce <DFSDM_GetChannelFromInstance+0x1a>
  {
    channel = 0;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	60fb      	str	r3, [r7, #12]
 8004bcc:	e02f      	b.n	8004c2e <DFSDM_GetChannelFromInstance+0x7a>
  }
  else if(Instance == DFSDM1_Channel1)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a1b      	ldr	r2, [pc, #108]	; (8004c40 <DFSDM_GetChannelFromInstance+0x8c>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d102      	bne.n	8004bdc <DFSDM_GetChannelFromInstance+0x28>
  {
    channel = 1;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	60fb      	str	r3, [r7, #12]
 8004bda:	e028      	b.n	8004c2e <DFSDM_GetChannelFromInstance+0x7a>
  }
  else if(Instance == DFSDM1_Channel2)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a19      	ldr	r2, [pc, #100]	; (8004c44 <DFSDM_GetChannelFromInstance+0x90>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d102      	bne.n	8004bea <DFSDM_GetChannelFromInstance+0x36>
  {
    channel = 2;
 8004be4:	2302      	movs	r3, #2
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	e021      	b.n	8004c2e <DFSDM_GetChannelFromInstance+0x7a>
  }
  else if(Instance == DFSDM1_Channel3)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a16      	ldr	r2, [pc, #88]	; (8004c48 <DFSDM_GetChannelFromInstance+0x94>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d102      	bne.n	8004bf8 <DFSDM_GetChannelFromInstance+0x44>
  {
    channel = 3;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	60fb      	str	r3, [r7, #12]
 8004bf6:	e01a      	b.n	8004c2e <DFSDM_GetChannelFromInstance+0x7a>
  }
  else if(Instance == DFSDM1_Channel4)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a14      	ldr	r2, [pc, #80]	; (8004c4c <DFSDM_GetChannelFromInstance+0x98>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d102      	bne.n	8004c06 <DFSDM_GetChannelFromInstance+0x52>
  {
    channel = 4;
 8004c00:	2304      	movs	r3, #4
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	e013      	b.n	8004c2e <DFSDM_GetChannelFromInstance+0x7a>
  }
  else if(Instance == DFSDM1_Channel5)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a11      	ldr	r2, [pc, #68]	; (8004c50 <DFSDM_GetChannelFromInstance+0x9c>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d102      	bne.n	8004c14 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 5;
 8004c0e:	2305      	movs	r3, #5
 8004c10:	60fb      	str	r3, [r7, #12]
 8004c12:	e00c      	b.n	8004c2e <DFSDM_GetChannelFromInstance+0x7a>
  }
  else if(Instance == DFSDM1_Channel6)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a0f      	ldr	r2, [pc, #60]	; (8004c54 <DFSDM_GetChannelFromInstance+0xa0>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d102      	bne.n	8004c22 <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 6;
 8004c1c:	2306      	movs	r3, #6
 8004c1e:	60fb      	str	r3, [r7, #12]
 8004c20:	e005      	b.n	8004c2e <DFSDM_GetChannelFromInstance+0x7a>
  }
  else if(Instance == DFSDM1_Channel7)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a0c      	ldr	r2, [pc, #48]	; (8004c58 <DFSDM_GetChannelFromInstance+0xa4>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d101      	bne.n	8004c2e <DFSDM_GetChannelFromInstance+0x7a>
  {
    channel = 7;
 8004c2a:	2307      	movs	r3, #7
 8004c2c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3714      	adds	r7, #20
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr
 8004c3c:	40017400 	.word	0x40017400
 8004c40:	40017420 	.word	0x40017420
 8004c44:	40017440 	.word	0x40017440
 8004c48:	40017460 	.word	0x40017460
 8004c4c:	40017480 	.word	0x40017480
 8004c50:	400174a0 	.word	0x400174a0
 8004c54:	400174c0 	.word	0x400174c0
 8004c58:	400174e0 	.word	0x400174e0

08004c5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004c64:	2300      	movs	r3, #0
 8004c66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004c68:	f7ff fd74 	bl	8004754 <HAL_GetTick>
 8004c6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d101      	bne.n	8004c78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e099      	b.n	8004dac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2202      	movs	r2, #2
 8004c84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f022 0201 	bic.w	r2, r2, #1
 8004c96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c98:	e00f      	b.n	8004cba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c9a:	f7ff fd5b 	bl	8004754 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	2b05      	cmp	r3, #5
 8004ca6:	d908      	bls.n	8004cba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2220      	movs	r2, #32
 8004cac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2203      	movs	r2, #3
 8004cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e078      	b.n	8004dac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1e8      	bne.n	8004c9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	4b38      	ldr	r3, [pc, #224]	; (8004db4 <HAL_DMA_Init+0x158>)
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ce6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a1b      	ldr	r3, [r3, #32]
 8004d04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	2b04      	cmp	r3, #4
 8004d12:	d107      	bne.n	8004d24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	f023 0307 	bic.w	r3, r3, #7
 8004d3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	2b04      	cmp	r3, #4
 8004d4c:	d117      	bne.n	8004d7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00e      	beq.n	8004d7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 fb67 	bl	8005434 <DMA_CheckFifoParam>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d008      	beq.n	8004d7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2240      	movs	r2, #64	; 0x40
 8004d70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e016      	b.n	8004dac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 fb1e 	bl	80053c8 <DMA_CalcBaseAndBitshift>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d94:	223f      	movs	r2, #63	; 0x3f
 8004d96:	409a      	lsls	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3718      	adds	r7, #24
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	e010803f 	.word	0xe010803f

08004db8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e050      	b.n	8004e6c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d101      	bne.n	8004dda <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	e048      	b.n	8004e6c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f022 0201 	bic.w	r2, r2, #1
 8004de8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2200      	movs	r2, #0
 8004df0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2200      	movs	r2, #0
 8004df8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2200      	movs	r2, #0
 8004e08:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2221      	movs	r2, #33	; 0x21
 8004e18:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 fad4 	bl	80053c8 <DMA_CalcBaseAndBitshift>
 8004e20:	4603      	mov	r3, r0
 8004e22:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e28:	223f      	movs	r2, #63	; 0x3f
 8004e2a:	409a      	lsls	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
 8004e80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e82:	2300      	movs	r3, #0
 8004e84:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e8a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d101      	bne.n	8004e9a <HAL_DMA_Start_IT+0x26>
 8004e96:	2302      	movs	r3, #2
 8004e98:	e048      	b.n	8004f2c <HAL_DMA_Start_IT+0xb8>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d137      	bne.n	8004f1e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2202      	movs	r2, #2
 8004eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	68b9      	ldr	r1, [r7, #8]
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f000 fa52 	bl	800536c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ecc:	223f      	movs	r2, #63	; 0x3f
 8004ece:	409a      	lsls	r2, r3
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f042 0216 	orr.w	r2, r2, #22
 8004ee2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	695a      	ldr	r2, [r3, #20]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ef2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d007      	beq.n	8004f0c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f042 0208 	orr.w	r2, r2, #8
 8004f0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f042 0201 	orr.w	r2, r2, #1
 8004f1a:	601a      	str	r2, [r3, #0]
 8004f1c:	e005      	b.n	8004f2a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004f26:	2302      	movs	r3, #2
 8004f28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3718      	adds	r7, #24
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f40:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004f42:	f7ff fc07 	bl	8004754 <HAL_GetTick>
 8004f46:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d008      	beq.n	8004f66 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2280      	movs	r2, #128	; 0x80
 8004f58:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e052      	b.n	800500c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f022 0216 	bic.w	r2, r2, #22
 8004f74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	695a      	ldr	r2, [r3, #20]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f84:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d103      	bne.n	8004f96 <HAL_DMA_Abort+0x62>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d007      	beq.n	8004fa6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 0208 	bic.w	r2, r2, #8
 8004fa4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 0201 	bic.w	r2, r2, #1
 8004fb4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fb6:	e013      	b.n	8004fe0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004fb8:	f7ff fbcc 	bl	8004754 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b05      	cmp	r3, #5
 8004fc4:	d90c      	bls.n	8004fe0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2203      	movs	r2, #3
 8004fd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e015      	b.n	800500c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1e4      	bne.n	8004fb8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ff2:	223f      	movs	r2, #63	; 0x3f
 8004ff4:	409a      	lsls	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d004      	beq.n	8005032 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2280      	movs	r2, #128	; 0x80
 800502c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e00c      	b.n	800504c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2205      	movs	r2, #5
 8005036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f022 0201 	bic.w	r2, r2, #1
 8005048:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005060:	2300      	movs	r3, #0
 8005062:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005064:	4b92      	ldr	r3, [pc, #584]	; (80052b0 <HAL_DMA_IRQHandler+0x258>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a92      	ldr	r2, [pc, #584]	; (80052b4 <HAL_DMA_IRQHandler+0x25c>)
 800506a:	fba2 2303 	umull	r2, r3, r2, r3
 800506e:	0a9b      	lsrs	r3, r3, #10
 8005070:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005076:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005082:	2208      	movs	r2, #8
 8005084:	409a      	lsls	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	4013      	ands	r3, r2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d01a      	beq.n	80050c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0304 	and.w	r3, r3, #4
 8005098:	2b00      	cmp	r3, #0
 800509a:	d013      	beq.n	80050c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f022 0204 	bic.w	r2, r2, #4
 80050aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050b0:	2208      	movs	r2, #8
 80050b2:	409a      	lsls	r2, r3
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050bc:	f043 0201 	orr.w	r2, r3, #1
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050c8:	2201      	movs	r2, #1
 80050ca:	409a      	lsls	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	4013      	ands	r3, r2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d012      	beq.n	80050fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00b      	beq.n	80050fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050e6:	2201      	movs	r2, #1
 80050e8:	409a      	lsls	r2, r3
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f2:	f043 0202 	orr.w	r2, r3, #2
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050fe:	2204      	movs	r2, #4
 8005100:	409a      	lsls	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	4013      	ands	r3, r2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d012      	beq.n	8005130 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00b      	beq.n	8005130 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800511c:	2204      	movs	r2, #4
 800511e:	409a      	lsls	r2, r3
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005128:	f043 0204 	orr.w	r2, r3, #4
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005134:	2210      	movs	r2, #16
 8005136:	409a      	lsls	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	4013      	ands	r3, r2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d043      	beq.n	80051c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0308 	and.w	r3, r3, #8
 800514a:	2b00      	cmp	r3, #0
 800514c:	d03c      	beq.n	80051c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005152:	2210      	movs	r2, #16
 8005154:	409a      	lsls	r2, r3
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d018      	beq.n	800519a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d108      	bne.n	8005188 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517a:	2b00      	cmp	r3, #0
 800517c:	d024      	beq.n	80051c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	4798      	blx	r3
 8005186:	e01f      	b.n	80051c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800518c:	2b00      	cmp	r3, #0
 800518e:	d01b      	beq.n	80051c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	4798      	blx	r3
 8005198:	e016      	b.n	80051c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d107      	bne.n	80051b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 0208 	bic.w	r2, r2, #8
 80051b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d003      	beq.n	80051c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051cc:	2220      	movs	r2, #32
 80051ce:	409a      	lsls	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	4013      	ands	r3, r2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f000 808e 	beq.w	80052f6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0310 	and.w	r3, r3, #16
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 8086 	beq.w	80052f6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ee:	2220      	movs	r2, #32
 80051f0:	409a      	lsls	r2, r3
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b05      	cmp	r3, #5
 8005200:	d136      	bne.n	8005270 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 0216 	bic.w	r2, r2, #22
 8005210:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	695a      	ldr	r2, [r3, #20]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005220:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	2b00      	cmp	r3, #0
 8005228:	d103      	bne.n	8005232 <HAL_DMA_IRQHandler+0x1da>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800522e:	2b00      	cmp	r3, #0
 8005230:	d007      	beq.n	8005242 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f022 0208 	bic.w	r2, r2, #8
 8005240:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005246:	223f      	movs	r2, #63	; 0x3f
 8005248:	409a      	lsls	r2, r3
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005262:	2b00      	cmp	r3, #0
 8005264:	d07d      	beq.n	8005362 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	4798      	blx	r3
        }
        return;
 800526e:	e078      	b.n	8005362 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d01c      	beq.n	80052b8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d108      	bne.n	800529e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005290:	2b00      	cmp	r3, #0
 8005292:	d030      	beq.n	80052f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	4798      	blx	r3
 800529c:	e02b      	b.n	80052f6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d027      	beq.n	80052f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	4798      	blx	r3
 80052ae:	e022      	b.n	80052f6 <HAL_DMA_IRQHandler+0x29e>
 80052b0:	20000000 	.word	0x20000000
 80052b4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10f      	bne.n	80052e6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 0210 	bic.w	r2, r2, #16
 80052d4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d003      	beq.n	80052f6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d032      	beq.n	8005364 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	2b00      	cmp	r3, #0
 8005308:	d022      	beq.n	8005350 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2205      	movs	r2, #5
 800530e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f022 0201 	bic.w	r2, r2, #1
 8005320:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	3301      	adds	r3, #1
 8005326:	60bb      	str	r3, [r7, #8]
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	429a      	cmp	r2, r3
 800532c:	d307      	bcc.n	800533e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0301 	and.w	r3, r3, #1
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1f2      	bne.n	8005322 <HAL_DMA_IRQHandler+0x2ca>
 800533c:	e000      	b.n	8005340 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800533e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005354:	2b00      	cmp	r3, #0
 8005356:	d005      	beq.n	8005364 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	4798      	blx	r3
 8005360:	e000      	b.n	8005364 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005362:	bf00      	nop
    }
  }
}
 8005364:	3718      	adds	r7, #24
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop

0800536c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005388:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	2b40      	cmp	r3, #64	; 0x40
 8005398:	d108      	bne.n	80053ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80053aa:	e007      	b.n	80053bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	60da      	str	r2, [r3, #12]
}
 80053bc:	bf00      	nop
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	3b10      	subs	r3, #16
 80053d8:	4a13      	ldr	r2, [pc, #76]	; (8005428 <DMA_CalcBaseAndBitshift+0x60>)
 80053da:	fba2 2303 	umull	r2, r3, r2, r3
 80053de:	091b      	lsrs	r3, r3, #4
 80053e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80053e2:	4a12      	ldr	r2, [pc, #72]	; (800542c <DMA_CalcBaseAndBitshift+0x64>)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	4413      	add	r3, r2
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	461a      	mov	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2b03      	cmp	r3, #3
 80053f4:	d908      	bls.n	8005408 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	461a      	mov	r2, r3
 80053fc:	4b0c      	ldr	r3, [pc, #48]	; (8005430 <DMA_CalcBaseAndBitshift+0x68>)
 80053fe:	4013      	ands	r3, r2
 8005400:	1d1a      	adds	r2, r3, #4
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	659a      	str	r2, [r3, #88]	; 0x58
 8005406:	e006      	b.n	8005416 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	461a      	mov	r2, r3
 800540e:	4b08      	ldr	r3, [pc, #32]	; (8005430 <DMA_CalcBaseAndBitshift+0x68>)
 8005410:	4013      	ands	r3, r2
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800541a:	4618      	mov	r0, r3
 800541c:	3714      	adds	r7, #20
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	aaaaaaab 	.word	0xaaaaaaab
 800542c:	08012ad8 	.word	0x08012ad8
 8005430:	fffffc00 	.word	0xfffffc00

08005434 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800543c:	2300      	movs	r3, #0
 800543e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005444:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d11f      	bne.n	800548e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	2b03      	cmp	r3, #3
 8005452:	d855      	bhi.n	8005500 <DMA_CheckFifoParam+0xcc>
 8005454:	a201      	add	r2, pc, #4	; (adr r2, 800545c <DMA_CheckFifoParam+0x28>)
 8005456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545a:	bf00      	nop
 800545c:	0800546d 	.word	0x0800546d
 8005460:	0800547f 	.word	0x0800547f
 8005464:	0800546d 	.word	0x0800546d
 8005468:	08005501 	.word	0x08005501
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d045      	beq.n	8005504 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800547c:	e042      	b.n	8005504 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005482:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005486:	d13f      	bne.n	8005508 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800548c:	e03c      	b.n	8005508 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005496:	d121      	bne.n	80054dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	2b03      	cmp	r3, #3
 800549c:	d836      	bhi.n	800550c <DMA_CheckFifoParam+0xd8>
 800549e:	a201      	add	r2, pc, #4	; (adr r2, 80054a4 <DMA_CheckFifoParam+0x70>)
 80054a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a4:	080054b5 	.word	0x080054b5
 80054a8:	080054bb 	.word	0x080054bb
 80054ac:	080054b5 	.word	0x080054b5
 80054b0:	080054cd 	.word	0x080054cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	73fb      	strb	r3, [r7, #15]
      break;
 80054b8:	e02f      	b.n	800551a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d024      	beq.n	8005510 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054ca:	e021      	b.n	8005510 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80054d4:	d11e      	bne.n	8005514 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80054da:	e01b      	b.n	8005514 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d902      	bls.n	80054e8 <DMA_CheckFifoParam+0xb4>
 80054e2:	2b03      	cmp	r3, #3
 80054e4:	d003      	beq.n	80054ee <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80054e6:	e018      	b.n	800551a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	73fb      	strb	r3, [r7, #15]
      break;
 80054ec:	e015      	b.n	800551a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00e      	beq.n	8005518 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	73fb      	strb	r3, [r7, #15]
      break;
 80054fe:	e00b      	b.n	8005518 <DMA_CheckFifoParam+0xe4>
      break;
 8005500:	bf00      	nop
 8005502:	e00a      	b.n	800551a <DMA_CheckFifoParam+0xe6>
      break;
 8005504:	bf00      	nop
 8005506:	e008      	b.n	800551a <DMA_CheckFifoParam+0xe6>
      break;
 8005508:	bf00      	nop
 800550a:	e006      	b.n	800551a <DMA_CheckFifoParam+0xe6>
      break;
 800550c:	bf00      	nop
 800550e:	e004      	b.n	800551a <DMA_CheckFifoParam+0xe6>
      break;
 8005510:	bf00      	nop
 8005512:	e002      	b.n	800551a <DMA_CheckFifoParam+0xe6>
      break;   
 8005514:	bf00      	nop
 8005516:	e000      	b.n	800551a <DMA_CheckFifoParam+0xe6>
      break;
 8005518:	bf00      	nop
    }
  } 
  
  return status; 
 800551a:	7bfb      	ldrb	r3, [r7, #15]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3714      	adds	r7, #20
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005528:	b480      	push	{r7}
 800552a:	b089      	sub	sp, #36	; 0x24
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005532:	2300      	movs	r3, #0
 8005534:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005536:	2300      	movs	r3, #0
 8005538:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800553a:	2300      	movs	r3, #0
 800553c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800553e:	2300      	movs	r3, #0
 8005540:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005542:	2300      	movs	r3, #0
 8005544:	61fb      	str	r3, [r7, #28]
 8005546:	e175      	b.n	8005834 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005548:	2201      	movs	r2, #1
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	fa02 f303 	lsl.w	r3, r2, r3
 8005550:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	4013      	ands	r3, r2
 800555a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	429a      	cmp	r2, r3
 8005562:	f040 8164 	bne.w	800582e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d00b      	beq.n	8005586 <HAL_GPIO_Init+0x5e>
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	2b02      	cmp	r3, #2
 8005574:	d007      	beq.n	8005586 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800557a:	2b11      	cmp	r3, #17
 800557c:	d003      	beq.n	8005586 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	2b12      	cmp	r3, #18
 8005584:	d130      	bne.n	80055e8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	2203      	movs	r2, #3
 8005592:	fa02 f303 	lsl.w	r3, r2, r3
 8005596:	43db      	mvns	r3, r3
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	4013      	ands	r3, r2
 800559c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	68da      	ldr	r2, [r3, #12]
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	005b      	lsls	r3, r3, #1
 80055a6:	fa02 f303 	lsl.w	r3, r2, r3
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	69ba      	ldr	r2, [r7, #24]
 80055b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80055bc:	2201      	movs	r2, #1
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	fa02 f303 	lsl.w	r3, r2, r3
 80055c4:	43db      	mvns	r3, r3
 80055c6:	69ba      	ldr	r2, [r7, #24]
 80055c8:	4013      	ands	r3, r2
 80055ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	091b      	lsrs	r3, r3, #4
 80055d2:	f003 0201 	and.w	r2, r3, #1
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	fa02 f303 	lsl.w	r3, r2, r3
 80055dc:	69ba      	ldr	r2, [r7, #24]
 80055de:	4313      	orrs	r3, r2
 80055e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	69ba      	ldr	r2, [r7, #24]
 80055e6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	005b      	lsls	r3, r3, #1
 80055f2:	2203      	movs	r2, #3
 80055f4:	fa02 f303 	lsl.w	r3, r2, r3
 80055f8:	43db      	mvns	r3, r3
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	4013      	ands	r3, r2
 80055fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	689a      	ldr	r2, [r3, #8]
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	005b      	lsls	r3, r3, #1
 8005608:	fa02 f303 	lsl.w	r3, r2, r3
 800560c:	69ba      	ldr	r2, [r7, #24]
 800560e:	4313      	orrs	r3, r2
 8005610:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	2b02      	cmp	r3, #2
 800561e:	d003      	beq.n	8005628 <HAL_GPIO_Init+0x100>
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	2b12      	cmp	r3, #18
 8005626:	d123      	bne.n	8005670 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	08da      	lsrs	r2, r3, #3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	3208      	adds	r2, #8
 8005630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	f003 0307 	and.w	r3, r3, #7
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	220f      	movs	r2, #15
 8005640:	fa02 f303 	lsl.w	r3, r2, r3
 8005644:	43db      	mvns	r3, r3
 8005646:	69ba      	ldr	r2, [r7, #24]
 8005648:	4013      	ands	r3, r2
 800564a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	691a      	ldr	r2, [r3, #16]
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	f003 0307 	and.w	r3, r3, #7
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	fa02 f303 	lsl.w	r3, r2, r3
 800565c:	69ba      	ldr	r2, [r7, #24]
 800565e:	4313      	orrs	r3, r2
 8005660:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	08da      	lsrs	r2, r3, #3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	3208      	adds	r2, #8
 800566a:	69b9      	ldr	r1, [r7, #24]
 800566c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	005b      	lsls	r3, r3, #1
 800567a:	2203      	movs	r2, #3
 800567c:	fa02 f303 	lsl.w	r3, r2, r3
 8005680:	43db      	mvns	r3, r3
 8005682:	69ba      	ldr	r2, [r7, #24]
 8005684:	4013      	ands	r3, r2
 8005686:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f003 0203 	and.w	r2, r3, #3
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	005b      	lsls	r3, r3, #1
 8005694:	fa02 f303 	lsl.w	r3, r2, r3
 8005698:	69ba      	ldr	r2, [r7, #24]
 800569a:	4313      	orrs	r3, r2
 800569c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	69ba      	ldr	r2, [r7, #24]
 80056a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 80be 	beq.w	800582e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056b2:	4b65      	ldr	r3, [pc, #404]	; (8005848 <HAL_GPIO_Init+0x320>)
 80056b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056b6:	4a64      	ldr	r2, [pc, #400]	; (8005848 <HAL_GPIO_Init+0x320>)
 80056b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056bc:	6453      	str	r3, [r2, #68]	; 0x44
 80056be:	4b62      	ldr	r3, [pc, #392]	; (8005848 <HAL_GPIO_Init+0x320>)
 80056c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056c6:	60fb      	str	r3, [r7, #12]
 80056c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80056ca:	4a60      	ldr	r2, [pc, #384]	; (800584c <HAL_GPIO_Init+0x324>)
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	089b      	lsrs	r3, r3, #2
 80056d0:	3302      	adds	r3, #2
 80056d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	f003 0303 	and.w	r3, r3, #3
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	220f      	movs	r2, #15
 80056e2:	fa02 f303 	lsl.w	r3, r2, r3
 80056e6:	43db      	mvns	r3, r3
 80056e8:	69ba      	ldr	r2, [r7, #24]
 80056ea:	4013      	ands	r3, r2
 80056ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a57      	ldr	r2, [pc, #348]	; (8005850 <HAL_GPIO_Init+0x328>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d037      	beq.n	8005766 <HAL_GPIO_Init+0x23e>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a56      	ldr	r2, [pc, #344]	; (8005854 <HAL_GPIO_Init+0x32c>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d031      	beq.n	8005762 <HAL_GPIO_Init+0x23a>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a55      	ldr	r2, [pc, #340]	; (8005858 <HAL_GPIO_Init+0x330>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d02b      	beq.n	800575e <HAL_GPIO_Init+0x236>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a54      	ldr	r2, [pc, #336]	; (800585c <HAL_GPIO_Init+0x334>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d025      	beq.n	800575a <HAL_GPIO_Init+0x232>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a53      	ldr	r2, [pc, #332]	; (8005860 <HAL_GPIO_Init+0x338>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d01f      	beq.n	8005756 <HAL_GPIO_Init+0x22e>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a52      	ldr	r2, [pc, #328]	; (8005864 <HAL_GPIO_Init+0x33c>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d019      	beq.n	8005752 <HAL_GPIO_Init+0x22a>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a51      	ldr	r2, [pc, #324]	; (8005868 <HAL_GPIO_Init+0x340>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d013      	beq.n	800574e <HAL_GPIO_Init+0x226>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a50      	ldr	r2, [pc, #320]	; (800586c <HAL_GPIO_Init+0x344>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d00d      	beq.n	800574a <HAL_GPIO_Init+0x222>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a4f      	ldr	r2, [pc, #316]	; (8005870 <HAL_GPIO_Init+0x348>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d007      	beq.n	8005746 <HAL_GPIO_Init+0x21e>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a4e      	ldr	r2, [pc, #312]	; (8005874 <HAL_GPIO_Init+0x34c>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d101      	bne.n	8005742 <HAL_GPIO_Init+0x21a>
 800573e:	2309      	movs	r3, #9
 8005740:	e012      	b.n	8005768 <HAL_GPIO_Init+0x240>
 8005742:	230a      	movs	r3, #10
 8005744:	e010      	b.n	8005768 <HAL_GPIO_Init+0x240>
 8005746:	2308      	movs	r3, #8
 8005748:	e00e      	b.n	8005768 <HAL_GPIO_Init+0x240>
 800574a:	2307      	movs	r3, #7
 800574c:	e00c      	b.n	8005768 <HAL_GPIO_Init+0x240>
 800574e:	2306      	movs	r3, #6
 8005750:	e00a      	b.n	8005768 <HAL_GPIO_Init+0x240>
 8005752:	2305      	movs	r3, #5
 8005754:	e008      	b.n	8005768 <HAL_GPIO_Init+0x240>
 8005756:	2304      	movs	r3, #4
 8005758:	e006      	b.n	8005768 <HAL_GPIO_Init+0x240>
 800575a:	2303      	movs	r3, #3
 800575c:	e004      	b.n	8005768 <HAL_GPIO_Init+0x240>
 800575e:	2302      	movs	r3, #2
 8005760:	e002      	b.n	8005768 <HAL_GPIO_Init+0x240>
 8005762:	2301      	movs	r3, #1
 8005764:	e000      	b.n	8005768 <HAL_GPIO_Init+0x240>
 8005766:	2300      	movs	r3, #0
 8005768:	69fa      	ldr	r2, [r7, #28]
 800576a:	f002 0203 	and.w	r2, r2, #3
 800576e:	0092      	lsls	r2, r2, #2
 8005770:	4093      	lsls	r3, r2
 8005772:	69ba      	ldr	r2, [r7, #24]
 8005774:	4313      	orrs	r3, r2
 8005776:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005778:	4934      	ldr	r1, [pc, #208]	; (800584c <HAL_GPIO_Init+0x324>)
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	089b      	lsrs	r3, r3, #2
 800577e:	3302      	adds	r3, #2
 8005780:	69ba      	ldr	r2, [r7, #24]
 8005782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005786:	4b3c      	ldr	r3, [pc, #240]	; (8005878 <HAL_GPIO_Init+0x350>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	43db      	mvns	r3, r3
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	4013      	ands	r3, r2
 8005794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d003      	beq.n	80057aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80057a2:	69ba      	ldr	r2, [r7, #24]
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80057aa:	4a33      	ldr	r2, [pc, #204]	; (8005878 <HAL_GPIO_Init+0x350>)
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80057b0:	4b31      	ldr	r3, [pc, #196]	; (8005878 <HAL_GPIO_Init+0x350>)
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	43db      	mvns	r3, r3
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	4013      	ands	r3, r2
 80057be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d003      	beq.n	80057d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80057d4:	4a28      	ldr	r2, [pc, #160]	; (8005878 <HAL_GPIO_Init+0x350>)
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80057da:	4b27      	ldr	r3, [pc, #156]	; (8005878 <HAL_GPIO_Init+0x350>)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	43db      	mvns	r3, r3
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	4013      	ands	r3, r2
 80057e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80057f6:	69ba      	ldr	r2, [r7, #24]
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80057fe:	4a1e      	ldr	r2, [pc, #120]	; (8005878 <HAL_GPIO_Init+0x350>)
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005804:	4b1c      	ldr	r3, [pc, #112]	; (8005878 <HAL_GPIO_Init+0x350>)
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	43db      	mvns	r3, r3
 800580e:	69ba      	ldr	r2, [r7, #24]
 8005810:	4013      	ands	r3, r2
 8005812:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d003      	beq.n	8005828 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005820:	69ba      	ldr	r2, [r7, #24]
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	4313      	orrs	r3, r2
 8005826:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005828:	4a13      	ldr	r2, [pc, #76]	; (8005878 <HAL_GPIO_Init+0x350>)
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	3301      	adds	r3, #1
 8005832:	61fb      	str	r3, [r7, #28]
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	2b0f      	cmp	r3, #15
 8005838:	f67f ae86 	bls.w	8005548 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800583c:	bf00      	nop
 800583e:	3724      	adds	r7, #36	; 0x24
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr
 8005848:	40023800 	.word	0x40023800
 800584c:	40013800 	.word	0x40013800
 8005850:	40020000 	.word	0x40020000
 8005854:	40020400 	.word	0x40020400
 8005858:	40020800 	.word	0x40020800
 800585c:	40020c00 	.word	0x40020c00
 8005860:	40021000 	.word	0x40021000
 8005864:	40021400 	.word	0x40021400
 8005868:	40021800 	.word	0x40021800
 800586c:	40021c00 	.word	0x40021c00
 8005870:	40022000 	.word	0x40022000
 8005874:	40022400 	.word	0x40022400
 8005878:	40013c00 	.word	0x40013c00

0800587c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800587c:	b480      	push	{r7}
 800587e:	b087      	sub	sp, #28
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005886:	2300      	movs	r3, #0
 8005888:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800588a:	2300      	movs	r3, #0
 800588c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800588e:	2300      	movs	r3, #0
 8005890:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005892:	2300      	movs	r3, #0
 8005894:	617b      	str	r3, [r7, #20]
 8005896:	e0d9      	b.n	8005a4c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005898:	2201      	movs	r2, #1
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	fa02 f303 	lsl.w	r3, r2, r3
 80058a0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80058a2:	683a      	ldr	r2, [r7, #0]
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	4013      	ands	r3, r2
 80058a8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	f040 80c9 	bne.w	8005a46 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80058b4:	4a6a      	ldr	r2, [pc, #424]	; (8005a60 <HAL_GPIO_DeInit+0x1e4>)
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	089b      	lsrs	r3, r3, #2
 80058ba:	3302      	adds	r3, #2
 80058bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058c0:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	f003 0303 	and.w	r3, r3, #3
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	220f      	movs	r2, #15
 80058cc:	fa02 f303 	lsl.w	r3, r2, r3
 80058d0:	68ba      	ldr	r2, [r7, #8]
 80058d2:	4013      	ands	r3, r2
 80058d4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a62      	ldr	r2, [pc, #392]	; (8005a64 <HAL_GPIO_DeInit+0x1e8>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d037      	beq.n	800594e <HAL_GPIO_DeInit+0xd2>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a61      	ldr	r2, [pc, #388]	; (8005a68 <HAL_GPIO_DeInit+0x1ec>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d031      	beq.n	800594a <HAL_GPIO_DeInit+0xce>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a60      	ldr	r2, [pc, #384]	; (8005a6c <HAL_GPIO_DeInit+0x1f0>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d02b      	beq.n	8005946 <HAL_GPIO_DeInit+0xca>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a5f      	ldr	r2, [pc, #380]	; (8005a70 <HAL_GPIO_DeInit+0x1f4>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d025      	beq.n	8005942 <HAL_GPIO_DeInit+0xc6>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a5e      	ldr	r2, [pc, #376]	; (8005a74 <HAL_GPIO_DeInit+0x1f8>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d01f      	beq.n	800593e <HAL_GPIO_DeInit+0xc2>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a5d      	ldr	r2, [pc, #372]	; (8005a78 <HAL_GPIO_DeInit+0x1fc>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d019      	beq.n	800593a <HAL_GPIO_DeInit+0xbe>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a5c      	ldr	r2, [pc, #368]	; (8005a7c <HAL_GPIO_DeInit+0x200>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d013      	beq.n	8005936 <HAL_GPIO_DeInit+0xba>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a5b      	ldr	r2, [pc, #364]	; (8005a80 <HAL_GPIO_DeInit+0x204>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d00d      	beq.n	8005932 <HAL_GPIO_DeInit+0xb6>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a5a      	ldr	r2, [pc, #360]	; (8005a84 <HAL_GPIO_DeInit+0x208>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d007      	beq.n	800592e <HAL_GPIO_DeInit+0xb2>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a59      	ldr	r2, [pc, #356]	; (8005a88 <HAL_GPIO_DeInit+0x20c>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d101      	bne.n	800592a <HAL_GPIO_DeInit+0xae>
 8005926:	2309      	movs	r3, #9
 8005928:	e012      	b.n	8005950 <HAL_GPIO_DeInit+0xd4>
 800592a:	230a      	movs	r3, #10
 800592c:	e010      	b.n	8005950 <HAL_GPIO_DeInit+0xd4>
 800592e:	2308      	movs	r3, #8
 8005930:	e00e      	b.n	8005950 <HAL_GPIO_DeInit+0xd4>
 8005932:	2307      	movs	r3, #7
 8005934:	e00c      	b.n	8005950 <HAL_GPIO_DeInit+0xd4>
 8005936:	2306      	movs	r3, #6
 8005938:	e00a      	b.n	8005950 <HAL_GPIO_DeInit+0xd4>
 800593a:	2305      	movs	r3, #5
 800593c:	e008      	b.n	8005950 <HAL_GPIO_DeInit+0xd4>
 800593e:	2304      	movs	r3, #4
 8005940:	e006      	b.n	8005950 <HAL_GPIO_DeInit+0xd4>
 8005942:	2303      	movs	r3, #3
 8005944:	e004      	b.n	8005950 <HAL_GPIO_DeInit+0xd4>
 8005946:	2302      	movs	r3, #2
 8005948:	e002      	b.n	8005950 <HAL_GPIO_DeInit+0xd4>
 800594a:	2301      	movs	r3, #1
 800594c:	e000      	b.n	8005950 <HAL_GPIO_DeInit+0xd4>
 800594e:	2300      	movs	r3, #0
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	f002 0203 	and.w	r2, r2, #3
 8005956:	0092      	lsls	r2, r2, #2
 8005958:	4093      	lsls	r3, r2
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	429a      	cmp	r2, r3
 800595e:	d132      	bne.n	80059c6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005960:	4b4a      	ldr	r3, [pc, #296]	; (8005a8c <HAL_GPIO_DeInit+0x210>)
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	43db      	mvns	r3, r3
 8005968:	4948      	ldr	r1, [pc, #288]	; (8005a8c <HAL_GPIO_DeInit+0x210>)
 800596a:	4013      	ands	r3, r2
 800596c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800596e:	4b47      	ldr	r3, [pc, #284]	; (8005a8c <HAL_GPIO_DeInit+0x210>)
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	43db      	mvns	r3, r3
 8005976:	4945      	ldr	r1, [pc, #276]	; (8005a8c <HAL_GPIO_DeInit+0x210>)
 8005978:	4013      	ands	r3, r2
 800597a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800597c:	4b43      	ldr	r3, [pc, #268]	; (8005a8c <HAL_GPIO_DeInit+0x210>)
 800597e:	689a      	ldr	r2, [r3, #8]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	43db      	mvns	r3, r3
 8005984:	4941      	ldr	r1, [pc, #260]	; (8005a8c <HAL_GPIO_DeInit+0x210>)
 8005986:	4013      	ands	r3, r2
 8005988:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800598a:	4b40      	ldr	r3, [pc, #256]	; (8005a8c <HAL_GPIO_DeInit+0x210>)
 800598c:	68da      	ldr	r2, [r3, #12]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	43db      	mvns	r3, r3
 8005992:	493e      	ldr	r1, [pc, #248]	; (8005a8c <HAL_GPIO_DeInit+0x210>)
 8005994:	4013      	ands	r3, r2
 8005996:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f003 0303 	and.w	r3, r3, #3
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	220f      	movs	r2, #15
 80059a2:	fa02 f303 	lsl.w	r3, r2, r3
 80059a6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80059a8:	4a2d      	ldr	r2, [pc, #180]	; (8005a60 <HAL_GPIO_DeInit+0x1e4>)
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	089b      	lsrs	r3, r3, #2
 80059ae:	3302      	adds	r3, #2
 80059b0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	43da      	mvns	r2, r3
 80059b8:	4829      	ldr	r0, [pc, #164]	; (8005a60 <HAL_GPIO_DeInit+0x1e4>)
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	089b      	lsrs	r3, r3, #2
 80059be:	400a      	ands	r2, r1
 80059c0:	3302      	adds	r3, #2
 80059c2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	005b      	lsls	r3, r3, #1
 80059ce:	2103      	movs	r1, #3
 80059d0:	fa01 f303 	lsl.w	r3, r1, r3
 80059d4:	43db      	mvns	r3, r3
 80059d6:	401a      	ands	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	08da      	lsrs	r2, r3, #3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	3208      	adds	r2, #8
 80059e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	f003 0307 	and.w	r3, r3, #7
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	220f      	movs	r2, #15
 80059f2:	fa02 f303 	lsl.w	r3, r2, r3
 80059f6:	43db      	mvns	r3, r3
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	08d2      	lsrs	r2, r2, #3
 80059fc:	4019      	ands	r1, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	3208      	adds	r2, #8
 8005a02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68da      	ldr	r2, [r3, #12]
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	005b      	lsls	r3, r3, #1
 8005a0e:	2103      	movs	r1, #3
 8005a10:	fa01 f303 	lsl.w	r3, r1, r3
 8005a14:	43db      	mvns	r3, r3
 8005a16:	401a      	ands	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	2101      	movs	r1, #1
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	fa01 f303 	lsl.w	r3, r1, r3
 8005a28:	43db      	mvns	r3, r3
 8005a2a:	401a      	ands	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	689a      	ldr	r2, [r3, #8]
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	005b      	lsls	r3, r3, #1
 8005a38:	2103      	movs	r1, #3
 8005a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a3e:	43db      	mvns	r3, r3
 8005a40:	401a      	ands	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	617b      	str	r3, [r7, #20]
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	2b0f      	cmp	r3, #15
 8005a50:	f67f af22 	bls.w	8005898 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005a54:	bf00      	nop
 8005a56:	371c      	adds	r7, #28
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr
 8005a60:	40013800 	.word	0x40013800
 8005a64:	40020000 	.word	0x40020000
 8005a68:	40020400 	.word	0x40020400
 8005a6c:	40020800 	.word	0x40020800
 8005a70:	40020c00 	.word	0x40020c00
 8005a74:	40021000 	.word	0x40021000
 8005a78:	40021400 	.word	0x40021400
 8005a7c:	40021800 	.word	0x40021800
 8005a80:	40021c00 	.word	0x40021c00
 8005a84:	40022000 	.word	0x40022000
 8005a88:	40022400 	.word	0x40022400
 8005a8c:	40013c00 	.word	0x40013c00

08005a90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	460b      	mov	r3, r1
 8005a9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	691a      	ldr	r2, [r3, #16]
 8005aa0:	887b      	ldrh	r3, [r7, #2]
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d002      	beq.n	8005aae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	73fb      	strb	r3, [r7, #15]
 8005aac:	e001      	b.n	8005ab2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	460b      	mov	r3, r1
 8005aca:	807b      	strh	r3, [r7, #2]
 8005acc:	4613      	mov	r3, r2
 8005ace:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ad0:	787b      	ldrb	r3, [r7, #1]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d003      	beq.n	8005ade <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ad6:	887a      	ldrh	r2, [r7, #2]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005adc:	e003      	b.n	8005ae6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005ade:	887b      	ldrh	r3, [r7, #2]
 8005ae0:	041a      	lsls	r2, r3, #16
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	619a      	str	r2, [r3, #24]
}
 8005ae6:	bf00      	nop
 8005ae8:	370c      	adds	r7, #12
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr

08005af2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b083      	sub	sp, #12
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
 8005afa:	460b      	mov	r3, r1
 8005afc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	695a      	ldr	r2, [r3, #20]
 8005b02:	887b      	ldrh	r3, [r7, #2]
 8005b04:	4013      	ands	r3, r2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d004      	beq.n	8005b14 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005b0a:	887b      	ldrh	r3, [r7, #2]
 8005b0c:	041a      	lsls	r2, r3, #16
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8005b12:	e002      	b.n	8005b1a <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005b14:	887a      	ldrh	r2, [r7, #2]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	619a      	str	r2, [r3, #24]
}
 8005b1a:	bf00      	nop
 8005b1c:	370c      	adds	r7, #12
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr

08005b26 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8005b26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b28:	b08f      	sub	sp, #60	; 0x3c
 8005b2a:	af0a      	add	r7, sp, #40	; 0x28
 8005b2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d101      	bne.n	8005b38 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e054      	b.n	8005be2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d106      	bne.n	8005b58 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f00c fa1a 	bl	8011f8c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2203      	movs	r2, #3
 8005b5c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d102      	bne.n	8005b72 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f005 fd39 	bl	800b5ee <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	603b      	str	r3, [r7, #0]
 8005b82:	687e      	ldr	r6, [r7, #4]
 8005b84:	466d      	mov	r5, sp
 8005b86:	f106 0410 	add.w	r4, r6, #16
 8005b8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b92:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005b96:	e885 0003 	stmia.w	r5, {r0, r1}
 8005b9a:	1d33      	adds	r3, r6, #4
 8005b9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b9e:	6838      	ldr	r0, [r7, #0]
 8005ba0:	f005 fcbc 	bl	800b51c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2101      	movs	r1, #1
 8005baa:	4618      	mov	r0, r3
 8005bac:	f005 fd30 	bl	800b610 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	603b      	str	r3, [r7, #0]
 8005bb6:	687e      	ldr	r6, [r7, #4]
 8005bb8:	466d      	mov	r5, sp
 8005bba:	f106 0410 	add.w	r4, r6, #16
 8005bbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005bc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005bc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005bc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005bc6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005bca:	e885 0003 	stmia.w	r5, {r0, r1}
 8005bce:	1d33      	adds	r3, r6, #4
 8005bd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005bd2:	6838      	ldr	r0, [r7, #0]
 8005bd4:	f005 fe42 	bl	800b85c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005bea <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8005bea:	b590      	push	{r4, r7, lr}
 8005bec:	b089      	sub	sp, #36	; 0x24
 8005bee:	af04      	add	r7, sp, #16
 8005bf0:	6078      	str	r0, [r7, #4]
 8005bf2:	4608      	mov	r0, r1
 8005bf4:	4611      	mov	r1, r2
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	70fb      	strb	r3, [r7, #3]
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	70bb      	strb	r3, [r7, #2]
 8005c00:	4613      	mov	r3, r2
 8005c02:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d101      	bne.n	8005c12 <HAL_HCD_HC_Init+0x28>
 8005c0e:	2302      	movs	r3, #2
 8005c10:	e07f      	b.n	8005d12 <HAL_HCD_HC_Init+0x128>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8005c1a:	78fa      	ldrb	r2, [r7, #3]
 8005c1c:	6879      	ldr	r1, [r7, #4]
 8005c1e:	4613      	mov	r3, r2
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	4413      	add	r3, r2
 8005c24:	00db      	lsls	r3, r3, #3
 8005c26:	440b      	add	r3, r1
 8005c28:	333d      	adds	r3, #61	; 0x3d
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8005c2e:	78fa      	ldrb	r2, [r7, #3]
 8005c30:	6879      	ldr	r1, [r7, #4]
 8005c32:	4613      	mov	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	00db      	lsls	r3, r3, #3
 8005c3a:	440b      	add	r3, r1
 8005c3c:	3338      	adds	r3, #56	; 0x38
 8005c3e:	787a      	ldrb	r2, [r7, #1]
 8005c40:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8005c42:	78fa      	ldrb	r2, [r7, #3]
 8005c44:	6879      	ldr	r1, [r7, #4]
 8005c46:	4613      	mov	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4413      	add	r3, r2
 8005c4c:	00db      	lsls	r3, r3, #3
 8005c4e:	440b      	add	r3, r1
 8005c50:	3340      	adds	r3, #64	; 0x40
 8005c52:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005c54:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005c56:	78fa      	ldrb	r2, [r7, #3]
 8005c58:	6879      	ldr	r1, [r7, #4]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	4413      	add	r3, r2
 8005c60:	00db      	lsls	r3, r3, #3
 8005c62:	440b      	add	r3, r1
 8005c64:	3339      	adds	r3, #57	; 0x39
 8005c66:	78fa      	ldrb	r2, [r7, #3]
 8005c68:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8005c6a:	78fa      	ldrb	r2, [r7, #3]
 8005c6c:	6879      	ldr	r1, [r7, #4]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4413      	add	r3, r2
 8005c74:	00db      	lsls	r3, r3, #3
 8005c76:	440b      	add	r3, r1
 8005c78:	333f      	adds	r3, #63	; 0x3f
 8005c7a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8005c7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8005c80:	78fa      	ldrb	r2, [r7, #3]
 8005c82:	78bb      	ldrb	r3, [r7, #2]
 8005c84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c88:	b2d8      	uxtb	r0, r3
 8005c8a:	6879      	ldr	r1, [r7, #4]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	4413      	add	r3, r2
 8005c92:	00db      	lsls	r3, r3, #3
 8005c94:	440b      	add	r3, r1
 8005c96:	333a      	adds	r3, #58	; 0x3a
 8005c98:	4602      	mov	r2, r0
 8005c9a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8005c9c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	da0a      	bge.n	8005cba <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005ca4:	78fa      	ldrb	r2, [r7, #3]
 8005ca6:	6879      	ldr	r1, [r7, #4]
 8005ca8:	4613      	mov	r3, r2
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	4413      	add	r3, r2
 8005cae:	00db      	lsls	r3, r3, #3
 8005cb0:	440b      	add	r3, r1
 8005cb2:	333b      	adds	r3, #59	; 0x3b
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	701a      	strb	r2, [r3, #0]
 8005cb8:	e009      	b.n	8005cce <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8005cba:	78fa      	ldrb	r2, [r7, #3]
 8005cbc:	6879      	ldr	r1, [r7, #4]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	00db      	lsls	r3, r3, #3
 8005cc6:	440b      	add	r3, r1
 8005cc8:	333b      	adds	r3, #59	; 0x3b
 8005cca:	2200      	movs	r2, #0
 8005ccc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8005cce:	78fa      	ldrb	r2, [r7, #3]
 8005cd0:	6879      	ldr	r1, [r7, #4]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4413      	add	r3, r2
 8005cd8:	00db      	lsls	r3, r3, #3
 8005cda:	440b      	add	r3, r1
 8005cdc:	333c      	adds	r3, #60	; 0x3c
 8005cde:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005ce2:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6818      	ldr	r0, [r3, #0]
 8005ce8:	787c      	ldrb	r4, [r7, #1]
 8005cea:	78ba      	ldrb	r2, [r7, #2]
 8005cec:	78f9      	ldrb	r1, [r7, #3]
 8005cee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005cf0:	9302      	str	r3, [sp, #8]
 8005cf2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005cf6:	9301      	str	r3, [sp, #4]
 8005cf8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	4623      	mov	r3, r4
 8005d00:	f005 ff22 	bl	800bb48 <USB_HC_Init>
 8005d04:	4603      	mov	r3, r0
 8005d06:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8005d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3714      	adds	r7, #20
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd90      	pop	{r4, r7, pc}

08005d1a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b084      	sub	sp, #16
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
 8005d22:	460b      	mov	r3, r1
 8005d24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005d26:	2300      	movs	r3, #0
 8005d28:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d101      	bne.n	8005d38 <HAL_HCD_HC_Halt+0x1e>
 8005d34:	2302      	movs	r3, #2
 8005d36:	e00f      	b.n	8005d58 <HAL_HCD_HC_Halt+0x3e>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	78fa      	ldrb	r2, [r7, #3]
 8005d46:	4611      	mov	r1, r2
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f006 f95c 	bl	800c006 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8005d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	4608      	mov	r0, r1
 8005d6a:	4611      	mov	r1, r2
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	4603      	mov	r3, r0
 8005d70:	70fb      	strb	r3, [r7, #3]
 8005d72:	460b      	mov	r3, r1
 8005d74:	70bb      	strb	r3, [r7, #2]
 8005d76:	4613      	mov	r3, r2
 8005d78:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8005d7a:	78fa      	ldrb	r2, [r7, #3]
 8005d7c:	6879      	ldr	r1, [r7, #4]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4413      	add	r3, r2
 8005d84:	00db      	lsls	r3, r3, #3
 8005d86:	440b      	add	r3, r1
 8005d88:	333b      	adds	r3, #59	; 0x3b
 8005d8a:	78ba      	ldrb	r2, [r7, #2]
 8005d8c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005d8e:	78fa      	ldrb	r2, [r7, #3]
 8005d90:	6879      	ldr	r1, [r7, #4]
 8005d92:	4613      	mov	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	00db      	lsls	r3, r3, #3
 8005d9a:	440b      	add	r3, r1
 8005d9c:	333f      	adds	r3, #63	; 0x3f
 8005d9e:	787a      	ldrb	r2, [r7, #1]
 8005da0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005da2:	7c3b      	ldrb	r3, [r7, #16]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d114      	bne.n	8005dd2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8005da8:	78fa      	ldrb	r2, [r7, #3]
 8005daa:	6879      	ldr	r1, [r7, #4]
 8005dac:	4613      	mov	r3, r2
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	4413      	add	r3, r2
 8005db2:	00db      	lsls	r3, r3, #3
 8005db4:	440b      	add	r3, r1
 8005db6:	3342      	adds	r3, #66	; 0x42
 8005db8:	2203      	movs	r2, #3
 8005dba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8005dbc:	78fa      	ldrb	r2, [r7, #3]
 8005dbe:	6879      	ldr	r1, [r7, #4]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	4413      	add	r3, r2
 8005dc6:	00db      	lsls	r3, r3, #3
 8005dc8:	440b      	add	r3, r1
 8005dca:	333d      	adds	r3, #61	; 0x3d
 8005dcc:	7f3a      	ldrb	r2, [r7, #28]
 8005dce:	701a      	strb	r2, [r3, #0]
 8005dd0:	e009      	b.n	8005de6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005dd2:	78fa      	ldrb	r2, [r7, #3]
 8005dd4:	6879      	ldr	r1, [r7, #4]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	4413      	add	r3, r2
 8005ddc:	00db      	lsls	r3, r3, #3
 8005dde:	440b      	add	r3, r1
 8005de0:	3342      	adds	r3, #66	; 0x42
 8005de2:	2202      	movs	r2, #2
 8005de4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8005de6:	787b      	ldrb	r3, [r7, #1]
 8005de8:	2b03      	cmp	r3, #3
 8005dea:	f200 80d6 	bhi.w	8005f9a <HAL_HCD_HC_SubmitRequest+0x23a>
 8005dee:	a201      	add	r2, pc, #4	; (adr r2, 8005df4 <HAL_HCD_HC_SubmitRequest+0x94>)
 8005df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df4:	08005e05 	.word	0x08005e05
 8005df8:	08005f85 	.word	0x08005f85
 8005dfc:	08005e71 	.word	0x08005e71
 8005e00:	08005efb 	.word	0x08005efb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8005e04:	7c3b      	ldrb	r3, [r7, #16]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	f040 80c9 	bne.w	8005f9e <HAL_HCD_HC_SubmitRequest+0x23e>
 8005e0c:	78bb      	ldrb	r3, [r7, #2]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	f040 80c5 	bne.w	8005f9e <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8005e14:	8b3b      	ldrh	r3, [r7, #24]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d109      	bne.n	8005e2e <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8005e1a:	78fa      	ldrb	r2, [r7, #3]
 8005e1c:	6879      	ldr	r1, [r7, #4]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4413      	add	r3, r2
 8005e24:	00db      	lsls	r3, r3, #3
 8005e26:	440b      	add	r3, r1
 8005e28:	3351      	adds	r3, #81	; 0x51
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005e2e:	78fa      	ldrb	r2, [r7, #3]
 8005e30:	6879      	ldr	r1, [r7, #4]
 8005e32:	4613      	mov	r3, r2
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	4413      	add	r3, r2
 8005e38:	00db      	lsls	r3, r3, #3
 8005e3a:	440b      	add	r3, r1
 8005e3c:	3351      	adds	r3, #81	; 0x51
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10a      	bne.n	8005e5a <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005e44:	78fa      	ldrb	r2, [r7, #3]
 8005e46:	6879      	ldr	r1, [r7, #4]
 8005e48:	4613      	mov	r3, r2
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	4413      	add	r3, r2
 8005e4e:	00db      	lsls	r3, r3, #3
 8005e50:	440b      	add	r3, r1
 8005e52:	3342      	adds	r3, #66	; 0x42
 8005e54:	2200      	movs	r2, #0
 8005e56:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005e58:	e0a1      	b.n	8005f9e <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005e5a:	78fa      	ldrb	r2, [r7, #3]
 8005e5c:	6879      	ldr	r1, [r7, #4]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	4413      	add	r3, r2
 8005e64:	00db      	lsls	r3, r3, #3
 8005e66:	440b      	add	r3, r1
 8005e68:	3342      	adds	r3, #66	; 0x42
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	701a      	strb	r2, [r3, #0]
      break;
 8005e6e:	e096      	b.n	8005f9e <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8005e70:	78bb      	ldrb	r3, [r7, #2]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d120      	bne.n	8005eb8 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005e76:	78fa      	ldrb	r2, [r7, #3]
 8005e78:	6879      	ldr	r1, [r7, #4]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4413      	add	r3, r2
 8005e80:	00db      	lsls	r3, r3, #3
 8005e82:	440b      	add	r3, r1
 8005e84:	3351      	adds	r3, #81	; 0x51
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10a      	bne.n	8005ea2 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005e8c:	78fa      	ldrb	r2, [r7, #3]
 8005e8e:	6879      	ldr	r1, [r7, #4]
 8005e90:	4613      	mov	r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4413      	add	r3, r2
 8005e96:	00db      	lsls	r3, r3, #3
 8005e98:	440b      	add	r3, r1
 8005e9a:	3342      	adds	r3, #66	; 0x42
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8005ea0:	e07e      	b.n	8005fa0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005ea2:	78fa      	ldrb	r2, [r7, #3]
 8005ea4:	6879      	ldr	r1, [r7, #4]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	4413      	add	r3, r2
 8005eac:	00db      	lsls	r3, r3, #3
 8005eae:	440b      	add	r3, r1
 8005eb0:	3342      	adds	r3, #66	; 0x42
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	701a      	strb	r2, [r3, #0]
      break;
 8005eb6:	e073      	b.n	8005fa0 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005eb8:	78fa      	ldrb	r2, [r7, #3]
 8005eba:	6879      	ldr	r1, [r7, #4]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4413      	add	r3, r2
 8005ec2:	00db      	lsls	r3, r3, #3
 8005ec4:	440b      	add	r3, r1
 8005ec6:	3350      	adds	r3, #80	; 0x50
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10a      	bne.n	8005ee4 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005ece:	78fa      	ldrb	r2, [r7, #3]
 8005ed0:	6879      	ldr	r1, [r7, #4]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4413      	add	r3, r2
 8005ed8:	00db      	lsls	r3, r3, #3
 8005eda:	440b      	add	r3, r1
 8005edc:	3342      	adds	r3, #66	; 0x42
 8005ede:	2200      	movs	r2, #0
 8005ee0:	701a      	strb	r2, [r3, #0]
      break;
 8005ee2:	e05d      	b.n	8005fa0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005ee4:	78fa      	ldrb	r2, [r7, #3]
 8005ee6:	6879      	ldr	r1, [r7, #4]
 8005ee8:	4613      	mov	r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4413      	add	r3, r2
 8005eee:	00db      	lsls	r3, r3, #3
 8005ef0:	440b      	add	r3, r1
 8005ef2:	3342      	adds	r3, #66	; 0x42
 8005ef4:	2202      	movs	r2, #2
 8005ef6:	701a      	strb	r2, [r3, #0]
      break;
 8005ef8:	e052      	b.n	8005fa0 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8005efa:	78bb      	ldrb	r3, [r7, #2]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d120      	bne.n	8005f42 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005f00:	78fa      	ldrb	r2, [r7, #3]
 8005f02:	6879      	ldr	r1, [r7, #4]
 8005f04:	4613      	mov	r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4413      	add	r3, r2
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	440b      	add	r3, r1
 8005f0e:	3351      	adds	r3, #81	; 0x51
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d10a      	bne.n	8005f2c <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005f16:	78fa      	ldrb	r2, [r7, #3]
 8005f18:	6879      	ldr	r1, [r7, #4]
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	00db      	lsls	r3, r3, #3
 8005f22:	440b      	add	r3, r1
 8005f24:	3342      	adds	r3, #66	; 0x42
 8005f26:	2200      	movs	r2, #0
 8005f28:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005f2a:	e039      	b.n	8005fa0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005f2c:	78fa      	ldrb	r2, [r7, #3]
 8005f2e:	6879      	ldr	r1, [r7, #4]
 8005f30:	4613      	mov	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4413      	add	r3, r2
 8005f36:	00db      	lsls	r3, r3, #3
 8005f38:	440b      	add	r3, r1
 8005f3a:	3342      	adds	r3, #66	; 0x42
 8005f3c:	2202      	movs	r2, #2
 8005f3e:	701a      	strb	r2, [r3, #0]
      break;
 8005f40:	e02e      	b.n	8005fa0 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005f42:	78fa      	ldrb	r2, [r7, #3]
 8005f44:	6879      	ldr	r1, [r7, #4]
 8005f46:	4613      	mov	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4413      	add	r3, r2
 8005f4c:	00db      	lsls	r3, r3, #3
 8005f4e:	440b      	add	r3, r1
 8005f50:	3350      	adds	r3, #80	; 0x50
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10a      	bne.n	8005f6e <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005f58:	78fa      	ldrb	r2, [r7, #3]
 8005f5a:	6879      	ldr	r1, [r7, #4]
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	440b      	add	r3, r1
 8005f66:	3342      	adds	r3, #66	; 0x42
 8005f68:	2200      	movs	r2, #0
 8005f6a:	701a      	strb	r2, [r3, #0]
      break;
 8005f6c:	e018      	b.n	8005fa0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005f6e:	78fa      	ldrb	r2, [r7, #3]
 8005f70:	6879      	ldr	r1, [r7, #4]
 8005f72:	4613      	mov	r3, r2
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	4413      	add	r3, r2
 8005f78:	00db      	lsls	r3, r3, #3
 8005f7a:	440b      	add	r3, r1
 8005f7c:	3342      	adds	r3, #66	; 0x42
 8005f7e:	2202      	movs	r2, #2
 8005f80:	701a      	strb	r2, [r3, #0]
      break;
 8005f82:	e00d      	b.n	8005fa0 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005f84:	78fa      	ldrb	r2, [r7, #3]
 8005f86:	6879      	ldr	r1, [r7, #4]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4413      	add	r3, r2
 8005f8e:	00db      	lsls	r3, r3, #3
 8005f90:	440b      	add	r3, r1
 8005f92:	3342      	adds	r3, #66	; 0x42
 8005f94:	2200      	movs	r2, #0
 8005f96:	701a      	strb	r2, [r3, #0]
      break;
 8005f98:	e002      	b.n	8005fa0 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8005f9a:	bf00      	nop
 8005f9c:	e000      	b.n	8005fa0 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8005f9e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005fa0:	78fa      	ldrb	r2, [r7, #3]
 8005fa2:	6879      	ldr	r1, [r7, #4]
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4413      	add	r3, r2
 8005faa:	00db      	lsls	r3, r3, #3
 8005fac:	440b      	add	r3, r1
 8005fae:	3344      	adds	r3, #68	; 0x44
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005fb4:	78fa      	ldrb	r2, [r7, #3]
 8005fb6:	8b39      	ldrh	r1, [r7, #24]
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	4413      	add	r3, r2
 8005fc0:	00db      	lsls	r3, r3, #3
 8005fc2:	4403      	add	r3, r0
 8005fc4:	3348      	adds	r3, #72	; 0x48
 8005fc6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005fc8:	78fa      	ldrb	r2, [r7, #3]
 8005fca:	6879      	ldr	r1, [r7, #4]
 8005fcc:	4613      	mov	r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4413      	add	r3, r2
 8005fd2:	00db      	lsls	r3, r3, #3
 8005fd4:	440b      	add	r3, r1
 8005fd6:	335c      	adds	r3, #92	; 0x5c
 8005fd8:	2200      	movs	r2, #0
 8005fda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005fdc:	78fa      	ldrb	r2, [r7, #3]
 8005fde:	6879      	ldr	r1, [r7, #4]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4413      	add	r3, r2
 8005fe6:	00db      	lsls	r3, r3, #3
 8005fe8:	440b      	add	r3, r1
 8005fea:	334c      	adds	r3, #76	; 0x4c
 8005fec:	2200      	movs	r2, #0
 8005fee:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005ff0:	78fa      	ldrb	r2, [r7, #3]
 8005ff2:	6879      	ldr	r1, [r7, #4]
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	00db      	lsls	r3, r3, #3
 8005ffc:	440b      	add	r3, r1
 8005ffe:	3339      	adds	r3, #57	; 0x39
 8006000:	78fa      	ldrb	r2, [r7, #3]
 8006002:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8006004:	78fa      	ldrb	r2, [r7, #3]
 8006006:	6879      	ldr	r1, [r7, #4]
 8006008:	4613      	mov	r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4413      	add	r3, r2
 800600e:	00db      	lsls	r3, r3, #3
 8006010:	440b      	add	r3, r1
 8006012:	335d      	adds	r3, #93	; 0x5d
 8006014:	2200      	movs	r2, #0
 8006016:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6818      	ldr	r0, [r3, #0]
 800601c:	78fa      	ldrb	r2, [r7, #3]
 800601e:	4613      	mov	r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	4413      	add	r3, r2
 8006024:	00db      	lsls	r3, r3, #3
 8006026:	3338      	adds	r3, #56	; 0x38
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	18d1      	adds	r1, r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	b2db      	uxtb	r3, r3
 8006032:	461a      	mov	r2, r3
 8006034:	f005 fe92 	bl	800bd5c <USB_HC_StartXfer>
 8006038:	4603      	mov	r3, r0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop

08006044 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4618      	mov	r0, r3
 800605c:	f005 fbbb 	bl	800b7d6 <USB_GetMode>
 8006060:	4603      	mov	r3, r0
 8006062:	2b01      	cmp	r3, #1
 8006064:	f040 80ef 	bne.w	8006246 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4618      	mov	r0, r3
 800606e:	f005 fb9f 	bl	800b7b0 <USB_ReadInterrupts>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	f000 80e5 	beq.w	8006244 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4618      	mov	r0, r3
 8006080:	f005 fb96 	bl	800b7b0 <USB_ReadInterrupts>
 8006084:	4603      	mov	r3, r0
 8006086:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800608a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800608e:	d104      	bne.n	800609a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006098:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4618      	mov	r0, r3
 80060a0:	f005 fb86 	bl	800b7b0 <USB_ReadInterrupts>
 80060a4:	4603      	mov	r3, r0
 80060a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060ae:	d104      	bne.n	80060ba <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80060b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4618      	mov	r0, r3
 80060c0:	f005 fb76 	bl	800b7b0 <USB_ReadInterrupts>
 80060c4:	4603      	mov	r3, r0
 80060c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80060ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060ce:	d104      	bne.n	80060da <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80060d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4618      	mov	r0, r3
 80060e0:	f005 fb66 	bl	800b7b0 <USB_ReadInterrupts>
 80060e4:	4603      	mov	r3, r0
 80060e6:	f003 0302 	and.w	r3, r3, #2
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d103      	bne.n	80060f6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2202      	movs	r2, #2
 80060f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f005 fb58 	bl	800b7b0 <USB_ReadInterrupts>
 8006100:	4603      	mov	r3, r0
 8006102:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006106:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800610a:	d115      	bne.n	8006138 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006114:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 0301 	and.w	r3, r3, #1
 8006122:	2b00      	cmp	r3, #0
 8006124:	d108      	bne.n	8006138 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f00c f81e 	bl	8012168 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2101      	movs	r1, #1
 8006132:	4618      	mov	r0, r3
 8006134:	f005 fc42 	bl	800b9bc <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4618      	mov	r0, r3
 800613e:	f005 fb37 	bl	800b7b0 <USB_ReadInterrupts>
 8006142:	4603      	mov	r3, r0
 8006144:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006148:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800614c:	d102      	bne.n	8006154 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f001 f966 	bl	8007420 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4618      	mov	r0, r3
 800615a:	f005 fb29 	bl	800b7b0 <USB_ReadInterrupts>
 800615e:	4603      	mov	r3, r0
 8006160:	f003 0308 	and.w	r3, r3, #8
 8006164:	2b08      	cmp	r3, #8
 8006166:	d106      	bne.n	8006176 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f00b ffe1 	bl	8012130 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2208      	movs	r2, #8
 8006174:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4618      	mov	r0, r3
 800617c:	f005 fb18 	bl	800b7b0 <USB_ReadInterrupts>
 8006180:	4603      	mov	r3, r0
 8006182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006186:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800618a:	d138      	bne.n	80061fe <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4618      	mov	r0, r3
 8006192:	f005 ff27 	bl	800bfe4 <USB_HC_ReadInterrupt>
 8006196:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006198:	2300      	movs	r3, #0
 800619a:	617b      	str	r3, [r7, #20]
 800619c:	e025      	b.n	80061ea <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	f003 030f 	and.w	r3, r3, #15
 80061a4:	68ba      	ldr	r2, [r7, #8]
 80061a6:	fa22 f303 	lsr.w	r3, r2, r3
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d018      	beq.n	80061e4 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	015a      	lsls	r2, r3, #5
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	4413      	add	r3, r2
 80061ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061c8:	d106      	bne.n	80061d8 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	4619      	mov	r1, r3
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 f8cf 	bl	8006374 <HCD_HC_IN_IRQHandler>
 80061d6:	e005      	b.n	80061e4 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	4619      	mov	r1, r3
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 fcfd 	bl	8006bde <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	3301      	adds	r3, #1
 80061e8:	617b      	str	r3, [r7, #20]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d3d4      	bcc.n	800619e <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80061fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4618      	mov	r0, r3
 8006204:	f005 fad4 	bl	800b7b0 <USB_ReadInterrupts>
 8006208:	4603      	mov	r3, r0
 800620a:	f003 0310 	and.w	r3, r3, #16
 800620e:	2b10      	cmp	r3, #16
 8006210:	d101      	bne.n	8006216 <HAL_HCD_IRQHandler+0x1d2>
 8006212:	2301      	movs	r3, #1
 8006214:	e000      	b.n	8006218 <HAL_HCD_IRQHandler+0x1d4>
 8006216:	2300      	movs	r3, #0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d014      	beq.n	8006246 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	699a      	ldr	r2, [r3, #24]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f022 0210 	bic.w	r2, r2, #16
 800622a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f001 f84b 	bl	80072c8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	699a      	ldr	r2, [r3, #24]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f042 0210 	orr.w	r2, r2, #16
 8006240:	619a      	str	r2, [r3, #24]
 8006242:	e000      	b.n	8006246 <HAL_HCD_IRQHandler+0x202>
      return;
 8006244:	bf00      	nop
    }
  }
}
 8006246:	3718      	adds	r7, #24
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800625a:	2b01      	cmp	r3, #1
 800625c:	d101      	bne.n	8006262 <HAL_HCD_Start+0x16>
 800625e:	2302      	movs	r3, #2
 8006260:	e013      	b.n	800628a <HAL_HCD_Start+0x3e>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4618      	mov	r0, r3
 8006270:	f005 f9ac 	bl	800b5cc <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2101      	movs	r1, #1
 800627a:	4618      	mov	r0, r3
 800627c:	f005 fc02 	bl	800ba84 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3708      	adds	r7, #8
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b082      	sub	sp, #8
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d101      	bne.n	80062a8 <HAL_HCD_Stop+0x16>
 80062a4:	2302      	movs	r3, #2
 80062a6:	e00d      	b.n	80062c4 <HAL_HCD_Stop+0x32>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4618      	mov	r0, r3
 80062b6:	f005 ffe1 	bl	800c27c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3708      	adds	r7, #8
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4618      	mov	r0, r3
 80062da:	f005 fba9 	bl	800ba30 <USB_ResetPort>
 80062de:	4603      	mov	r3, r0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3708      	adds	r7, #8
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	460b      	mov	r3, r1
 80062f2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80062f4:	78fa      	ldrb	r2, [r7, #3]
 80062f6:	6879      	ldr	r1, [r7, #4]
 80062f8:	4613      	mov	r3, r2
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	4413      	add	r3, r2
 80062fe:	00db      	lsls	r3, r3, #3
 8006300:	440b      	add	r3, r1
 8006302:	335c      	adds	r3, #92	; 0x5c
 8006304:	781b      	ldrb	r3, [r3, #0]
}
 8006306:	4618      	mov	r0, r3
 8006308:	370c      	adds	r7, #12
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006312:	b480      	push	{r7}
 8006314:	b083      	sub	sp, #12
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
 800631a:	460b      	mov	r3, r1
 800631c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800631e:	78fa      	ldrb	r2, [r7, #3]
 8006320:	6879      	ldr	r1, [r7, #4]
 8006322:	4613      	mov	r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4413      	add	r3, r2
 8006328:	00db      	lsls	r3, r3, #3
 800632a:	440b      	add	r3, r1
 800632c:	334c      	adds	r3, #76	; 0x4c
 800632e:	681b      	ldr	r3, [r3, #0]
}
 8006330:	4618      	mov	r0, r3
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4618      	mov	r0, r3
 800634a:	f005 fbeb 	bl	800bb24 <USB_GetCurrentFrame>
 800634e:	4603      	mov	r3, r0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3708      	adds	r7, #8
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4618      	mov	r0, r3
 8006366:	f005 fbc6 	bl	800baf6 <USB_GetHostSpeed>
 800636a:	4603      	mov	r3, r0
}
 800636c:	4618      	mov	r0, r3
 800636e:	3708      	adds	r7, #8
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b086      	sub	sp, #24
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	460b      	mov	r3, r1
 800637e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800638a:	78fb      	ldrb	r3, [r7, #3]
 800638c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	015a      	lsls	r2, r3, #5
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	4413      	add	r3, r2
 8006396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	f003 0304 	and.w	r3, r3, #4
 80063a0:	2b04      	cmp	r3, #4
 80063a2:	d119      	bne.n	80063d8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	015a      	lsls	r2, r3, #5
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	4413      	add	r3, r2
 80063ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b0:	461a      	mov	r2, r3
 80063b2:	2304      	movs	r3, #4
 80063b4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	015a      	lsls	r2, r3, #5
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	4413      	add	r3, r2
 80063be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	0151      	lsls	r1, r2, #5
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	440a      	add	r2, r1
 80063cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063d0:	f043 0302 	orr.w	r3, r3, #2
 80063d4:	60d3      	str	r3, [r2, #12]
 80063d6:	e0ce      	b.n	8006576 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063ee:	d12c      	bne.n	800644a <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063fc:	461a      	mov	r2, r3
 80063fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006402:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8006404:	6879      	ldr	r1, [r7, #4]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	4613      	mov	r3, r2
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	4413      	add	r3, r2
 800640e:	00db      	lsls	r3, r3, #3
 8006410:	440b      	add	r3, r1
 8006412:	335d      	adds	r3, #93	; 0x5d
 8006414:	2207      	movs	r2, #7
 8006416:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	4413      	add	r3, r2
 8006420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	0151      	lsls	r1, r2, #5
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	440a      	add	r2, r1
 800642e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006432:	f043 0302 	orr.w	r3, r3, #2
 8006436:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	b2d2      	uxtb	r2, r2
 8006440:	4611      	mov	r1, r2
 8006442:	4618      	mov	r0, r3
 8006444:	f005 fddf 	bl	800c006 <USB_HC_Halt>
 8006448:	e095      	b.n	8006576 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	015a      	lsls	r2, r3, #5
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	4413      	add	r3, r2
 8006452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	f003 0320 	and.w	r3, r3, #32
 800645c:	2b20      	cmp	r3, #32
 800645e:	d109      	bne.n	8006474 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	015a      	lsls	r2, r3, #5
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	4413      	add	r3, r2
 8006468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800646c:	461a      	mov	r2, r3
 800646e:	2320      	movs	r3, #32
 8006470:	6093      	str	r3, [r2, #8]
 8006472:	e080      	b.n	8006576 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	015a      	lsls	r2, r3, #5
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	4413      	add	r3, r2
 800647c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f003 0308 	and.w	r3, r3, #8
 8006486:	2b08      	cmp	r3, #8
 8006488:	d134      	bne.n	80064f4 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	4413      	add	r3, r2
 8006492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	0151      	lsls	r1, r2, #5
 800649c:	693a      	ldr	r2, [r7, #16]
 800649e:	440a      	add	r2, r1
 80064a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064a4:	f043 0302 	orr.w	r3, r3, #2
 80064a8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80064aa:	6879      	ldr	r1, [r7, #4]
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	4613      	mov	r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	4413      	add	r3, r2
 80064b4:	00db      	lsls	r3, r3, #3
 80064b6:	440b      	add	r3, r1
 80064b8:	335d      	adds	r3, #93	; 0x5d
 80064ba:	2205      	movs	r2, #5
 80064bc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	015a      	lsls	r2, r3, #5
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	4413      	add	r3, r2
 80064c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ca:	461a      	mov	r2, r3
 80064cc:	2310      	movs	r3, #16
 80064ce:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	015a      	lsls	r2, r3, #5
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	4413      	add	r3, r2
 80064d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064dc:	461a      	mov	r2, r3
 80064de:	2308      	movs	r3, #8
 80064e0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	b2d2      	uxtb	r2, r2
 80064ea:	4611      	mov	r1, r2
 80064ec:	4618      	mov	r0, r3
 80064ee:	f005 fd8a 	bl	800c006 <USB_HC_Halt>
 80064f2:	e040      	b.n	8006576 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	015a      	lsls	r2, r3, #5
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	4413      	add	r3, r2
 80064fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800650a:	d134      	bne.n	8006576 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	015a      	lsls	r2, r3, #5
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	4413      	add	r3, r2
 8006514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	0151      	lsls	r1, r2, #5
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	440a      	add	r2, r1
 8006522:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006526:	f043 0302 	orr.w	r3, r3, #2
 800652a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	b2d2      	uxtb	r2, r2
 8006534:	4611      	mov	r1, r2
 8006536:	4618      	mov	r0, r3
 8006538:	f005 fd65 	bl	800c006 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	015a      	lsls	r2, r3, #5
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	4413      	add	r3, r2
 8006544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006548:	461a      	mov	r2, r3
 800654a:	2310      	movs	r3, #16
 800654c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800654e:	6879      	ldr	r1, [r7, #4]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	4613      	mov	r3, r2
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	4413      	add	r3, r2
 8006558:	00db      	lsls	r3, r3, #3
 800655a:	440b      	add	r3, r1
 800655c:	335d      	adds	r3, #93	; 0x5d
 800655e:	2208      	movs	r2, #8
 8006560:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	015a      	lsls	r2, r3, #5
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	4413      	add	r3, r2
 800656a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800656e:	461a      	mov	r2, r3
 8006570:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006574:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	015a      	lsls	r2, r3, #5
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	4413      	add	r3, r2
 800657e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800658c:	d122      	bne.n	80065d4 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	015a      	lsls	r2, r3, #5
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	4413      	add	r3, r2
 8006596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	0151      	lsls	r1, r2, #5
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	440a      	add	r2, r1
 80065a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065a8:	f043 0302 	orr.w	r3, r3, #2
 80065ac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	b2d2      	uxtb	r2, r2
 80065b6:	4611      	mov	r1, r2
 80065b8:	4618      	mov	r0, r3
 80065ba:	f005 fd24 	bl	800c006 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	015a      	lsls	r2, r3, #5
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	4413      	add	r3, r2
 80065c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ca:	461a      	mov	r2, r3
 80065cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065d0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80065d2:	e300      	b.n	8006bd6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	015a      	lsls	r2, r3, #5
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	4413      	add	r3, r2
 80065dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f003 0301 	and.w	r3, r3, #1
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	f040 80fd 	bne.w	80067e6 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d01b      	beq.n	800662c <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80065f4:	6879      	ldr	r1, [r7, #4]
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	4613      	mov	r3, r2
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	4413      	add	r3, r2
 80065fe:	00db      	lsls	r3, r3, #3
 8006600:	440b      	add	r3, r1
 8006602:	3348      	adds	r3, #72	; 0x48
 8006604:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	0159      	lsls	r1, r3, #5
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	440b      	add	r3, r1
 800660e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8006618:	1ad1      	subs	r1, r2, r3
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	4613      	mov	r3, r2
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	4413      	add	r3, r2
 8006624:	00db      	lsls	r3, r3, #3
 8006626:	4403      	add	r3, r0
 8006628:	334c      	adds	r3, #76	; 0x4c
 800662a:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800662c:	6879      	ldr	r1, [r7, #4]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	4613      	mov	r3, r2
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4413      	add	r3, r2
 8006636:	00db      	lsls	r3, r3, #3
 8006638:	440b      	add	r3, r1
 800663a:	335d      	adds	r3, #93	; 0x5d
 800663c:	2201      	movs	r2, #1
 800663e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006640:	6879      	ldr	r1, [r7, #4]
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	4613      	mov	r3, r2
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	4413      	add	r3, r2
 800664a:	00db      	lsls	r3, r3, #3
 800664c:	440b      	add	r3, r1
 800664e:	3358      	adds	r3, #88	; 0x58
 8006650:	2200      	movs	r2, #0
 8006652:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	015a      	lsls	r2, r3, #5
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	4413      	add	r3, r2
 800665c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006660:	461a      	mov	r2, r3
 8006662:	2301      	movs	r3, #1
 8006664:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006666:	6879      	ldr	r1, [r7, #4]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	4613      	mov	r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	00db      	lsls	r3, r3, #3
 8006672:	440b      	add	r3, r1
 8006674:	333f      	adds	r3, #63	; 0x3f
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00a      	beq.n	8006692 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800667c:	6879      	ldr	r1, [r7, #4]
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	4613      	mov	r3, r2
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	4413      	add	r3, r2
 8006686:	00db      	lsls	r3, r3, #3
 8006688:	440b      	add	r3, r1
 800668a:	333f      	adds	r3, #63	; 0x3f
 800668c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800668e:	2b02      	cmp	r3, #2
 8006690:	d121      	bne.n	80066d6 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	015a      	lsls	r2, r3, #5
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	4413      	add	r3, r2
 800669a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	0151      	lsls	r1, r2, #5
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	440a      	add	r2, r1
 80066a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066ac:	f043 0302 	orr.w	r3, r3, #2
 80066b0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	b2d2      	uxtb	r2, r2
 80066ba:	4611      	mov	r1, r2
 80066bc:	4618      	mov	r0, r3
 80066be:	f005 fca2 	bl	800c006 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	015a      	lsls	r2, r3, #5
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	4413      	add	r3, r2
 80066ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ce:	461a      	mov	r2, r3
 80066d0:	2310      	movs	r3, #16
 80066d2:	6093      	str	r3, [r2, #8]
 80066d4:	e070      	b.n	80067b8 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80066d6:	6879      	ldr	r1, [r7, #4]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	4613      	mov	r3, r2
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	4413      	add	r3, r2
 80066e0:	00db      	lsls	r3, r3, #3
 80066e2:	440b      	add	r3, r1
 80066e4:	333f      	adds	r3, #63	; 0x3f
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	2b03      	cmp	r3, #3
 80066ea:	d12a      	bne.n	8006742 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	015a      	lsls	r2, r3, #5
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	4413      	add	r3, r2
 80066f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	0151      	lsls	r1, r2, #5
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	440a      	add	r2, r1
 8006702:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006706:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800670a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800670c:	6879      	ldr	r1, [r7, #4]
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	4613      	mov	r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	4413      	add	r3, r2
 8006716:	00db      	lsls	r3, r3, #3
 8006718:	440b      	add	r3, r1
 800671a:	335c      	adds	r3, #92	; 0x5c
 800671c:	2201      	movs	r2, #1
 800671e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	b2d8      	uxtb	r0, r3
 8006724:	6879      	ldr	r1, [r7, #4]
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	4613      	mov	r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4413      	add	r3, r2
 800672e:	00db      	lsls	r3, r3, #3
 8006730:	440b      	add	r3, r1
 8006732:	335c      	adds	r3, #92	; 0x5c
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	461a      	mov	r2, r3
 8006738:	4601      	mov	r1, r0
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f00b fd22 	bl	8012184 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006740:	e03a      	b.n	80067b8 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8006742:	6879      	ldr	r1, [r7, #4]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	4613      	mov	r3, r2
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	4413      	add	r3, r2
 800674c:	00db      	lsls	r3, r3, #3
 800674e:	440b      	add	r3, r1
 8006750:	333f      	adds	r3, #63	; 0x3f
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d12f      	bne.n	80067b8 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006758:	6879      	ldr	r1, [r7, #4]
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	4613      	mov	r3, r2
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	4413      	add	r3, r2
 8006762:	00db      	lsls	r3, r3, #3
 8006764:	440b      	add	r3, r1
 8006766:	335c      	adds	r3, #92	; 0x5c
 8006768:	2201      	movs	r2, #1
 800676a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800676c:	6879      	ldr	r1, [r7, #4]
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	4613      	mov	r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	00db      	lsls	r3, r3, #3
 8006778:	440b      	add	r3, r1
 800677a:	3350      	adds	r3, #80	; 0x50
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	f083 0301 	eor.w	r3, r3, #1
 8006782:	b2d8      	uxtb	r0, r3
 8006784:	6879      	ldr	r1, [r7, #4]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	4613      	mov	r3, r2
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	4413      	add	r3, r2
 800678e:	00db      	lsls	r3, r3, #3
 8006790:	440b      	add	r3, r1
 8006792:	3350      	adds	r3, #80	; 0x50
 8006794:	4602      	mov	r2, r0
 8006796:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	b2d8      	uxtb	r0, r3
 800679c:	6879      	ldr	r1, [r7, #4]
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	4613      	mov	r3, r2
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	4413      	add	r3, r2
 80067a6:	00db      	lsls	r3, r3, #3
 80067a8:	440b      	add	r3, r1
 80067aa:	335c      	adds	r3, #92	; 0x5c
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	461a      	mov	r2, r3
 80067b0:	4601      	mov	r1, r0
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f00b fce6 	bl	8012184 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80067b8:	6879      	ldr	r1, [r7, #4]
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	4613      	mov	r3, r2
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	4413      	add	r3, r2
 80067c2:	00db      	lsls	r3, r3, #3
 80067c4:	440b      	add	r3, r1
 80067c6:	3350      	adds	r3, #80	; 0x50
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	f083 0301 	eor.w	r3, r3, #1
 80067ce:	b2d8      	uxtb	r0, r3
 80067d0:	6879      	ldr	r1, [r7, #4]
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	4613      	mov	r3, r2
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	4413      	add	r3, r2
 80067da:	00db      	lsls	r3, r3, #3
 80067dc:	440b      	add	r3, r1
 80067de:	3350      	adds	r3, #80	; 0x50
 80067e0:	4602      	mov	r2, r0
 80067e2:	701a      	strb	r2, [r3, #0]
}
 80067e4:	e1f7      	b.n	8006bd6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	015a      	lsls	r2, r3, #5
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	4413      	add	r3, r2
 80067ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f003 0302 	and.w	r3, r3, #2
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	f040 811a 	bne.w	8006a32 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	015a      	lsls	r2, r3, #5
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	4413      	add	r3, r2
 8006806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	0151      	lsls	r1, r2, #5
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	440a      	add	r2, r1
 8006814:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006818:	f023 0302 	bic.w	r3, r3, #2
 800681c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800681e:	6879      	ldr	r1, [r7, #4]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	4613      	mov	r3, r2
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	4413      	add	r3, r2
 8006828:	00db      	lsls	r3, r3, #3
 800682a:	440b      	add	r3, r1
 800682c:	335d      	adds	r3, #93	; 0x5d
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d10a      	bne.n	800684a <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006834:	6879      	ldr	r1, [r7, #4]
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	4613      	mov	r3, r2
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	4413      	add	r3, r2
 800683e:	00db      	lsls	r3, r3, #3
 8006840:	440b      	add	r3, r1
 8006842:	335c      	adds	r3, #92	; 0x5c
 8006844:	2201      	movs	r2, #1
 8006846:	701a      	strb	r2, [r3, #0]
 8006848:	e0d9      	b.n	80069fe <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800684a:	6879      	ldr	r1, [r7, #4]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	4613      	mov	r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4413      	add	r3, r2
 8006854:	00db      	lsls	r3, r3, #3
 8006856:	440b      	add	r3, r1
 8006858:	335d      	adds	r3, #93	; 0x5d
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	2b05      	cmp	r3, #5
 800685e:	d10a      	bne.n	8006876 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006860:	6879      	ldr	r1, [r7, #4]
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	4613      	mov	r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	4413      	add	r3, r2
 800686a:	00db      	lsls	r3, r3, #3
 800686c:	440b      	add	r3, r1
 800686e:	335c      	adds	r3, #92	; 0x5c
 8006870:	2205      	movs	r2, #5
 8006872:	701a      	strb	r2, [r3, #0]
 8006874:	e0c3      	b.n	80069fe <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006876:	6879      	ldr	r1, [r7, #4]
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	4613      	mov	r3, r2
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	4413      	add	r3, r2
 8006880:	00db      	lsls	r3, r3, #3
 8006882:	440b      	add	r3, r1
 8006884:	335d      	adds	r3, #93	; 0x5d
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	2b06      	cmp	r3, #6
 800688a:	d00a      	beq.n	80068a2 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800688c:	6879      	ldr	r1, [r7, #4]
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	4613      	mov	r3, r2
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4413      	add	r3, r2
 8006896:	00db      	lsls	r3, r3, #3
 8006898:	440b      	add	r3, r1
 800689a:	335d      	adds	r3, #93	; 0x5d
 800689c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800689e:	2b08      	cmp	r3, #8
 80068a0:	d156      	bne.n	8006950 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80068a2:	6879      	ldr	r1, [r7, #4]
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	4613      	mov	r3, r2
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	4413      	add	r3, r2
 80068ac:	00db      	lsls	r3, r3, #3
 80068ae:	440b      	add	r3, r1
 80068b0:	3358      	adds	r3, #88	; 0x58
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	1c59      	adds	r1, r3, #1
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	4613      	mov	r3, r2
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	4413      	add	r3, r2
 80068c0:	00db      	lsls	r3, r3, #3
 80068c2:	4403      	add	r3, r0
 80068c4:	3358      	adds	r3, #88	; 0x58
 80068c6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80068c8:	6879      	ldr	r1, [r7, #4]
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	4613      	mov	r3, r2
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	4413      	add	r3, r2
 80068d2:	00db      	lsls	r3, r3, #3
 80068d4:	440b      	add	r3, r1
 80068d6:	3358      	adds	r3, #88	; 0x58
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2b03      	cmp	r3, #3
 80068dc:	d914      	bls.n	8006908 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80068de:	6879      	ldr	r1, [r7, #4]
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	4613      	mov	r3, r2
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	4413      	add	r3, r2
 80068e8:	00db      	lsls	r3, r3, #3
 80068ea:	440b      	add	r3, r1
 80068ec:	3358      	adds	r3, #88	; 0x58
 80068ee:	2200      	movs	r2, #0
 80068f0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80068f2:	6879      	ldr	r1, [r7, #4]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	4613      	mov	r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	4413      	add	r3, r2
 80068fc:	00db      	lsls	r3, r3, #3
 80068fe:	440b      	add	r3, r1
 8006900:	335c      	adds	r3, #92	; 0x5c
 8006902:	2204      	movs	r2, #4
 8006904:	701a      	strb	r2, [r3, #0]
 8006906:	e009      	b.n	800691c <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006908:	6879      	ldr	r1, [r7, #4]
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	4613      	mov	r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	4413      	add	r3, r2
 8006912:	00db      	lsls	r3, r3, #3
 8006914:	440b      	add	r3, r1
 8006916:	335c      	adds	r3, #92	; 0x5c
 8006918:	2202      	movs	r2, #2
 800691a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	015a      	lsls	r2, r3, #5
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	4413      	add	r3, r2
 8006924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006932:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800693a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	015a      	lsls	r2, r3, #5
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	4413      	add	r3, r2
 8006944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006948:	461a      	mov	r2, r3
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	6013      	str	r3, [r2, #0]
 800694e:	e056      	b.n	80069fe <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006950:	6879      	ldr	r1, [r7, #4]
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	4613      	mov	r3, r2
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	4413      	add	r3, r2
 800695a:	00db      	lsls	r3, r3, #3
 800695c:	440b      	add	r3, r1
 800695e:	335d      	adds	r3, #93	; 0x5d
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	2b03      	cmp	r3, #3
 8006964:	d123      	bne.n	80069ae <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006966:	6879      	ldr	r1, [r7, #4]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	4613      	mov	r3, r2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	4413      	add	r3, r2
 8006970:	00db      	lsls	r3, r3, #3
 8006972:	440b      	add	r3, r1
 8006974:	335c      	adds	r3, #92	; 0x5c
 8006976:	2202      	movs	r2, #2
 8006978:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	015a      	lsls	r2, r3, #5
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	4413      	add	r3, r2
 8006982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006990:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006998:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	015a      	lsls	r2, r3, #5
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	4413      	add	r3, r2
 80069a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069a6:	461a      	mov	r2, r3
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	6013      	str	r3, [r2, #0]
 80069ac:	e027      	b.n	80069fe <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80069ae:	6879      	ldr	r1, [r7, #4]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	4613      	mov	r3, r2
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	4413      	add	r3, r2
 80069b8:	00db      	lsls	r3, r3, #3
 80069ba:	440b      	add	r3, r1
 80069bc:	335d      	adds	r3, #93	; 0x5d
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	2b07      	cmp	r3, #7
 80069c2:	d11c      	bne.n	80069fe <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80069c4:	6879      	ldr	r1, [r7, #4]
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	4613      	mov	r3, r2
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	4413      	add	r3, r2
 80069ce:	00db      	lsls	r3, r3, #3
 80069d0:	440b      	add	r3, r1
 80069d2:	3358      	adds	r3, #88	; 0x58
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	1c59      	adds	r1, r3, #1
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	4613      	mov	r3, r2
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	00db      	lsls	r3, r3, #3
 80069e4:	4403      	add	r3, r0
 80069e6:	3358      	adds	r3, #88	; 0x58
 80069e8:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80069ea:	6879      	ldr	r1, [r7, #4]
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	4613      	mov	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	4413      	add	r3, r2
 80069f4:	00db      	lsls	r3, r3, #3
 80069f6:	440b      	add	r3, r1
 80069f8:	335c      	adds	r3, #92	; 0x5c
 80069fa:	2204      	movs	r2, #4
 80069fc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	015a      	lsls	r2, r3, #5
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	4413      	add	r3, r2
 8006a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	b2d8      	uxtb	r0, r3
 8006a14:	6879      	ldr	r1, [r7, #4]
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	4613      	mov	r3, r2
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	4413      	add	r3, r2
 8006a1e:	00db      	lsls	r3, r3, #3
 8006a20:	440b      	add	r3, r1
 8006a22:	335c      	adds	r3, #92	; 0x5c
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	461a      	mov	r2, r3
 8006a28:	4601      	mov	r1, r0
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f00b fbaa 	bl	8012184 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006a30:	e0d1      	b.n	8006bd6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	015a      	lsls	r2, r3, #5
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	4413      	add	r3, r2
 8006a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a44:	2b80      	cmp	r3, #128	; 0x80
 8006a46:	d13e      	bne.n	8006ac6 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	015a      	lsls	r2, r3, #5
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	4413      	add	r3, r2
 8006a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	0151      	lsls	r1, r2, #5
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	440a      	add	r2, r1
 8006a5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a62:	f043 0302 	orr.w	r3, r3, #2
 8006a66:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8006a68:	6879      	ldr	r1, [r7, #4]
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	4413      	add	r3, r2
 8006a72:	00db      	lsls	r3, r3, #3
 8006a74:	440b      	add	r3, r1
 8006a76:	3358      	adds	r3, #88	; 0x58
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	1c59      	adds	r1, r3, #1
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	4613      	mov	r3, r2
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	4413      	add	r3, r2
 8006a86:	00db      	lsls	r3, r3, #3
 8006a88:	4403      	add	r3, r0
 8006a8a:	3358      	adds	r3, #88	; 0x58
 8006a8c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006a8e:	6879      	ldr	r1, [r7, #4]
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	4613      	mov	r3, r2
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	4413      	add	r3, r2
 8006a98:	00db      	lsls	r3, r3, #3
 8006a9a:	440b      	add	r3, r1
 8006a9c:	335d      	adds	r3, #93	; 0x5d
 8006a9e:	2206      	movs	r2, #6
 8006aa0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	b2d2      	uxtb	r2, r2
 8006aaa:	4611      	mov	r1, r2
 8006aac:	4618      	mov	r0, r3
 8006aae:	f005 faaa 	bl	800c006 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	015a      	lsls	r2, r3, #5
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	4413      	add	r3, r2
 8006aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006abe:	461a      	mov	r2, r3
 8006ac0:	2380      	movs	r3, #128	; 0x80
 8006ac2:	6093      	str	r3, [r2, #8]
}
 8006ac4:	e087      	b.n	8006bd6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	015a      	lsls	r2, r3, #5
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	4413      	add	r3, r2
 8006ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	f003 0310 	and.w	r3, r3, #16
 8006ad8:	2b10      	cmp	r3, #16
 8006ada:	d17c      	bne.n	8006bd6 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006adc:	6879      	ldr	r1, [r7, #4]
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4413      	add	r3, r2
 8006ae6:	00db      	lsls	r3, r3, #3
 8006ae8:	440b      	add	r3, r1
 8006aea:	333f      	adds	r3, #63	; 0x3f
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	2b03      	cmp	r3, #3
 8006af0:	d122      	bne.n	8006b38 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006af2:	6879      	ldr	r1, [r7, #4]
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	4613      	mov	r3, r2
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	4413      	add	r3, r2
 8006afc:	00db      	lsls	r3, r3, #3
 8006afe:	440b      	add	r3, r1
 8006b00:	3358      	adds	r3, #88	; 0x58
 8006b02:	2200      	movs	r2, #0
 8006b04:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	015a      	lsls	r2, r3, #5
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	0151      	lsls	r1, r2, #5
 8006b18:	693a      	ldr	r2, [r7, #16]
 8006b1a:	440a      	add	r2, r1
 8006b1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b20:	f043 0302 	orr.w	r3, r3, #2
 8006b24:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	b2d2      	uxtb	r2, r2
 8006b2e:	4611      	mov	r1, r2
 8006b30:	4618      	mov	r0, r3
 8006b32:	f005 fa68 	bl	800c006 <USB_HC_Halt>
 8006b36:	e045      	b.n	8006bc4 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006b38:	6879      	ldr	r1, [r7, #4]
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	4413      	add	r3, r2
 8006b42:	00db      	lsls	r3, r3, #3
 8006b44:	440b      	add	r3, r1
 8006b46:	333f      	adds	r3, #63	; 0x3f
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00a      	beq.n	8006b64 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006b4e:	6879      	ldr	r1, [r7, #4]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	4613      	mov	r3, r2
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	4413      	add	r3, r2
 8006b58:	00db      	lsls	r3, r3, #3
 8006b5a:	440b      	add	r3, r1
 8006b5c:	333f      	adds	r3, #63	; 0x3f
 8006b5e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006b60:	2b02      	cmp	r3, #2
 8006b62:	d12f      	bne.n	8006bc4 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006b64:	6879      	ldr	r1, [r7, #4]
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	4613      	mov	r3, r2
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	00db      	lsls	r3, r3, #3
 8006b70:	440b      	add	r3, r1
 8006b72:	3358      	adds	r3, #88	; 0x58
 8006b74:	2200      	movs	r2, #0
 8006b76:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d121      	bne.n	8006bc4 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8006b80:	6879      	ldr	r1, [r7, #4]
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	4613      	mov	r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	4413      	add	r3, r2
 8006b8a:	00db      	lsls	r3, r3, #3
 8006b8c:	440b      	add	r3, r1
 8006b8e:	335d      	adds	r3, #93	; 0x5d
 8006b90:	2203      	movs	r2, #3
 8006b92:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	015a      	lsls	r2, r3, #5
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	0151      	lsls	r1, r2, #5
 8006ba6:	693a      	ldr	r2, [r7, #16]
 8006ba8:	440a      	add	r2, r1
 8006baa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bae:	f043 0302 	orr.w	r3, r3, #2
 8006bb2:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	b2d2      	uxtb	r2, r2
 8006bbc:	4611      	mov	r1, r2
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f005 fa21 	bl	800c006 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	015a      	lsls	r2, r3, #5
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	4413      	add	r3, r2
 8006bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	2310      	movs	r3, #16
 8006bd4:	6093      	str	r3, [r2, #8]
}
 8006bd6:	bf00      	nop
 8006bd8:	3718      	adds	r7, #24
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b086      	sub	sp, #24
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
 8006be6:	460b      	mov	r3, r1
 8006be8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8006bf4:	78fb      	ldrb	r3, [r7, #3]
 8006bf6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	015a      	lsls	r2, r3, #5
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	4413      	add	r3, r2
 8006c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	f003 0304 	and.w	r3, r3, #4
 8006c0a:	2b04      	cmp	r3, #4
 8006c0c:	d119      	bne.n	8006c42 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	015a      	lsls	r2, r3, #5
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	4413      	add	r3, r2
 8006c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	2304      	movs	r3, #4
 8006c1e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	015a      	lsls	r2, r3, #5
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	4413      	add	r3, r2
 8006c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	0151      	lsls	r1, r2, #5
 8006c32:	693a      	ldr	r2, [r7, #16]
 8006c34:	440a      	add	r2, r1
 8006c36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c3a:	f043 0302 	orr.w	r3, r3, #2
 8006c3e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8006c40:	e33e      	b.n	80072c0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	015a      	lsls	r2, r3, #5
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	4413      	add	r3, r2
 8006c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	f003 0320 	and.w	r3, r3, #32
 8006c54:	2b20      	cmp	r3, #32
 8006c56:	d141      	bne.n	8006cdc <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	015a      	lsls	r2, r3, #5
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	4413      	add	r3, r2
 8006c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c64:	461a      	mov	r2, r3
 8006c66:	2320      	movs	r3, #32
 8006c68:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8006c6a:	6879      	ldr	r1, [r7, #4]
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	4613      	mov	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4413      	add	r3, r2
 8006c74:	00db      	lsls	r3, r3, #3
 8006c76:	440b      	add	r3, r1
 8006c78:	333d      	adds	r3, #61	; 0x3d
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	f040 831f 	bne.w	80072c0 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8006c82:	6879      	ldr	r1, [r7, #4]
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	4613      	mov	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4413      	add	r3, r2
 8006c8c:	00db      	lsls	r3, r3, #3
 8006c8e:	440b      	add	r3, r1
 8006c90:	333d      	adds	r3, #61	; 0x3d
 8006c92:	2200      	movs	r2, #0
 8006c94:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006c96:	6879      	ldr	r1, [r7, #4]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4413      	add	r3, r2
 8006ca0:	00db      	lsls	r3, r3, #3
 8006ca2:	440b      	add	r3, r1
 8006ca4:	335c      	adds	r3, #92	; 0x5c
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	015a      	lsls	r2, r3, #5
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	0151      	lsls	r1, r2, #5
 8006cbc:	693a      	ldr	r2, [r7, #16]
 8006cbe:	440a      	add	r2, r1
 8006cc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cc4:	f043 0302 	orr.w	r3, r3, #2
 8006cc8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	b2d2      	uxtb	r2, r2
 8006cd2:	4611      	mov	r1, r2
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f005 f996 	bl	800c006 <USB_HC_Halt>
}
 8006cda:	e2f1      	b.n	80072c0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	015a      	lsls	r2, r3, #5
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cee:	2b40      	cmp	r3, #64	; 0x40
 8006cf0:	d13f      	bne.n	8006d72 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8006cf2:	6879      	ldr	r1, [r7, #4]
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	00db      	lsls	r3, r3, #3
 8006cfe:	440b      	add	r3, r1
 8006d00:	335d      	adds	r3, #93	; 0x5d
 8006d02:	2204      	movs	r2, #4
 8006d04:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8006d06:	6879      	ldr	r1, [r7, #4]
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	00db      	lsls	r3, r3, #3
 8006d12:	440b      	add	r3, r1
 8006d14:	333d      	adds	r3, #61	; 0x3d
 8006d16:	2201      	movs	r2, #1
 8006d18:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006d1a:	6879      	ldr	r1, [r7, #4]
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	4413      	add	r3, r2
 8006d24:	00db      	lsls	r3, r3, #3
 8006d26:	440b      	add	r3, r1
 8006d28:	3358      	adds	r3, #88	; 0x58
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	015a      	lsls	r2, r3, #5
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	4413      	add	r3, r2
 8006d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	0151      	lsls	r1, r2, #5
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	440a      	add	r2, r1
 8006d44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d48:	f043 0302 	orr.w	r3, r3, #2
 8006d4c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	b2d2      	uxtb	r2, r2
 8006d56:	4611      	mov	r1, r2
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f005 f954 	bl	800c006 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	015a      	lsls	r2, r3, #5
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	4413      	add	r3, r2
 8006d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	2340      	movs	r3, #64	; 0x40
 8006d6e:	6093      	str	r3, [r2, #8]
}
 8006d70:	e2a6      	b.n	80072c0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	015a      	lsls	r2, r3, #5
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	4413      	add	r3, r2
 8006d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d88:	d122      	bne.n	8006dd0 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	015a      	lsls	r2, r3, #5
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	4413      	add	r3, r2
 8006d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	0151      	lsls	r1, r2, #5
 8006d9c:	693a      	ldr	r2, [r7, #16]
 8006d9e:	440a      	add	r2, r1
 8006da0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006da4:	f043 0302 	orr.w	r3, r3, #2
 8006da8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	b2d2      	uxtb	r2, r2
 8006db2:	4611      	mov	r1, r2
 8006db4:	4618      	mov	r0, r3
 8006db6:	f005 f926 	bl	800c006 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	015a      	lsls	r2, r3, #5
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dcc:	6093      	str	r3, [r2, #8]
}
 8006dce:	e277      	b.n	80072c0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	015a      	lsls	r2, r3, #5
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f003 0301 	and.w	r3, r3, #1
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d135      	bne.n	8006e52 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006de6:	6879      	ldr	r1, [r7, #4]
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	4613      	mov	r3, r2
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	4413      	add	r3, r2
 8006df0:	00db      	lsls	r3, r3, #3
 8006df2:	440b      	add	r3, r1
 8006df4:	3358      	adds	r3, #88	; 0x58
 8006df6:	2200      	movs	r2, #0
 8006df8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	015a      	lsls	r2, r3, #5
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	4413      	add	r3, r2
 8006e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	0151      	lsls	r1, r2, #5
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	440a      	add	r2, r1
 8006e10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e14:	f043 0302 	orr.w	r3, r3, #2
 8006e18:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	b2d2      	uxtb	r2, r2
 8006e22:	4611      	mov	r1, r2
 8006e24:	4618      	mov	r0, r3
 8006e26:	f005 f8ee 	bl	800c006 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	015a      	lsls	r2, r3, #5
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	4413      	add	r3, r2
 8006e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e36:	461a      	mov	r2, r3
 8006e38:	2301      	movs	r3, #1
 8006e3a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006e3c:	6879      	ldr	r1, [r7, #4]
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	4613      	mov	r3, r2
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	4413      	add	r3, r2
 8006e46:	00db      	lsls	r3, r3, #3
 8006e48:	440b      	add	r3, r1
 8006e4a:	335d      	adds	r3, #93	; 0x5d
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	701a      	strb	r2, [r3, #0]
}
 8006e50:	e236      	b.n	80072c0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	015a      	lsls	r2, r3, #5
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	4413      	add	r3, r2
 8006e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	f003 0308 	and.w	r3, r3, #8
 8006e64:	2b08      	cmp	r3, #8
 8006e66:	d12b      	bne.n	8006ec0 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	015a      	lsls	r2, r3, #5
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	4413      	add	r3, r2
 8006e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e74:	461a      	mov	r2, r3
 8006e76:	2308      	movs	r3, #8
 8006e78:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	015a      	lsls	r2, r3, #5
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	4413      	add	r3, r2
 8006e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	0151      	lsls	r1, r2, #5
 8006e8c:	693a      	ldr	r2, [r7, #16]
 8006e8e:	440a      	add	r2, r1
 8006e90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e94:	f043 0302 	orr.w	r3, r3, #2
 8006e98:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	b2d2      	uxtb	r2, r2
 8006ea2:	4611      	mov	r1, r2
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f005 f8ae 	bl	800c006 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8006eaa:	6879      	ldr	r1, [r7, #4]
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	4413      	add	r3, r2
 8006eb4:	00db      	lsls	r3, r3, #3
 8006eb6:	440b      	add	r3, r1
 8006eb8:	335d      	adds	r3, #93	; 0x5d
 8006eba:	2205      	movs	r2, #5
 8006ebc:	701a      	strb	r2, [r3, #0]
}
 8006ebe:	e1ff      	b.n	80072c0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	015a      	lsls	r2, r3, #5
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f003 0310 	and.w	r3, r3, #16
 8006ed2:	2b10      	cmp	r3, #16
 8006ed4:	d155      	bne.n	8006f82 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006ed6:	6879      	ldr	r1, [r7, #4]
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	4613      	mov	r3, r2
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	4413      	add	r3, r2
 8006ee0:	00db      	lsls	r3, r3, #3
 8006ee2:	440b      	add	r3, r1
 8006ee4:	3358      	adds	r3, #88	; 0x58
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8006eea:	6879      	ldr	r1, [r7, #4]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	4613      	mov	r3, r2
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4413      	add	r3, r2
 8006ef4:	00db      	lsls	r3, r3, #3
 8006ef6:	440b      	add	r3, r1
 8006ef8:	335d      	adds	r3, #93	; 0x5d
 8006efa:	2203      	movs	r2, #3
 8006efc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8006efe:	6879      	ldr	r1, [r7, #4]
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	4613      	mov	r3, r2
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4413      	add	r3, r2
 8006f08:	00db      	lsls	r3, r3, #3
 8006f0a:	440b      	add	r3, r1
 8006f0c:	333d      	adds	r3, #61	; 0x3d
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d114      	bne.n	8006f3e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8006f14:	6879      	ldr	r1, [r7, #4]
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	4613      	mov	r3, r2
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	4413      	add	r3, r2
 8006f1e:	00db      	lsls	r3, r3, #3
 8006f20:	440b      	add	r3, r1
 8006f22:	333c      	adds	r3, #60	; 0x3c
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d109      	bne.n	8006f3e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8006f2a:	6879      	ldr	r1, [r7, #4]
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	4413      	add	r3, r2
 8006f34:	00db      	lsls	r3, r3, #3
 8006f36:	440b      	add	r3, r1
 8006f38:	333d      	adds	r3, #61	; 0x3d
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	015a      	lsls	r2, r3, #5
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	4413      	add	r3, r2
 8006f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	0151      	lsls	r1, r2, #5
 8006f50:	693a      	ldr	r2, [r7, #16]
 8006f52:	440a      	add	r2, r1
 8006f54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f58:	f043 0302 	orr.w	r3, r3, #2
 8006f5c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	b2d2      	uxtb	r2, r2
 8006f66:	4611      	mov	r1, r2
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f005 f84c 	bl	800c006 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	015a      	lsls	r2, r3, #5
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	4413      	add	r3, r2
 8006f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	2310      	movs	r3, #16
 8006f7e:	6093      	str	r3, [r2, #8]
}
 8006f80:	e19e      	b.n	80072c0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	015a      	lsls	r2, r3, #5
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	4413      	add	r3, r2
 8006f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f94:	2b80      	cmp	r3, #128	; 0x80
 8006f96:	d12b      	bne.n	8006ff0 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	015a      	lsls	r2, r3, #5
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	68fa      	ldr	r2, [r7, #12]
 8006fa8:	0151      	lsls	r1, r2, #5
 8006faa:	693a      	ldr	r2, [r7, #16]
 8006fac:	440a      	add	r2, r1
 8006fae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fb2:	f043 0302 	orr.w	r3, r3, #2
 8006fb6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	b2d2      	uxtb	r2, r2
 8006fc0:	4611      	mov	r1, r2
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f005 f81f 	bl	800c006 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006fc8:	6879      	ldr	r1, [r7, #4]
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	4613      	mov	r3, r2
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	4413      	add	r3, r2
 8006fd2:	00db      	lsls	r3, r3, #3
 8006fd4:	440b      	add	r3, r1
 8006fd6:	335d      	adds	r3, #93	; 0x5d
 8006fd8:	2206      	movs	r2, #6
 8006fda:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	015a      	lsls	r2, r3, #5
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fe8:	461a      	mov	r2, r3
 8006fea:	2380      	movs	r3, #128	; 0x80
 8006fec:	6093      	str	r3, [r2, #8]
}
 8006fee:	e167      	b.n	80072c0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	015a      	lsls	r2, r3, #5
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007006:	d135      	bne.n	8007074 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	015a      	lsls	r2, r3, #5
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	4413      	add	r3, r2
 8007010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	0151      	lsls	r1, r2, #5
 800701a:	693a      	ldr	r2, [r7, #16]
 800701c:	440a      	add	r2, r1
 800701e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007022:	f043 0302 	orr.w	r3, r3, #2
 8007026:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	b2d2      	uxtb	r2, r2
 8007030:	4611      	mov	r1, r2
 8007032:	4618      	mov	r0, r3
 8007034:	f004 ffe7 	bl	800c006 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	015a      	lsls	r2, r3, #5
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	4413      	add	r3, r2
 8007040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007044:	461a      	mov	r2, r3
 8007046:	2310      	movs	r3, #16
 8007048:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	015a      	lsls	r2, r3, #5
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	4413      	add	r3, r2
 8007052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007056:	461a      	mov	r2, r3
 8007058:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800705c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800705e:	6879      	ldr	r1, [r7, #4]
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	4613      	mov	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4413      	add	r3, r2
 8007068:	00db      	lsls	r3, r3, #3
 800706a:	440b      	add	r3, r1
 800706c:	335d      	adds	r3, #93	; 0x5d
 800706e:	2208      	movs	r2, #8
 8007070:	701a      	strb	r2, [r3, #0]
}
 8007072:	e125      	b.n	80072c0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	015a      	lsls	r2, r3, #5
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	4413      	add	r3, r2
 800707c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f003 0302 	and.w	r3, r3, #2
 8007086:	2b02      	cmp	r3, #2
 8007088:	f040 811a 	bne.w	80072c0 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	015a      	lsls	r2, r3, #5
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	4413      	add	r3, r2
 8007094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	0151      	lsls	r1, r2, #5
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	440a      	add	r2, r1
 80070a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070a6:	f023 0302 	bic.w	r3, r3, #2
 80070aa:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80070ac:	6879      	ldr	r1, [r7, #4]
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	4613      	mov	r3, r2
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	4413      	add	r3, r2
 80070b6:	00db      	lsls	r3, r3, #3
 80070b8:	440b      	add	r3, r1
 80070ba:	335d      	adds	r3, #93	; 0x5d
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d137      	bne.n	8007132 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80070c2:	6879      	ldr	r1, [r7, #4]
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	4613      	mov	r3, r2
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	4413      	add	r3, r2
 80070cc:	00db      	lsls	r3, r3, #3
 80070ce:	440b      	add	r3, r1
 80070d0:	335c      	adds	r3, #92	; 0x5c
 80070d2:	2201      	movs	r2, #1
 80070d4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80070d6:	6879      	ldr	r1, [r7, #4]
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	4613      	mov	r3, r2
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	4413      	add	r3, r2
 80070e0:	00db      	lsls	r3, r3, #3
 80070e2:	440b      	add	r3, r1
 80070e4:	333f      	adds	r3, #63	; 0x3f
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	d00b      	beq.n	8007104 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80070ec:	6879      	ldr	r1, [r7, #4]
 80070ee:	68fa      	ldr	r2, [r7, #12]
 80070f0:	4613      	mov	r3, r2
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	4413      	add	r3, r2
 80070f6:	00db      	lsls	r3, r3, #3
 80070f8:	440b      	add	r3, r1
 80070fa:	333f      	adds	r3, #63	; 0x3f
 80070fc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80070fe:	2b03      	cmp	r3, #3
 8007100:	f040 80c5 	bne.w	800728e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8007104:	6879      	ldr	r1, [r7, #4]
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	4613      	mov	r3, r2
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	4413      	add	r3, r2
 800710e:	00db      	lsls	r3, r3, #3
 8007110:	440b      	add	r3, r1
 8007112:	3351      	adds	r3, #81	; 0x51
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	f083 0301 	eor.w	r3, r3, #1
 800711a:	b2d8      	uxtb	r0, r3
 800711c:	6879      	ldr	r1, [r7, #4]
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	4613      	mov	r3, r2
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	4413      	add	r3, r2
 8007126:	00db      	lsls	r3, r3, #3
 8007128:	440b      	add	r3, r1
 800712a:	3351      	adds	r3, #81	; 0x51
 800712c:	4602      	mov	r2, r0
 800712e:	701a      	strb	r2, [r3, #0]
 8007130:	e0ad      	b.n	800728e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8007132:	6879      	ldr	r1, [r7, #4]
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	4613      	mov	r3, r2
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4413      	add	r3, r2
 800713c:	00db      	lsls	r3, r3, #3
 800713e:	440b      	add	r3, r1
 8007140:	335d      	adds	r3, #93	; 0x5d
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	2b03      	cmp	r3, #3
 8007146:	d10a      	bne.n	800715e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007148:	6879      	ldr	r1, [r7, #4]
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	4613      	mov	r3, r2
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	4413      	add	r3, r2
 8007152:	00db      	lsls	r3, r3, #3
 8007154:	440b      	add	r3, r1
 8007156:	335c      	adds	r3, #92	; 0x5c
 8007158:	2202      	movs	r2, #2
 800715a:	701a      	strb	r2, [r3, #0]
 800715c:	e097      	b.n	800728e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800715e:	6879      	ldr	r1, [r7, #4]
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	4613      	mov	r3, r2
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	4413      	add	r3, r2
 8007168:	00db      	lsls	r3, r3, #3
 800716a:	440b      	add	r3, r1
 800716c:	335d      	adds	r3, #93	; 0x5d
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	2b04      	cmp	r3, #4
 8007172:	d10a      	bne.n	800718a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007174:	6879      	ldr	r1, [r7, #4]
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	4613      	mov	r3, r2
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	4413      	add	r3, r2
 800717e:	00db      	lsls	r3, r3, #3
 8007180:	440b      	add	r3, r1
 8007182:	335c      	adds	r3, #92	; 0x5c
 8007184:	2202      	movs	r2, #2
 8007186:	701a      	strb	r2, [r3, #0]
 8007188:	e081      	b.n	800728e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800718a:	6879      	ldr	r1, [r7, #4]
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	4613      	mov	r3, r2
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	4413      	add	r3, r2
 8007194:	00db      	lsls	r3, r3, #3
 8007196:	440b      	add	r3, r1
 8007198:	335d      	adds	r3, #93	; 0x5d
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	2b05      	cmp	r3, #5
 800719e:	d10a      	bne.n	80071b6 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80071a0:	6879      	ldr	r1, [r7, #4]
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	4613      	mov	r3, r2
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4413      	add	r3, r2
 80071aa:	00db      	lsls	r3, r3, #3
 80071ac:	440b      	add	r3, r1
 80071ae:	335c      	adds	r3, #92	; 0x5c
 80071b0:	2205      	movs	r2, #5
 80071b2:	701a      	strb	r2, [r3, #0]
 80071b4:	e06b      	b.n	800728e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80071b6:	6879      	ldr	r1, [r7, #4]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	4613      	mov	r3, r2
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	4413      	add	r3, r2
 80071c0:	00db      	lsls	r3, r3, #3
 80071c2:	440b      	add	r3, r1
 80071c4:	335d      	adds	r3, #93	; 0x5d
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	2b06      	cmp	r3, #6
 80071ca:	d00a      	beq.n	80071e2 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80071cc:	6879      	ldr	r1, [r7, #4]
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	4613      	mov	r3, r2
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	4413      	add	r3, r2
 80071d6:	00db      	lsls	r3, r3, #3
 80071d8:	440b      	add	r3, r1
 80071da:	335d      	adds	r3, #93	; 0x5d
 80071dc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80071de:	2b08      	cmp	r3, #8
 80071e0:	d155      	bne.n	800728e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80071e2:	6879      	ldr	r1, [r7, #4]
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	4613      	mov	r3, r2
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	4413      	add	r3, r2
 80071ec:	00db      	lsls	r3, r3, #3
 80071ee:	440b      	add	r3, r1
 80071f0:	3358      	adds	r3, #88	; 0x58
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	1c59      	adds	r1, r3, #1
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	4613      	mov	r3, r2
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4413      	add	r3, r2
 8007200:	00db      	lsls	r3, r3, #3
 8007202:	4403      	add	r3, r0
 8007204:	3358      	adds	r3, #88	; 0x58
 8007206:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8007208:	6879      	ldr	r1, [r7, #4]
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	4613      	mov	r3, r2
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	4413      	add	r3, r2
 8007212:	00db      	lsls	r3, r3, #3
 8007214:	440b      	add	r3, r1
 8007216:	3358      	adds	r3, #88	; 0x58
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2b03      	cmp	r3, #3
 800721c:	d914      	bls.n	8007248 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800721e:	6879      	ldr	r1, [r7, #4]
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	4613      	mov	r3, r2
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	4413      	add	r3, r2
 8007228:	00db      	lsls	r3, r3, #3
 800722a:	440b      	add	r3, r1
 800722c:	3358      	adds	r3, #88	; 0x58
 800722e:	2200      	movs	r2, #0
 8007230:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007232:	6879      	ldr	r1, [r7, #4]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	4613      	mov	r3, r2
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	4413      	add	r3, r2
 800723c:	00db      	lsls	r3, r3, #3
 800723e:	440b      	add	r3, r1
 8007240:	335c      	adds	r3, #92	; 0x5c
 8007242:	2204      	movs	r2, #4
 8007244:	701a      	strb	r2, [r3, #0]
 8007246:	e009      	b.n	800725c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007248:	6879      	ldr	r1, [r7, #4]
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	4613      	mov	r3, r2
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	4413      	add	r3, r2
 8007252:	00db      	lsls	r3, r3, #3
 8007254:	440b      	add	r3, r1
 8007256:	335c      	adds	r3, #92	; 0x5c
 8007258:	2202      	movs	r2, #2
 800725a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	015a      	lsls	r2, r3, #5
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	4413      	add	r3, r2
 8007264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007272:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800727a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	015a      	lsls	r2, r3, #5
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	4413      	add	r3, r2
 8007284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007288:	461a      	mov	r2, r3
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	015a      	lsls	r2, r3, #5
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	4413      	add	r3, r2
 8007296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800729a:	461a      	mov	r2, r3
 800729c:	2302      	movs	r3, #2
 800729e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	b2d8      	uxtb	r0, r3
 80072a4:	6879      	ldr	r1, [r7, #4]
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	4613      	mov	r3, r2
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4413      	add	r3, r2
 80072ae:	00db      	lsls	r3, r3, #3
 80072b0:	440b      	add	r3, r1
 80072b2:	335c      	adds	r3, #92	; 0x5c
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	461a      	mov	r2, r3
 80072b8:	4601      	mov	r1, r0
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f00a ff62 	bl	8012184 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80072c0:	bf00      	nop
 80072c2:	3718      	adds	r7, #24
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b08a      	sub	sp, #40	; 0x28
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	6a1b      	ldr	r3, [r3, #32]
 80072e0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	f003 030f 	and.w	r3, r3, #15
 80072e8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	0c5b      	lsrs	r3, r3, #17
 80072ee:	f003 030f 	and.w	r3, r3, #15
 80072f2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	091b      	lsrs	r3, r3, #4
 80072f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072fc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	2b02      	cmp	r3, #2
 8007302:	d003      	beq.n	800730c <HCD_RXQLVL_IRQHandler+0x44>
 8007304:	2b05      	cmp	r3, #5
 8007306:	f000 8082 	beq.w	800740e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800730a:	e083      	b.n	8007414 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d07f      	beq.n	8007412 <HCD_RXQLVL_IRQHandler+0x14a>
 8007312:	6879      	ldr	r1, [r7, #4]
 8007314:	69ba      	ldr	r2, [r7, #24]
 8007316:	4613      	mov	r3, r2
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	4413      	add	r3, r2
 800731c:	00db      	lsls	r3, r3, #3
 800731e:	440b      	add	r3, r1
 8007320:	3344      	adds	r3, #68	; 0x44
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d074      	beq.n	8007412 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6818      	ldr	r0, [r3, #0]
 800732c:	6879      	ldr	r1, [r7, #4]
 800732e:	69ba      	ldr	r2, [r7, #24]
 8007330:	4613      	mov	r3, r2
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	4413      	add	r3, r2
 8007336:	00db      	lsls	r3, r3, #3
 8007338:	440b      	add	r3, r1
 800733a:	3344      	adds	r3, #68	; 0x44
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	693a      	ldr	r2, [r7, #16]
 8007340:	b292      	uxth	r2, r2
 8007342:	4619      	mov	r1, r3
 8007344:	f004 fa0b 	bl	800b75e <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8007348:	6879      	ldr	r1, [r7, #4]
 800734a:	69ba      	ldr	r2, [r7, #24]
 800734c:	4613      	mov	r3, r2
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	4413      	add	r3, r2
 8007352:	00db      	lsls	r3, r3, #3
 8007354:	440b      	add	r3, r1
 8007356:	3344      	adds	r3, #68	; 0x44
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	18d1      	adds	r1, r2, r3
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	69ba      	ldr	r2, [r7, #24]
 8007362:	4613      	mov	r3, r2
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	4413      	add	r3, r2
 8007368:	00db      	lsls	r3, r3, #3
 800736a:	4403      	add	r3, r0
 800736c:	3344      	adds	r3, #68	; 0x44
 800736e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8007370:	6879      	ldr	r1, [r7, #4]
 8007372:	69ba      	ldr	r2, [r7, #24]
 8007374:	4613      	mov	r3, r2
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	4413      	add	r3, r2
 800737a:	00db      	lsls	r3, r3, #3
 800737c:	440b      	add	r3, r1
 800737e:	334c      	adds	r3, #76	; 0x4c
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	18d1      	adds	r1, r2, r3
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	69ba      	ldr	r2, [r7, #24]
 800738a:	4613      	mov	r3, r2
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	4413      	add	r3, r2
 8007390:	00db      	lsls	r3, r3, #3
 8007392:	4403      	add	r3, r0
 8007394:	334c      	adds	r3, #76	; 0x4c
 8007396:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	015a      	lsls	r2, r3, #5
 800739c:	6a3b      	ldr	r3, [r7, #32]
 800739e:	4413      	add	r3, r2
 80073a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073a4:	691a      	ldr	r2, [r3, #16]
 80073a6:	4b1d      	ldr	r3, [pc, #116]	; (800741c <HCD_RXQLVL_IRQHandler+0x154>)
 80073a8:	4013      	ands	r3, r2
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d031      	beq.n	8007412 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	015a      	lsls	r2, r3, #5
 80073b2:	6a3b      	ldr	r3, [r7, #32]
 80073b4:	4413      	add	r3, r2
 80073b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80073c4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073cc:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	015a      	lsls	r2, r3, #5
 80073d2:	6a3b      	ldr	r3, [r7, #32]
 80073d4:	4413      	add	r3, r2
 80073d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073da:	461a      	mov	r2, r3
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80073e0:	6879      	ldr	r1, [r7, #4]
 80073e2:	69ba      	ldr	r2, [r7, #24]
 80073e4:	4613      	mov	r3, r2
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	4413      	add	r3, r2
 80073ea:	00db      	lsls	r3, r3, #3
 80073ec:	440b      	add	r3, r1
 80073ee:	3350      	adds	r3, #80	; 0x50
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	f083 0301 	eor.w	r3, r3, #1
 80073f6:	b2d8      	uxtb	r0, r3
 80073f8:	6879      	ldr	r1, [r7, #4]
 80073fa:	69ba      	ldr	r2, [r7, #24]
 80073fc:	4613      	mov	r3, r2
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	4413      	add	r3, r2
 8007402:	00db      	lsls	r3, r3, #3
 8007404:	440b      	add	r3, r1
 8007406:	3350      	adds	r3, #80	; 0x50
 8007408:	4602      	mov	r2, r0
 800740a:	701a      	strb	r2, [r3, #0]
      break;
 800740c:	e001      	b.n	8007412 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800740e:	bf00      	nop
 8007410:	e000      	b.n	8007414 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8007412:	bf00      	nop
  }
}
 8007414:	bf00      	nop
 8007416:	3728      	adds	r7, #40	; 0x28
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}
 800741c:	1ff80000 	.word	0x1ff80000

08007420 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b086      	sub	sp, #24
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800744c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f003 0302 	and.w	r3, r3, #2
 8007454:	2b02      	cmp	r3, #2
 8007456:	d10b      	bne.n	8007470 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f003 0301 	and.w	r3, r3, #1
 800745e:	2b01      	cmp	r3, #1
 8007460:	d102      	bne.n	8007468 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f00a fe72 	bl	801214c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	f043 0302 	orr.w	r3, r3, #2
 800746e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f003 0308 	and.w	r3, r3, #8
 8007476:	2b08      	cmp	r3, #8
 8007478:	d132      	bne.n	80074e0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	f043 0308 	orr.w	r3, r3, #8
 8007480:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f003 0304 	and.w	r3, r3, #4
 8007488:	2b04      	cmp	r3, #4
 800748a:	d126      	bne.n	80074da <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	699b      	ldr	r3, [r3, #24]
 8007490:	2b02      	cmp	r3, #2
 8007492:	d113      	bne.n	80074bc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800749a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800749e:	d106      	bne.n	80074ae <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2102      	movs	r1, #2
 80074a6:	4618      	mov	r0, r3
 80074a8:	f004 fa88 	bl	800b9bc <USB_InitFSLSPClkSel>
 80074ac:	e011      	b.n	80074d2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2101      	movs	r1, #1
 80074b4:	4618      	mov	r0, r3
 80074b6:	f004 fa81 	bl	800b9bc <USB_InitFSLSPClkSel>
 80074ba:	e00a      	b.n	80074d2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d106      	bne.n	80074d2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074ca:	461a      	mov	r2, r3
 80074cc:	f64e 2360 	movw	r3, #60000	; 0xea60
 80074d0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f00a fe64 	bl	80121a0 <HAL_HCD_PortEnabled_Callback>
 80074d8:	e002      	b.n	80074e0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f00a fe6e 	bl	80121bc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f003 0320 	and.w	r3, r3, #32
 80074e6:	2b20      	cmp	r3, #32
 80074e8:	d103      	bne.n	80074f2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	f043 0320 	orr.w	r3, r3, #32
 80074f0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80074f8:	461a      	mov	r2, r3
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	6013      	str	r3, [r2, #0]
}
 80074fe:	bf00      	nop
 8007500:	3718      	adds	r7, #24
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
	...

08007508 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d101      	bne.n	800751a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e07f      	b.n	800761a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007520:	b2db      	uxtb	r3, r3
 8007522:	2b00      	cmp	r3, #0
 8007524:	d106      	bne.n	8007534 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f7fa fb62 	bl	8001bf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2224      	movs	r2, #36	; 0x24
 8007538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f022 0201 	bic.w	r2, r2, #1
 800754a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	685a      	ldr	r2, [r3, #4]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007558:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	689a      	ldr	r2, [r3, #8]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007568:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	2b01      	cmp	r3, #1
 8007570:	d107      	bne.n	8007582 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	689a      	ldr	r2, [r3, #8]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800757e:	609a      	str	r2, [r3, #8]
 8007580:	e006      	b.n	8007590 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	689a      	ldr	r2, [r3, #8]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800758e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	2b02      	cmp	r3, #2
 8007596:	d104      	bne.n	80075a2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	6859      	ldr	r1, [r3, #4]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	4b1d      	ldr	r3, [pc, #116]	; (8007624 <HAL_I2C_Init+0x11c>)
 80075ae:	430b      	orrs	r3, r1
 80075b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68da      	ldr	r2, [r3, #12]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80075c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	691a      	ldr	r2, [r3, #16]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	695b      	ldr	r3, [r3, #20]
 80075ca:	ea42 0103 	orr.w	r1, r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	699b      	ldr	r3, [r3, #24]
 80075d2:	021a      	lsls	r2, r3, #8
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	430a      	orrs	r2, r1
 80075da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	69d9      	ldr	r1, [r3, #28]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a1a      	ldr	r2, [r3, #32]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	430a      	orrs	r2, r1
 80075ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f042 0201 	orr.w	r2, r2, #1
 80075fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2220      	movs	r2, #32
 8007606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3708      	adds	r7, #8
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	02008000 	.word	0x02008000

08007628 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d101      	bne.n	800763a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e021      	b.n	800767e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2224      	movs	r2, #36	; 0x24
 800763e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f022 0201 	bic.w	r2, r2, #1
 8007650:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f7fa fb32 	bl	8001cbc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3708      	adds	r7, #8
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
	...

08007688 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b088      	sub	sp, #32
 800768c:	af02      	add	r7, sp, #8
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	4608      	mov	r0, r1
 8007692:	4611      	mov	r1, r2
 8007694:	461a      	mov	r2, r3
 8007696:	4603      	mov	r3, r0
 8007698:	817b      	strh	r3, [r7, #10]
 800769a:	460b      	mov	r3, r1
 800769c:	813b      	strh	r3, [r7, #8]
 800769e:	4613      	mov	r3, r2
 80076a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	2b20      	cmp	r3, #32
 80076ac:	f040 80f9 	bne.w	80078a2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80076b0:	6a3b      	ldr	r3, [r7, #32]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d002      	beq.n	80076bc <HAL_I2C_Mem_Write+0x34>
 80076b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d105      	bne.n	80076c8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076c2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e0ed      	b.n	80078a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d101      	bne.n	80076d6 <HAL_I2C_Mem_Write+0x4e>
 80076d2:	2302      	movs	r3, #2
 80076d4:	e0e6      	b.n	80078a4 <HAL_I2C_Mem_Write+0x21c>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2201      	movs	r2, #1
 80076da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80076de:	f7fd f839 	bl	8004754 <HAL_GetTick>
 80076e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	9300      	str	r3, [sp, #0]
 80076e8:	2319      	movs	r3, #25
 80076ea:	2201      	movs	r2, #1
 80076ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f000 fad1 	bl	8007c98 <I2C_WaitOnFlagUntilTimeout>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d001      	beq.n	8007700 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e0d1      	b.n	80078a4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2221      	movs	r2, #33	; 0x21
 8007704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2240      	movs	r2, #64	; 0x40
 800770c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2200      	movs	r2, #0
 8007714:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	6a3a      	ldr	r2, [r7, #32]
 800771a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007720:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2200      	movs	r2, #0
 8007726:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007728:	88f8      	ldrh	r0, [r7, #6]
 800772a:	893a      	ldrh	r2, [r7, #8]
 800772c:	8979      	ldrh	r1, [r7, #10]
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	9301      	str	r3, [sp, #4]
 8007732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	4603      	mov	r3, r0
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f000 f9e1 	bl	8007b00 <I2C_RequestMemoryWrite>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d005      	beq.n	8007750 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2200      	movs	r2, #0
 8007748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	e0a9      	b.n	80078a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007754:	b29b      	uxth	r3, r3
 8007756:	2bff      	cmp	r3, #255	; 0xff
 8007758:	d90e      	bls.n	8007778 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	22ff      	movs	r2, #255	; 0xff
 800775e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007764:	b2da      	uxtb	r2, r3
 8007766:	8979      	ldrh	r1, [r7, #10]
 8007768:	2300      	movs	r3, #0
 800776a:	9300      	str	r3, [sp, #0]
 800776c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007770:	68f8      	ldr	r0, [r7, #12]
 8007772:	f000 fbb3 	bl	8007edc <I2C_TransferConfig>
 8007776:	e00f      	b.n	8007798 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800777c:	b29a      	uxth	r2, r3
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007786:	b2da      	uxtb	r2, r3
 8007788:	8979      	ldrh	r1, [r7, #10]
 800778a:	2300      	movs	r3, #0
 800778c:	9300      	str	r3, [sp, #0]
 800778e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007792:	68f8      	ldr	r0, [r7, #12]
 8007794:	f000 fba2 	bl	8007edc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007798:	697a      	ldr	r2, [r7, #20]
 800779a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800779c:	68f8      	ldr	r0, [r7, #12]
 800779e:	f000 fabb 	bl	8007d18 <I2C_WaitOnTXISFlagUntilTimeout>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d001      	beq.n	80077ac <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e07b      	b.n	80078a4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b0:	781a      	ldrb	r2, [r3, #0]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077bc:	1c5a      	adds	r2, r3, #1
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	3b01      	subs	r3, #1
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077d4:	3b01      	subs	r3, #1
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d034      	beq.n	8007850 <HAL_I2C_Mem_Write+0x1c8>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d130      	bne.n	8007850 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	9300      	str	r3, [sp, #0]
 80077f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f4:	2200      	movs	r2, #0
 80077f6:	2180      	movs	r1, #128	; 0x80
 80077f8:	68f8      	ldr	r0, [r7, #12]
 80077fa:	f000 fa4d 	bl	8007c98 <I2C_WaitOnFlagUntilTimeout>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d001      	beq.n	8007808 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	e04d      	b.n	80078a4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800780c:	b29b      	uxth	r3, r3
 800780e:	2bff      	cmp	r3, #255	; 0xff
 8007810:	d90e      	bls.n	8007830 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	22ff      	movs	r2, #255	; 0xff
 8007816:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800781c:	b2da      	uxtb	r2, r3
 800781e:	8979      	ldrh	r1, [r7, #10]
 8007820:	2300      	movs	r3, #0
 8007822:	9300      	str	r3, [sp, #0]
 8007824:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f000 fb57 	bl	8007edc <I2C_TransferConfig>
 800782e:	e00f      	b.n	8007850 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007834:	b29a      	uxth	r2, r3
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800783e:	b2da      	uxtb	r2, r3
 8007840:	8979      	ldrh	r1, [r7, #10]
 8007842:	2300      	movs	r3, #0
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800784a:	68f8      	ldr	r0, [r7, #12]
 800784c:	f000 fb46 	bl	8007edc <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007854:	b29b      	uxth	r3, r3
 8007856:	2b00      	cmp	r3, #0
 8007858:	d19e      	bne.n	8007798 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800785a:	697a      	ldr	r2, [r7, #20]
 800785c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	f000 fa9a 	bl	8007d98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d001      	beq.n	800786e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	e01a      	b.n	80078a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2220      	movs	r2, #32
 8007874:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	6859      	ldr	r1, [r3, #4]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	4b0a      	ldr	r3, [pc, #40]	; (80078ac <HAL_I2C_Mem_Write+0x224>)
 8007882:	400b      	ands	r3, r1
 8007884:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2220      	movs	r2, #32
 800788a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2200      	movs	r2, #0
 800789a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800789e:	2300      	movs	r3, #0
 80078a0:	e000      	b.n	80078a4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80078a2:	2302      	movs	r3, #2
  }
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3718      	adds	r7, #24
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	fe00e800 	.word	0xfe00e800

080078b0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b088      	sub	sp, #32
 80078b4:	af02      	add	r7, sp, #8
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	4608      	mov	r0, r1
 80078ba:	4611      	mov	r1, r2
 80078bc:	461a      	mov	r2, r3
 80078be:	4603      	mov	r3, r0
 80078c0:	817b      	strh	r3, [r7, #10]
 80078c2:	460b      	mov	r3, r1
 80078c4:	813b      	strh	r3, [r7, #8]
 80078c6:	4613      	mov	r3, r2
 80078c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b20      	cmp	r3, #32
 80078d4:	f040 80fd 	bne.w	8007ad2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80078d8:	6a3b      	ldr	r3, [r7, #32]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d002      	beq.n	80078e4 <HAL_I2C_Mem_Read+0x34>
 80078de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d105      	bne.n	80078f0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078ea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	e0f1      	b.n	8007ad4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d101      	bne.n	80078fe <HAL_I2C_Mem_Read+0x4e>
 80078fa:	2302      	movs	r3, #2
 80078fc:	e0ea      	b.n	8007ad4 <HAL_I2C_Mem_Read+0x224>
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2201      	movs	r2, #1
 8007902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007906:	f7fc ff25 	bl	8004754 <HAL_GetTick>
 800790a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	9300      	str	r3, [sp, #0]
 8007910:	2319      	movs	r3, #25
 8007912:	2201      	movs	r2, #1
 8007914:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f000 f9bd 	bl	8007c98 <I2C_WaitOnFlagUntilTimeout>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d001      	beq.n	8007928 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e0d5      	b.n	8007ad4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2222      	movs	r2, #34	; 0x22
 800792c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2240      	movs	r2, #64	; 0x40
 8007934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2200      	movs	r2, #0
 800793c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6a3a      	ldr	r2, [r7, #32]
 8007942:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007948:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2200      	movs	r2, #0
 800794e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007950:	88f8      	ldrh	r0, [r7, #6]
 8007952:	893a      	ldrh	r2, [r7, #8]
 8007954:	8979      	ldrh	r1, [r7, #10]
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	9301      	str	r3, [sp, #4]
 800795a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795c:	9300      	str	r3, [sp, #0]
 800795e:	4603      	mov	r3, r0
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f000 f921 	bl	8007ba8 <I2C_RequestMemoryRead>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d005      	beq.n	8007978 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2200      	movs	r2, #0
 8007970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	e0ad      	b.n	8007ad4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800797c:	b29b      	uxth	r3, r3
 800797e:	2bff      	cmp	r3, #255	; 0xff
 8007980:	d90e      	bls.n	80079a0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	22ff      	movs	r2, #255	; 0xff
 8007986:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800798c:	b2da      	uxtb	r2, r3
 800798e:	8979      	ldrh	r1, [r7, #10]
 8007990:	4b52      	ldr	r3, [pc, #328]	; (8007adc <HAL_I2C_Mem_Read+0x22c>)
 8007992:	9300      	str	r3, [sp, #0]
 8007994:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	f000 fa9f 	bl	8007edc <I2C_TransferConfig>
 800799e:	e00f      	b.n	80079c0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	8979      	ldrh	r1, [r7, #10]
 80079b2:	4b4a      	ldr	r3, [pc, #296]	; (8007adc <HAL_I2C_Mem_Read+0x22c>)
 80079b4:	9300      	str	r3, [sp, #0]
 80079b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80079ba:	68f8      	ldr	r0, [r7, #12]
 80079bc:	f000 fa8e 	bl	8007edc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	9300      	str	r3, [sp, #0]
 80079c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c6:	2200      	movs	r2, #0
 80079c8:	2104      	movs	r1, #4
 80079ca:	68f8      	ldr	r0, [r7, #12]
 80079cc:	f000 f964 	bl	8007c98 <I2C_WaitOnFlagUntilTimeout>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d001      	beq.n	80079da <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	e07c      	b.n	8007ad4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e4:	b2d2      	uxtb	r2, r2
 80079e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ec:	1c5a      	adds	r2, r3, #1
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079f6:	3b01      	subs	r3, #1
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	3b01      	subs	r3, #1
 8007a06:	b29a      	uxth	r2, r3
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d034      	beq.n	8007a80 <HAL_I2C_Mem_Read+0x1d0>
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d130      	bne.n	8007a80 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	9300      	str	r3, [sp, #0]
 8007a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a24:	2200      	movs	r2, #0
 8007a26:	2180      	movs	r1, #128	; 0x80
 8007a28:	68f8      	ldr	r0, [r7, #12]
 8007a2a:	f000 f935 	bl	8007c98 <I2C_WaitOnFlagUntilTimeout>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d001      	beq.n	8007a38 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	e04d      	b.n	8007ad4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	2bff      	cmp	r3, #255	; 0xff
 8007a40:	d90e      	bls.n	8007a60 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	22ff      	movs	r2, #255	; 0xff
 8007a46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a4c:	b2da      	uxtb	r2, r3
 8007a4e:	8979      	ldrh	r1, [r7, #10]
 8007a50:	2300      	movs	r3, #0
 8007a52:	9300      	str	r3, [sp, #0]
 8007a54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f000 fa3f 	bl	8007edc <I2C_TransferConfig>
 8007a5e:	e00f      	b.n	8007a80 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a6e:	b2da      	uxtb	r2, r3
 8007a70:	8979      	ldrh	r1, [r7, #10]
 8007a72:	2300      	movs	r3, #0
 8007a74:	9300      	str	r3, [sp, #0]
 8007a76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f000 fa2e 	bl	8007edc <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d19a      	bne.n	80079c0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a8a:	697a      	ldr	r2, [r7, #20]
 8007a8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f000 f982 	bl	8007d98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d001      	beq.n	8007a9e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e01a      	b.n	8007ad4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2220      	movs	r2, #32
 8007aa4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	6859      	ldr	r1, [r3, #4]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	4b0b      	ldr	r3, [pc, #44]	; (8007ae0 <HAL_I2C_Mem_Read+0x230>)
 8007ab2:	400b      	ands	r3, r1
 8007ab4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2220      	movs	r2, #32
 8007aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	e000      	b.n	8007ad4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007ad2:	2302      	movs	r3, #2
  }
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3718      	adds	r7, #24
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	80002400 	.word	0x80002400
 8007ae0:	fe00e800 	.word	0xfe00e800

08007ae4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007af2:	b2db      	uxtb	r3, r3
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b086      	sub	sp, #24
 8007b04:	af02      	add	r7, sp, #8
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	4608      	mov	r0, r1
 8007b0a:	4611      	mov	r1, r2
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	4603      	mov	r3, r0
 8007b10:	817b      	strh	r3, [r7, #10]
 8007b12:	460b      	mov	r3, r1
 8007b14:	813b      	strh	r3, [r7, #8]
 8007b16:	4613      	mov	r3, r2
 8007b18:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007b1a:	88fb      	ldrh	r3, [r7, #6]
 8007b1c:	b2da      	uxtb	r2, r3
 8007b1e:	8979      	ldrh	r1, [r7, #10]
 8007b20:	4b20      	ldr	r3, [pc, #128]	; (8007ba4 <I2C_RequestMemoryWrite+0xa4>)
 8007b22:	9300      	str	r3, [sp, #0]
 8007b24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f000 f9d7 	bl	8007edc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b2e:	69fa      	ldr	r2, [r7, #28]
 8007b30:	69b9      	ldr	r1, [r7, #24]
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	f000 f8f0 	bl	8007d18 <I2C_WaitOnTXISFlagUntilTimeout>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d001      	beq.n	8007b42 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e02c      	b.n	8007b9c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007b42:	88fb      	ldrh	r3, [r7, #6]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d105      	bne.n	8007b54 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007b48:	893b      	ldrh	r3, [r7, #8]
 8007b4a:	b2da      	uxtb	r2, r3
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	629a      	str	r2, [r3, #40]	; 0x28
 8007b52:	e015      	b.n	8007b80 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007b54:	893b      	ldrh	r3, [r7, #8]
 8007b56:	0a1b      	lsrs	r3, r3, #8
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	b2da      	uxtb	r2, r3
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b62:	69fa      	ldr	r2, [r7, #28]
 8007b64:	69b9      	ldr	r1, [r7, #24]
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	f000 f8d6 	bl	8007d18 <I2C_WaitOnTXISFlagUntilTimeout>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d001      	beq.n	8007b76 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e012      	b.n	8007b9c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007b76:	893b      	ldrh	r3, [r7, #8]
 8007b78:	b2da      	uxtb	r2, r3
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	9300      	str	r3, [sp, #0]
 8007b84:	69bb      	ldr	r3, [r7, #24]
 8007b86:	2200      	movs	r2, #0
 8007b88:	2180      	movs	r1, #128	; 0x80
 8007b8a:	68f8      	ldr	r0, [r7, #12]
 8007b8c:	f000 f884 	bl	8007c98 <I2C_WaitOnFlagUntilTimeout>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d001      	beq.n	8007b9a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	e000      	b.n	8007b9c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007b9a:	2300      	movs	r3, #0
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	80002000 	.word	0x80002000

08007ba8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b086      	sub	sp, #24
 8007bac:	af02      	add	r7, sp, #8
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	4608      	mov	r0, r1
 8007bb2:	4611      	mov	r1, r2
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	817b      	strh	r3, [r7, #10]
 8007bba:	460b      	mov	r3, r1
 8007bbc:	813b      	strh	r3, [r7, #8]
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007bc2:	88fb      	ldrh	r3, [r7, #6]
 8007bc4:	b2da      	uxtb	r2, r3
 8007bc6:	8979      	ldrh	r1, [r7, #10]
 8007bc8:	4b20      	ldr	r3, [pc, #128]	; (8007c4c <I2C_RequestMemoryRead+0xa4>)
 8007bca:	9300      	str	r3, [sp, #0]
 8007bcc:	2300      	movs	r3, #0
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	f000 f984 	bl	8007edc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bd4:	69fa      	ldr	r2, [r7, #28]
 8007bd6:	69b9      	ldr	r1, [r7, #24]
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f000 f89d 	bl	8007d18 <I2C_WaitOnTXISFlagUntilTimeout>
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d001      	beq.n	8007be8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	e02c      	b.n	8007c42 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007be8:	88fb      	ldrh	r3, [r7, #6]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d105      	bne.n	8007bfa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007bee:	893b      	ldrh	r3, [r7, #8]
 8007bf0:	b2da      	uxtb	r2, r3
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	629a      	str	r2, [r3, #40]	; 0x28
 8007bf8:	e015      	b.n	8007c26 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007bfa:	893b      	ldrh	r3, [r7, #8]
 8007bfc:	0a1b      	lsrs	r3, r3, #8
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	b2da      	uxtb	r2, r3
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c08:	69fa      	ldr	r2, [r7, #28]
 8007c0a:	69b9      	ldr	r1, [r7, #24]
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f000 f883 	bl	8007d18 <I2C_WaitOnTXISFlagUntilTimeout>
 8007c12:	4603      	mov	r3, r0
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d001      	beq.n	8007c1c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e012      	b.n	8007c42 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007c1c:	893b      	ldrh	r3, [r7, #8]
 8007c1e:	b2da      	uxtb	r2, r3
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	9300      	str	r3, [sp, #0]
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	2140      	movs	r1, #64	; 0x40
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f000 f831 	bl	8007c98 <I2C_WaitOnFlagUntilTimeout>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d001      	beq.n	8007c40 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e000      	b.n	8007c42 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3710      	adds	r7, #16
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
 8007c4a:	bf00      	nop
 8007c4c:	80002000 	.word	0x80002000

08007c50 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	699b      	ldr	r3, [r3, #24]
 8007c5e:	f003 0302 	and.w	r3, r3, #2
 8007c62:	2b02      	cmp	r3, #2
 8007c64:	d103      	bne.n	8007c6e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	699b      	ldr	r3, [r3, #24]
 8007c74:	f003 0301 	and.w	r3, r3, #1
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d007      	beq.n	8007c8c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	699a      	ldr	r2, [r3, #24]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f042 0201 	orr.w	r2, r2, #1
 8007c8a:	619a      	str	r2, [r3, #24]
  }
}
 8007c8c:	bf00      	nop
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	603b      	str	r3, [r7, #0]
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ca8:	e022      	b.n	8007cf0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cb0:	d01e      	beq.n	8007cf0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cb2:	f7fc fd4f 	bl	8004754 <HAL_GetTick>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	69bb      	ldr	r3, [r7, #24]
 8007cba:	1ad3      	subs	r3, r2, r3
 8007cbc:	683a      	ldr	r2, [r7, #0]
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d302      	bcc.n	8007cc8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d113      	bne.n	8007cf0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ccc:	f043 0220 	orr.w	r2, r3, #32
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2220      	movs	r2, #32
 8007cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	e00f      	b.n	8007d10 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	699a      	ldr	r2, [r3, #24]
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	68ba      	ldr	r2, [r7, #8]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	bf0c      	ite	eq
 8007d00:	2301      	moveq	r3, #1
 8007d02:	2300      	movne	r3, #0
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	461a      	mov	r2, r3
 8007d08:	79fb      	ldrb	r3, [r7, #7]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d0cd      	beq.n	8007caa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3710      	adds	r7, #16
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007d24:	e02c      	b.n	8007d80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	68b9      	ldr	r1, [r7, #8]
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	f000 f870 	bl	8007e10 <I2C_IsAcknowledgeFailed>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d001      	beq.n	8007d3a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e02a      	b.n	8007d90 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d40:	d01e      	beq.n	8007d80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d42:	f7fc fd07 	bl	8004754 <HAL_GetTick>
 8007d46:	4602      	mov	r2, r0
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	1ad3      	subs	r3, r2, r3
 8007d4c:	68ba      	ldr	r2, [r7, #8]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d302      	bcc.n	8007d58 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d113      	bne.n	8007d80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d5c:	f043 0220 	orr.w	r2, r3, #32
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2220      	movs	r2, #32
 8007d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e007      	b.n	8007d90 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	699b      	ldr	r3, [r3, #24]
 8007d86:	f003 0302 	and.w	r3, r3, #2
 8007d8a:	2b02      	cmp	r3, #2
 8007d8c:	d1cb      	bne.n	8007d26 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3710      	adds	r7, #16
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007da4:	e028      	b.n	8007df8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	68b9      	ldr	r1, [r7, #8]
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	f000 f830 	bl	8007e10 <I2C_IsAcknowledgeFailed>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d001      	beq.n	8007dba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	e026      	b.n	8007e08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dba:	f7fc fccb 	bl	8004754 <HAL_GetTick>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	1ad3      	subs	r3, r2, r3
 8007dc4:	68ba      	ldr	r2, [r7, #8]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d302      	bcc.n	8007dd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d113      	bne.n	8007df8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dd4:	f043 0220 	orr.w	r2, r3, #32
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2220      	movs	r2, #32
 8007de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2200      	movs	r2, #0
 8007df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	e007      	b.n	8007e08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	699b      	ldr	r3, [r3, #24]
 8007dfe:	f003 0320 	and.w	r3, r3, #32
 8007e02:	2b20      	cmp	r3, #32
 8007e04:	d1cf      	bne.n	8007da6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3710      	adds	r7, #16
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	699b      	ldr	r3, [r3, #24]
 8007e22:	f003 0310 	and.w	r3, r3, #16
 8007e26:	2b10      	cmp	r3, #16
 8007e28:	d151      	bne.n	8007ece <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e2a:	e022      	b.n	8007e72 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e32:	d01e      	beq.n	8007e72 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e34:	f7fc fc8e 	bl	8004754 <HAL_GetTick>
 8007e38:	4602      	mov	r2, r0
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	1ad3      	subs	r3, r2, r3
 8007e3e:	68ba      	ldr	r2, [r7, #8]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d302      	bcc.n	8007e4a <I2C_IsAcknowledgeFailed+0x3a>
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d113      	bne.n	8007e72 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e4e:	f043 0220 	orr.w	r2, r3, #32
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2220      	movs	r2, #32
 8007e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e02e      	b.n	8007ed0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	699b      	ldr	r3, [r3, #24]
 8007e78:	f003 0320 	and.w	r3, r3, #32
 8007e7c:	2b20      	cmp	r3, #32
 8007e7e:	d1d5      	bne.n	8007e2c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	2210      	movs	r2, #16
 8007e86:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2220      	movs	r2, #32
 8007e8e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007e90:	68f8      	ldr	r0, [r7, #12]
 8007e92:	f7ff fedd 	bl	8007c50 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	6859      	ldr	r1, [r3, #4]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	4b0d      	ldr	r3, [pc, #52]	; (8007ed8 <I2C_IsAcknowledgeFailed+0xc8>)
 8007ea2:	400b      	ands	r3, r1
 8007ea4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eaa:	f043 0204 	orr.w	r2, r3, #4
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2220      	movs	r2, #32
 8007eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e000      	b.n	8007ed0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	fe00e800 	.word	0xfe00e800

08007edc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b085      	sub	sp, #20
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	607b      	str	r3, [r7, #4]
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	817b      	strh	r3, [r7, #10]
 8007eea:	4613      	mov	r3, r2
 8007eec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	685a      	ldr	r2, [r3, #4]
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	0d5b      	lsrs	r3, r3, #21
 8007ef8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007efc:	4b0d      	ldr	r3, [pc, #52]	; (8007f34 <I2C_TransferConfig+0x58>)
 8007efe:	430b      	orrs	r3, r1
 8007f00:	43db      	mvns	r3, r3
 8007f02:	ea02 0103 	and.w	r1, r2, r3
 8007f06:	897b      	ldrh	r3, [r7, #10]
 8007f08:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007f0c:	7a7b      	ldrb	r3, [r7, #9]
 8007f0e:	041b      	lsls	r3, r3, #16
 8007f10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007f14:	431a      	orrs	r2, r3
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	431a      	orrs	r2, r3
 8007f1a:	69bb      	ldr	r3, [r7, #24]
 8007f1c:	431a      	orrs	r2, r3
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	430a      	orrs	r2, r1
 8007f24:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8007f26:	bf00      	nop
 8007f28:	3714      	adds	r7, #20
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	03ff63ff 	.word	0x03ff63ff

08007f38 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	2b20      	cmp	r3, #32
 8007f4c:	d138      	bne.n	8007fc0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d101      	bne.n	8007f5c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007f58:	2302      	movs	r3, #2
 8007f5a:	e032      	b.n	8007fc2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2224      	movs	r2, #36	; 0x24
 8007f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f022 0201 	bic.w	r2, r2, #1
 8007f7a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	681a      	ldr	r2, [r3, #0]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007f8a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	6819      	ldr	r1, [r3, #0]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	683a      	ldr	r2, [r7, #0]
 8007f98:	430a      	orrs	r2, r1
 8007f9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f042 0201 	orr.w	r2, r2, #1
 8007faa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2220      	movs	r2, #32
 8007fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	e000      	b.n	8007fc2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007fc0:	2302      	movs	r3, #2
  }
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	370c      	adds	r7, #12
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr

08007fce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007fce:	b480      	push	{r7}
 8007fd0:	b085      	sub	sp, #20
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
 8007fd6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	2b20      	cmp	r3, #32
 8007fe2:	d139      	bne.n	8008058 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d101      	bne.n	8007ff2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007fee:	2302      	movs	r3, #2
 8007ff0:	e033      	b.n	800805a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2224      	movs	r2, #36	; 0x24
 8007ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f022 0201 	bic.w	r2, r2, #1
 8008010:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008020:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	021b      	lsls	r3, r3, #8
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	4313      	orrs	r3, r2
 800802a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	68fa      	ldr	r2, [r7, #12]
 8008032:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f042 0201 	orr.w	r2, r2, #1
 8008042:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2220      	movs	r2, #32
 8008048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008054:	2300      	movs	r3, #0
 8008056:	e000      	b.n	800805a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008058:	2302      	movs	r3, #2
  }
}
 800805a:	4618      	mov	r0, r3
 800805c:	3714      	adds	r7, #20
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr
	...

08008068 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800806e:	2300      	movs	r3, #0
 8008070:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008072:	4b23      	ldr	r3, [pc, #140]	; (8008100 <HAL_PWREx_EnableOverDrive+0x98>)
 8008074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008076:	4a22      	ldr	r2, [pc, #136]	; (8008100 <HAL_PWREx_EnableOverDrive+0x98>)
 8008078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800807c:	6413      	str	r3, [r2, #64]	; 0x40
 800807e:	4b20      	ldr	r3, [pc, #128]	; (8008100 <HAL_PWREx_EnableOverDrive+0x98>)
 8008080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008086:	603b      	str	r3, [r7, #0]
 8008088:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800808a:	4b1e      	ldr	r3, [pc, #120]	; (8008104 <HAL_PWREx_EnableOverDrive+0x9c>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a1d      	ldr	r2, [pc, #116]	; (8008104 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008094:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008096:	f7fc fb5d 	bl	8004754 <HAL_GetTick>
 800809a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800809c:	e009      	b.n	80080b2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800809e:	f7fc fb59 	bl	8004754 <HAL_GetTick>
 80080a2:	4602      	mov	r2, r0
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	1ad3      	subs	r3, r2, r3
 80080a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080ac:	d901      	bls.n	80080b2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80080ae:	2303      	movs	r3, #3
 80080b0:	e022      	b.n	80080f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80080b2:	4b14      	ldr	r3, [pc, #80]	; (8008104 <HAL_PWREx_EnableOverDrive+0x9c>)
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080be:	d1ee      	bne.n	800809e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80080c0:	4b10      	ldr	r3, [pc, #64]	; (8008104 <HAL_PWREx_EnableOverDrive+0x9c>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a0f      	ldr	r2, [pc, #60]	; (8008104 <HAL_PWREx_EnableOverDrive+0x9c>)
 80080c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80080cc:	f7fc fb42 	bl	8004754 <HAL_GetTick>
 80080d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80080d2:	e009      	b.n	80080e8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80080d4:	f7fc fb3e 	bl	8004754 <HAL_GetTick>
 80080d8:	4602      	mov	r2, r0
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	1ad3      	subs	r3, r2, r3
 80080de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080e2:	d901      	bls.n	80080e8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80080e4:	2303      	movs	r3, #3
 80080e6:	e007      	b.n	80080f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80080e8:	4b06      	ldr	r3, [pc, #24]	; (8008104 <HAL_PWREx_EnableOverDrive+0x9c>)
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080f4:	d1ee      	bne.n	80080d4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3708      	adds	r7, #8
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	40023800 	.word	0x40023800
 8008104:	40007000 	.word	0x40007000

08008108 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b086      	sub	sp, #24
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008110:	2300      	movs	r3, #0
 8008112:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d101      	bne.n	800811e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	e29b      	b.n	8008656 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f003 0301 	and.w	r3, r3, #1
 8008126:	2b00      	cmp	r3, #0
 8008128:	f000 8087 	beq.w	800823a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800812c:	4b96      	ldr	r3, [pc, #600]	; (8008388 <HAL_RCC_OscConfig+0x280>)
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	f003 030c 	and.w	r3, r3, #12
 8008134:	2b04      	cmp	r3, #4
 8008136:	d00c      	beq.n	8008152 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008138:	4b93      	ldr	r3, [pc, #588]	; (8008388 <HAL_RCC_OscConfig+0x280>)
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	f003 030c 	and.w	r3, r3, #12
 8008140:	2b08      	cmp	r3, #8
 8008142:	d112      	bne.n	800816a <HAL_RCC_OscConfig+0x62>
 8008144:	4b90      	ldr	r3, [pc, #576]	; (8008388 <HAL_RCC_OscConfig+0x280>)
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800814c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008150:	d10b      	bne.n	800816a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008152:	4b8d      	ldr	r3, [pc, #564]	; (8008388 <HAL_RCC_OscConfig+0x280>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800815a:	2b00      	cmp	r3, #0
 800815c:	d06c      	beq.n	8008238 <HAL_RCC_OscConfig+0x130>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d168      	bne.n	8008238 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008166:	2301      	movs	r3, #1
 8008168:	e275      	b.n	8008656 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008172:	d106      	bne.n	8008182 <HAL_RCC_OscConfig+0x7a>
 8008174:	4b84      	ldr	r3, [pc, #528]	; (8008388 <HAL_RCC_OscConfig+0x280>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a83      	ldr	r2, [pc, #524]	; (8008388 <HAL_RCC_OscConfig+0x280>)
 800817a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800817e:	6013      	str	r3, [r2, #0]
 8008180:	e02e      	b.n	80081e0 <HAL_RCC_OscConfig+0xd8>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d10c      	bne.n	80081a4 <HAL_RCC_OscConfig+0x9c>
 800818a:	4b7f      	ldr	r3, [pc, #508]	; (8008388 <HAL_RCC_OscConfig+0x280>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a7e      	ldr	r2, [pc, #504]	; (8008388 <HAL_RCC_OscConfig+0x280>)
 8008190:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008194:	6013      	str	r3, [r2, #0]
 8008196:	4b7c      	ldr	r3, [pc, #496]	; (8008388 <HAL_RCC_OscConfig+0x280>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a7b      	ldr	r2, [pc, #492]	; (8008388 <HAL_RCC_OscConfig+0x280>)
 800819c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80081a0:	6013      	str	r3, [r2, #0]
 80081a2:	e01d      	b.n	80081e0 <HAL_RCC_OscConfig+0xd8>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80081ac:	d10c      	bne.n	80081c8 <HAL_RCC_OscConfig+0xc0>
 80081ae:	4b76      	ldr	r3, [pc, #472]	; (8008388 <HAL_RCC_OscConfig+0x280>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a75      	ldr	r2, [pc, #468]	; (8008388 <HAL_RCC_OscConfig+0x280>)
 80081b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80081b8:	6013      	str	r3, [r2, #0]
 80081ba:	4b73      	ldr	r3, [pc, #460]	; (8008388 <HAL_RCC_OscConfig+0x280>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a72      	ldr	r2, [pc, #456]	; (8008388 <HAL_RCC_OscConfig+0x280>)
 80081c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081c4:	6013      	str	r3, [r2, #0]
 80081c6:	e00b      	b.n	80081e0 <HAL_RCC_OscConfig+0xd8>
 80081c8:	4b6f      	ldr	r3, [pc, #444]	; (8008388 <HAL_RCC_OscConfig+0x280>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a6e      	ldr	r2, [pc, #440]	; (8008388 <HAL_RCC_OscConfig+0x280>)
 80081ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081d2:	6013      	str	r3, [r2, #0]
 80081d4:	4b6c      	ldr	r3, [pc, #432]	; (8008388 <HAL_RCC_OscConfig+0x280>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a6b      	ldr	r2, [pc, #428]	; (8008388 <HAL_RCC_OscConfig+0x280>)
 80081da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80081de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d013      	beq.n	8008210 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081e8:	f7fc fab4 	bl	8004754 <HAL_GetTick>
 80081ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80081ee:	e008      	b.n	8008202 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80081f0:	f7fc fab0 	bl	8004754 <HAL_GetTick>
 80081f4:	4602      	mov	r2, r0
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	1ad3      	subs	r3, r2, r3
 80081fa:	2b64      	cmp	r3, #100	; 0x64
 80081fc:	d901      	bls.n	8008202 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80081fe:	2303      	movs	r3, #3
 8008200:	e229      	b.n	8008656 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008202:	4b61      	ldr	r3, [pc, #388]	; (8008388 <HAL_RCC_OscConfig+0x280>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800820a:	2b00      	cmp	r3, #0
 800820c:	d0f0      	beq.n	80081f0 <HAL_RCC_OscConfig+0xe8>
 800820e:	e014      	b.n	800823a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008210:	f7fc faa0 	bl	8004754 <HAL_GetTick>
 8008214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008216:	e008      	b.n	800822a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008218:	f7fc fa9c 	bl	8004754 <HAL_GetTick>
 800821c:	4602      	mov	r2, r0
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	2b64      	cmp	r3, #100	; 0x64
 8008224:	d901      	bls.n	800822a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008226:	2303      	movs	r3, #3
 8008228:	e215      	b.n	8008656 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800822a:	4b57      	ldr	r3, [pc, #348]	; (8008388 <HAL_RCC_OscConfig+0x280>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1f0      	bne.n	8008218 <HAL_RCC_OscConfig+0x110>
 8008236:	e000      	b.n	800823a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008238:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f003 0302 	and.w	r3, r3, #2
 8008242:	2b00      	cmp	r3, #0
 8008244:	d069      	beq.n	800831a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008246:	4b50      	ldr	r3, [pc, #320]	; (8008388 <HAL_RCC_OscConfig+0x280>)
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	f003 030c 	and.w	r3, r3, #12
 800824e:	2b00      	cmp	r3, #0
 8008250:	d00b      	beq.n	800826a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008252:	4b4d      	ldr	r3, [pc, #308]	; (8008388 <HAL_RCC_OscConfig+0x280>)
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	f003 030c 	and.w	r3, r3, #12
 800825a:	2b08      	cmp	r3, #8
 800825c:	d11c      	bne.n	8008298 <HAL_RCC_OscConfig+0x190>
 800825e:	4b4a      	ldr	r3, [pc, #296]	; (8008388 <HAL_RCC_OscConfig+0x280>)
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008266:	2b00      	cmp	r3, #0
 8008268:	d116      	bne.n	8008298 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800826a:	4b47      	ldr	r3, [pc, #284]	; (8008388 <HAL_RCC_OscConfig+0x280>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f003 0302 	and.w	r3, r3, #2
 8008272:	2b00      	cmp	r3, #0
 8008274:	d005      	beq.n	8008282 <HAL_RCC_OscConfig+0x17a>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	2b01      	cmp	r3, #1
 800827c:	d001      	beq.n	8008282 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	e1e9      	b.n	8008656 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008282:	4b41      	ldr	r3, [pc, #260]	; (8008388 <HAL_RCC_OscConfig+0x280>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	00db      	lsls	r3, r3, #3
 8008290:	493d      	ldr	r1, [pc, #244]	; (8008388 <HAL_RCC_OscConfig+0x280>)
 8008292:	4313      	orrs	r3, r2
 8008294:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008296:	e040      	b.n	800831a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d023      	beq.n	80082e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80082a0:	4b39      	ldr	r3, [pc, #228]	; (8008388 <HAL_RCC_OscConfig+0x280>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a38      	ldr	r2, [pc, #224]	; (8008388 <HAL_RCC_OscConfig+0x280>)
 80082a6:	f043 0301 	orr.w	r3, r3, #1
 80082aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082ac:	f7fc fa52 	bl	8004754 <HAL_GetTick>
 80082b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082b2:	e008      	b.n	80082c6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80082b4:	f7fc fa4e 	bl	8004754 <HAL_GetTick>
 80082b8:	4602      	mov	r2, r0
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	1ad3      	subs	r3, r2, r3
 80082be:	2b02      	cmp	r3, #2
 80082c0:	d901      	bls.n	80082c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80082c2:	2303      	movs	r3, #3
 80082c4:	e1c7      	b.n	8008656 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082c6:	4b30      	ldr	r3, [pc, #192]	; (8008388 <HAL_RCC_OscConfig+0x280>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f003 0302 	and.w	r3, r3, #2
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d0f0      	beq.n	80082b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082d2:	4b2d      	ldr	r3, [pc, #180]	; (8008388 <HAL_RCC_OscConfig+0x280>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	691b      	ldr	r3, [r3, #16]
 80082de:	00db      	lsls	r3, r3, #3
 80082e0:	4929      	ldr	r1, [pc, #164]	; (8008388 <HAL_RCC_OscConfig+0x280>)
 80082e2:	4313      	orrs	r3, r2
 80082e4:	600b      	str	r3, [r1, #0]
 80082e6:	e018      	b.n	800831a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80082e8:	4b27      	ldr	r3, [pc, #156]	; (8008388 <HAL_RCC_OscConfig+0x280>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a26      	ldr	r2, [pc, #152]	; (8008388 <HAL_RCC_OscConfig+0x280>)
 80082ee:	f023 0301 	bic.w	r3, r3, #1
 80082f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082f4:	f7fc fa2e 	bl	8004754 <HAL_GetTick>
 80082f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80082fa:	e008      	b.n	800830e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80082fc:	f7fc fa2a 	bl	8004754 <HAL_GetTick>
 8008300:	4602      	mov	r2, r0
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	1ad3      	subs	r3, r2, r3
 8008306:	2b02      	cmp	r3, #2
 8008308:	d901      	bls.n	800830e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800830a:	2303      	movs	r3, #3
 800830c:	e1a3      	b.n	8008656 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800830e:	4b1e      	ldr	r3, [pc, #120]	; (8008388 <HAL_RCC_OscConfig+0x280>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f003 0302 	and.w	r3, r3, #2
 8008316:	2b00      	cmp	r3, #0
 8008318:	d1f0      	bne.n	80082fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f003 0308 	and.w	r3, r3, #8
 8008322:	2b00      	cmp	r3, #0
 8008324:	d038      	beq.n	8008398 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	695b      	ldr	r3, [r3, #20]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d019      	beq.n	8008362 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800832e:	4b16      	ldr	r3, [pc, #88]	; (8008388 <HAL_RCC_OscConfig+0x280>)
 8008330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008332:	4a15      	ldr	r2, [pc, #84]	; (8008388 <HAL_RCC_OscConfig+0x280>)
 8008334:	f043 0301 	orr.w	r3, r3, #1
 8008338:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800833a:	f7fc fa0b 	bl	8004754 <HAL_GetTick>
 800833e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008340:	e008      	b.n	8008354 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008342:	f7fc fa07 	bl	8004754 <HAL_GetTick>
 8008346:	4602      	mov	r2, r0
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	1ad3      	subs	r3, r2, r3
 800834c:	2b02      	cmp	r3, #2
 800834e:	d901      	bls.n	8008354 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008350:	2303      	movs	r3, #3
 8008352:	e180      	b.n	8008656 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008354:	4b0c      	ldr	r3, [pc, #48]	; (8008388 <HAL_RCC_OscConfig+0x280>)
 8008356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008358:	f003 0302 	and.w	r3, r3, #2
 800835c:	2b00      	cmp	r3, #0
 800835e:	d0f0      	beq.n	8008342 <HAL_RCC_OscConfig+0x23a>
 8008360:	e01a      	b.n	8008398 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008362:	4b09      	ldr	r3, [pc, #36]	; (8008388 <HAL_RCC_OscConfig+0x280>)
 8008364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008366:	4a08      	ldr	r2, [pc, #32]	; (8008388 <HAL_RCC_OscConfig+0x280>)
 8008368:	f023 0301 	bic.w	r3, r3, #1
 800836c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800836e:	f7fc f9f1 	bl	8004754 <HAL_GetTick>
 8008372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008374:	e00a      	b.n	800838c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008376:	f7fc f9ed 	bl	8004754 <HAL_GetTick>
 800837a:	4602      	mov	r2, r0
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	1ad3      	subs	r3, r2, r3
 8008380:	2b02      	cmp	r3, #2
 8008382:	d903      	bls.n	800838c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008384:	2303      	movs	r3, #3
 8008386:	e166      	b.n	8008656 <HAL_RCC_OscConfig+0x54e>
 8008388:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800838c:	4b92      	ldr	r3, [pc, #584]	; (80085d8 <HAL_RCC_OscConfig+0x4d0>)
 800838e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008390:	f003 0302 	and.w	r3, r3, #2
 8008394:	2b00      	cmp	r3, #0
 8008396:	d1ee      	bne.n	8008376 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f003 0304 	and.w	r3, r3, #4
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f000 80a4 	beq.w	80084ee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80083a6:	4b8c      	ldr	r3, [pc, #560]	; (80085d8 <HAL_RCC_OscConfig+0x4d0>)
 80083a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d10d      	bne.n	80083ce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80083b2:	4b89      	ldr	r3, [pc, #548]	; (80085d8 <HAL_RCC_OscConfig+0x4d0>)
 80083b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b6:	4a88      	ldr	r2, [pc, #544]	; (80085d8 <HAL_RCC_OscConfig+0x4d0>)
 80083b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083bc:	6413      	str	r3, [r2, #64]	; 0x40
 80083be:	4b86      	ldr	r3, [pc, #536]	; (80085d8 <HAL_RCC_OscConfig+0x4d0>)
 80083c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083c6:	60bb      	str	r3, [r7, #8]
 80083c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80083ca:	2301      	movs	r3, #1
 80083cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80083ce:	4b83      	ldr	r3, [pc, #524]	; (80085dc <HAL_RCC_OscConfig+0x4d4>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d118      	bne.n	800840c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80083da:	4b80      	ldr	r3, [pc, #512]	; (80085dc <HAL_RCC_OscConfig+0x4d4>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a7f      	ldr	r2, [pc, #508]	; (80085dc <HAL_RCC_OscConfig+0x4d4>)
 80083e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80083e6:	f7fc f9b5 	bl	8004754 <HAL_GetTick>
 80083ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80083ec:	e008      	b.n	8008400 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083ee:	f7fc f9b1 	bl	8004754 <HAL_GetTick>
 80083f2:	4602      	mov	r2, r0
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	1ad3      	subs	r3, r2, r3
 80083f8:	2b64      	cmp	r3, #100	; 0x64
 80083fa:	d901      	bls.n	8008400 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80083fc:	2303      	movs	r3, #3
 80083fe:	e12a      	b.n	8008656 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008400:	4b76      	ldr	r3, [pc, #472]	; (80085dc <HAL_RCC_OscConfig+0x4d4>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008408:	2b00      	cmp	r3, #0
 800840a:	d0f0      	beq.n	80083ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	2b01      	cmp	r3, #1
 8008412:	d106      	bne.n	8008422 <HAL_RCC_OscConfig+0x31a>
 8008414:	4b70      	ldr	r3, [pc, #448]	; (80085d8 <HAL_RCC_OscConfig+0x4d0>)
 8008416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008418:	4a6f      	ldr	r2, [pc, #444]	; (80085d8 <HAL_RCC_OscConfig+0x4d0>)
 800841a:	f043 0301 	orr.w	r3, r3, #1
 800841e:	6713      	str	r3, [r2, #112]	; 0x70
 8008420:	e02d      	b.n	800847e <HAL_RCC_OscConfig+0x376>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d10c      	bne.n	8008444 <HAL_RCC_OscConfig+0x33c>
 800842a:	4b6b      	ldr	r3, [pc, #428]	; (80085d8 <HAL_RCC_OscConfig+0x4d0>)
 800842c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800842e:	4a6a      	ldr	r2, [pc, #424]	; (80085d8 <HAL_RCC_OscConfig+0x4d0>)
 8008430:	f023 0301 	bic.w	r3, r3, #1
 8008434:	6713      	str	r3, [r2, #112]	; 0x70
 8008436:	4b68      	ldr	r3, [pc, #416]	; (80085d8 <HAL_RCC_OscConfig+0x4d0>)
 8008438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800843a:	4a67      	ldr	r2, [pc, #412]	; (80085d8 <HAL_RCC_OscConfig+0x4d0>)
 800843c:	f023 0304 	bic.w	r3, r3, #4
 8008440:	6713      	str	r3, [r2, #112]	; 0x70
 8008442:	e01c      	b.n	800847e <HAL_RCC_OscConfig+0x376>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	2b05      	cmp	r3, #5
 800844a:	d10c      	bne.n	8008466 <HAL_RCC_OscConfig+0x35e>
 800844c:	4b62      	ldr	r3, [pc, #392]	; (80085d8 <HAL_RCC_OscConfig+0x4d0>)
 800844e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008450:	4a61      	ldr	r2, [pc, #388]	; (80085d8 <HAL_RCC_OscConfig+0x4d0>)
 8008452:	f043 0304 	orr.w	r3, r3, #4
 8008456:	6713      	str	r3, [r2, #112]	; 0x70
 8008458:	4b5f      	ldr	r3, [pc, #380]	; (80085d8 <HAL_RCC_OscConfig+0x4d0>)
 800845a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800845c:	4a5e      	ldr	r2, [pc, #376]	; (80085d8 <HAL_RCC_OscConfig+0x4d0>)
 800845e:	f043 0301 	orr.w	r3, r3, #1
 8008462:	6713      	str	r3, [r2, #112]	; 0x70
 8008464:	e00b      	b.n	800847e <HAL_RCC_OscConfig+0x376>
 8008466:	4b5c      	ldr	r3, [pc, #368]	; (80085d8 <HAL_RCC_OscConfig+0x4d0>)
 8008468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800846a:	4a5b      	ldr	r2, [pc, #364]	; (80085d8 <HAL_RCC_OscConfig+0x4d0>)
 800846c:	f023 0301 	bic.w	r3, r3, #1
 8008470:	6713      	str	r3, [r2, #112]	; 0x70
 8008472:	4b59      	ldr	r3, [pc, #356]	; (80085d8 <HAL_RCC_OscConfig+0x4d0>)
 8008474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008476:	4a58      	ldr	r2, [pc, #352]	; (80085d8 <HAL_RCC_OscConfig+0x4d0>)
 8008478:	f023 0304 	bic.w	r3, r3, #4
 800847c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d015      	beq.n	80084b2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008486:	f7fc f965 	bl	8004754 <HAL_GetTick>
 800848a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800848c:	e00a      	b.n	80084a4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800848e:	f7fc f961 	bl	8004754 <HAL_GetTick>
 8008492:	4602      	mov	r2, r0
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	1ad3      	subs	r3, r2, r3
 8008498:	f241 3288 	movw	r2, #5000	; 0x1388
 800849c:	4293      	cmp	r3, r2
 800849e:	d901      	bls.n	80084a4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80084a0:	2303      	movs	r3, #3
 80084a2:	e0d8      	b.n	8008656 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084a4:	4b4c      	ldr	r3, [pc, #304]	; (80085d8 <HAL_RCC_OscConfig+0x4d0>)
 80084a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084a8:	f003 0302 	and.w	r3, r3, #2
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d0ee      	beq.n	800848e <HAL_RCC_OscConfig+0x386>
 80084b0:	e014      	b.n	80084dc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084b2:	f7fc f94f 	bl	8004754 <HAL_GetTick>
 80084b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80084b8:	e00a      	b.n	80084d0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084ba:	f7fc f94b 	bl	8004754 <HAL_GetTick>
 80084be:	4602      	mov	r2, r0
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	1ad3      	subs	r3, r2, r3
 80084c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d901      	bls.n	80084d0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80084cc:	2303      	movs	r3, #3
 80084ce:	e0c2      	b.n	8008656 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80084d0:	4b41      	ldr	r3, [pc, #260]	; (80085d8 <HAL_RCC_OscConfig+0x4d0>)
 80084d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084d4:	f003 0302 	and.w	r3, r3, #2
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d1ee      	bne.n	80084ba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80084dc:	7dfb      	ldrb	r3, [r7, #23]
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d105      	bne.n	80084ee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80084e2:	4b3d      	ldr	r3, [pc, #244]	; (80085d8 <HAL_RCC_OscConfig+0x4d0>)
 80084e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e6:	4a3c      	ldr	r2, [pc, #240]	; (80085d8 <HAL_RCC_OscConfig+0x4d0>)
 80084e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	f000 80ae 	beq.w	8008654 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80084f8:	4b37      	ldr	r3, [pc, #220]	; (80085d8 <HAL_RCC_OscConfig+0x4d0>)
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	f003 030c 	and.w	r3, r3, #12
 8008500:	2b08      	cmp	r3, #8
 8008502:	d06d      	beq.n	80085e0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	699b      	ldr	r3, [r3, #24]
 8008508:	2b02      	cmp	r3, #2
 800850a:	d14b      	bne.n	80085a4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800850c:	4b32      	ldr	r3, [pc, #200]	; (80085d8 <HAL_RCC_OscConfig+0x4d0>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a31      	ldr	r2, [pc, #196]	; (80085d8 <HAL_RCC_OscConfig+0x4d0>)
 8008512:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008516:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008518:	f7fc f91c 	bl	8004754 <HAL_GetTick>
 800851c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800851e:	e008      	b.n	8008532 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008520:	f7fc f918 	bl	8004754 <HAL_GetTick>
 8008524:	4602      	mov	r2, r0
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	1ad3      	subs	r3, r2, r3
 800852a:	2b02      	cmp	r3, #2
 800852c:	d901      	bls.n	8008532 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800852e:	2303      	movs	r3, #3
 8008530:	e091      	b.n	8008656 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008532:	4b29      	ldr	r3, [pc, #164]	; (80085d8 <HAL_RCC_OscConfig+0x4d0>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1f0      	bne.n	8008520 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	69da      	ldr	r2, [r3, #28]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a1b      	ldr	r3, [r3, #32]
 8008546:	431a      	orrs	r2, r3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854c:	019b      	lsls	r3, r3, #6
 800854e:	431a      	orrs	r2, r3
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008554:	085b      	lsrs	r3, r3, #1
 8008556:	3b01      	subs	r3, #1
 8008558:	041b      	lsls	r3, r3, #16
 800855a:	431a      	orrs	r2, r3
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008560:	061b      	lsls	r3, r3, #24
 8008562:	431a      	orrs	r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008568:	071b      	lsls	r3, r3, #28
 800856a:	491b      	ldr	r1, [pc, #108]	; (80085d8 <HAL_RCC_OscConfig+0x4d0>)
 800856c:	4313      	orrs	r3, r2
 800856e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008570:	4b19      	ldr	r3, [pc, #100]	; (80085d8 <HAL_RCC_OscConfig+0x4d0>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a18      	ldr	r2, [pc, #96]	; (80085d8 <HAL_RCC_OscConfig+0x4d0>)
 8008576:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800857a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800857c:	f7fc f8ea 	bl	8004754 <HAL_GetTick>
 8008580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008582:	e008      	b.n	8008596 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008584:	f7fc f8e6 	bl	8004754 <HAL_GetTick>
 8008588:	4602      	mov	r2, r0
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	1ad3      	subs	r3, r2, r3
 800858e:	2b02      	cmp	r3, #2
 8008590:	d901      	bls.n	8008596 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8008592:	2303      	movs	r3, #3
 8008594:	e05f      	b.n	8008656 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008596:	4b10      	ldr	r3, [pc, #64]	; (80085d8 <HAL_RCC_OscConfig+0x4d0>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d0f0      	beq.n	8008584 <HAL_RCC_OscConfig+0x47c>
 80085a2:	e057      	b.n	8008654 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085a4:	4b0c      	ldr	r3, [pc, #48]	; (80085d8 <HAL_RCC_OscConfig+0x4d0>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a0b      	ldr	r2, [pc, #44]	; (80085d8 <HAL_RCC_OscConfig+0x4d0>)
 80085aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085b0:	f7fc f8d0 	bl	8004754 <HAL_GetTick>
 80085b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085b6:	e008      	b.n	80085ca <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085b8:	f7fc f8cc 	bl	8004754 <HAL_GetTick>
 80085bc:	4602      	mov	r2, r0
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	1ad3      	subs	r3, r2, r3
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d901      	bls.n	80085ca <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80085c6:	2303      	movs	r3, #3
 80085c8:	e045      	b.n	8008656 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085ca:	4b03      	ldr	r3, [pc, #12]	; (80085d8 <HAL_RCC_OscConfig+0x4d0>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d1f0      	bne.n	80085b8 <HAL_RCC_OscConfig+0x4b0>
 80085d6:	e03d      	b.n	8008654 <HAL_RCC_OscConfig+0x54c>
 80085d8:	40023800 	.word	0x40023800
 80085dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80085e0:	4b1f      	ldr	r3, [pc, #124]	; (8008660 <HAL_RCC_OscConfig+0x558>)
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d030      	beq.n	8008650 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d129      	bne.n	8008650 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008606:	429a      	cmp	r2, r3
 8008608:	d122      	bne.n	8008650 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800860a:	68fa      	ldr	r2, [r7, #12]
 800860c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008610:	4013      	ands	r3, r2
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008616:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008618:	4293      	cmp	r3, r2
 800861a:	d119      	bne.n	8008650 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008626:	085b      	lsrs	r3, r3, #1
 8008628:	3b01      	subs	r3, #1
 800862a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800862c:	429a      	cmp	r2, r3
 800862e:	d10f      	bne.n	8008650 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800863a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800863c:	429a      	cmp	r2, r3
 800863e:	d107      	bne.n	8008650 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800864a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800864c:	429a      	cmp	r2, r3
 800864e:	d001      	beq.n	8008654 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	e000      	b.n	8008656 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3718      	adds	r7, #24
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	40023800 	.word	0x40023800

08008664 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800866e:	2300      	movs	r3, #0
 8008670:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d101      	bne.n	800867c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008678:	2301      	movs	r3, #1
 800867a:	e0d0      	b.n	800881e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800867c:	4b6a      	ldr	r3, [pc, #424]	; (8008828 <HAL_RCC_ClockConfig+0x1c4>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f003 030f 	and.w	r3, r3, #15
 8008684:	683a      	ldr	r2, [r7, #0]
 8008686:	429a      	cmp	r2, r3
 8008688:	d910      	bls.n	80086ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800868a:	4b67      	ldr	r3, [pc, #412]	; (8008828 <HAL_RCC_ClockConfig+0x1c4>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f023 020f 	bic.w	r2, r3, #15
 8008692:	4965      	ldr	r1, [pc, #404]	; (8008828 <HAL_RCC_ClockConfig+0x1c4>)
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	4313      	orrs	r3, r2
 8008698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800869a:	4b63      	ldr	r3, [pc, #396]	; (8008828 <HAL_RCC_ClockConfig+0x1c4>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f003 030f 	and.w	r3, r3, #15
 80086a2:	683a      	ldr	r2, [r7, #0]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d001      	beq.n	80086ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80086a8:	2301      	movs	r3, #1
 80086aa:	e0b8      	b.n	800881e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 0302 	and.w	r3, r3, #2
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d020      	beq.n	80086fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f003 0304 	and.w	r3, r3, #4
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d005      	beq.n	80086d0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80086c4:	4b59      	ldr	r3, [pc, #356]	; (800882c <HAL_RCC_ClockConfig+0x1c8>)
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	4a58      	ldr	r2, [pc, #352]	; (800882c <HAL_RCC_ClockConfig+0x1c8>)
 80086ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80086ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f003 0308 	and.w	r3, r3, #8
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d005      	beq.n	80086e8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80086dc:	4b53      	ldr	r3, [pc, #332]	; (800882c <HAL_RCC_ClockConfig+0x1c8>)
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	4a52      	ldr	r2, [pc, #328]	; (800882c <HAL_RCC_ClockConfig+0x1c8>)
 80086e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80086e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80086e8:	4b50      	ldr	r3, [pc, #320]	; (800882c <HAL_RCC_ClockConfig+0x1c8>)
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	494d      	ldr	r1, [pc, #308]	; (800882c <HAL_RCC_ClockConfig+0x1c8>)
 80086f6:	4313      	orrs	r3, r2
 80086f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f003 0301 	and.w	r3, r3, #1
 8008702:	2b00      	cmp	r3, #0
 8008704:	d040      	beq.n	8008788 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	2b01      	cmp	r3, #1
 800870c:	d107      	bne.n	800871e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800870e:	4b47      	ldr	r3, [pc, #284]	; (800882c <HAL_RCC_ClockConfig+0x1c8>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008716:	2b00      	cmp	r3, #0
 8008718:	d115      	bne.n	8008746 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	e07f      	b.n	800881e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	2b02      	cmp	r3, #2
 8008724:	d107      	bne.n	8008736 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008726:	4b41      	ldr	r3, [pc, #260]	; (800882c <HAL_RCC_ClockConfig+0x1c8>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800872e:	2b00      	cmp	r3, #0
 8008730:	d109      	bne.n	8008746 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	e073      	b.n	800881e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008736:	4b3d      	ldr	r3, [pc, #244]	; (800882c <HAL_RCC_ClockConfig+0x1c8>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f003 0302 	and.w	r3, r3, #2
 800873e:	2b00      	cmp	r3, #0
 8008740:	d101      	bne.n	8008746 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008742:	2301      	movs	r3, #1
 8008744:	e06b      	b.n	800881e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008746:	4b39      	ldr	r3, [pc, #228]	; (800882c <HAL_RCC_ClockConfig+0x1c8>)
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	f023 0203 	bic.w	r2, r3, #3
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	4936      	ldr	r1, [pc, #216]	; (800882c <HAL_RCC_ClockConfig+0x1c8>)
 8008754:	4313      	orrs	r3, r2
 8008756:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008758:	f7fb fffc 	bl	8004754 <HAL_GetTick>
 800875c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800875e:	e00a      	b.n	8008776 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008760:	f7fb fff8 	bl	8004754 <HAL_GetTick>
 8008764:	4602      	mov	r2, r0
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	1ad3      	subs	r3, r2, r3
 800876a:	f241 3288 	movw	r2, #5000	; 0x1388
 800876e:	4293      	cmp	r3, r2
 8008770:	d901      	bls.n	8008776 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008772:	2303      	movs	r3, #3
 8008774:	e053      	b.n	800881e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008776:	4b2d      	ldr	r3, [pc, #180]	; (800882c <HAL_RCC_ClockConfig+0x1c8>)
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	f003 020c 	and.w	r2, r3, #12
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	429a      	cmp	r2, r3
 8008786:	d1eb      	bne.n	8008760 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008788:	4b27      	ldr	r3, [pc, #156]	; (8008828 <HAL_RCC_ClockConfig+0x1c4>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f003 030f 	and.w	r3, r3, #15
 8008790:	683a      	ldr	r2, [r7, #0]
 8008792:	429a      	cmp	r2, r3
 8008794:	d210      	bcs.n	80087b8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008796:	4b24      	ldr	r3, [pc, #144]	; (8008828 <HAL_RCC_ClockConfig+0x1c4>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f023 020f 	bic.w	r2, r3, #15
 800879e:	4922      	ldr	r1, [pc, #136]	; (8008828 <HAL_RCC_ClockConfig+0x1c4>)
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80087a6:	4b20      	ldr	r3, [pc, #128]	; (8008828 <HAL_RCC_ClockConfig+0x1c4>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f003 030f 	and.w	r3, r3, #15
 80087ae:	683a      	ldr	r2, [r7, #0]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d001      	beq.n	80087b8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80087b4:	2301      	movs	r3, #1
 80087b6:	e032      	b.n	800881e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f003 0304 	and.w	r3, r3, #4
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d008      	beq.n	80087d6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80087c4:	4b19      	ldr	r3, [pc, #100]	; (800882c <HAL_RCC_ClockConfig+0x1c8>)
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	4916      	ldr	r1, [pc, #88]	; (800882c <HAL_RCC_ClockConfig+0x1c8>)
 80087d2:	4313      	orrs	r3, r2
 80087d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f003 0308 	and.w	r3, r3, #8
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d009      	beq.n	80087f6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80087e2:	4b12      	ldr	r3, [pc, #72]	; (800882c <HAL_RCC_ClockConfig+0x1c8>)
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	00db      	lsls	r3, r3, #3
 80087f0:	490e      	ldr	r1, [pc, #56]	; (800882c <HAL_RCC_ClockConfig+0x1c8>)
 80087f2:	4313      	orrs	r3, r2
 80087f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80087f6:	f000 f821 	bl	800883c <HAL_RCC_GetSysClockFreq>
 80087fa:	4601      	mov	r1, r0
 80087fc:	4b0b      	ldr	r3, [pc, #44]	; (800882c <HAL_RCC_ClockConfig+0x1c8>)
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	091b      	lsrs	r3, r3, #4
 8008802:	f003 030f 	and.w	r3, r3, #15
 8008806:	4a0a      	ldr	r2, [pc, #40]	; (8008830 <HAL_RCC_ClockConfig+0x1cc>)
 8008808:	5cd3      	ldrb	r3, [r2, r3]
 800880a:	fa21 f303 	lsr.w	r3, r1, r3
 800880e:	4a09      	ldr	r2, [pc, #36]	; (8008834 <HAL_RCC_ClockConfig+0x1d0>)
 8008810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008812:	4b09      	ldr	r3, [pc, #36]	; (8008838 <HAL_RCC_ClockConfig+0x1d4>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4618      	mov	r0, r3
 8008818:	f7fb ff58 	bl	80046cc <HAL_InitTick>

  return HAL_OK;
 800881c:	2300      	movs	r3, #0
}
 800881e:	4618      	mov	r0, r3
 8008820:	3710      	adds	r7, #16
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	40023c00 	.word	0x40023c00
 800882c:	40023800 	.word	0x40023800
 8008830:	08012ac0 	.word	0x08012ac0
 8008834:	20000000 	.word	0x20000000
 8008838:	20000058 	.word	0x20000058

0800883c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800883c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800883e:	b085      	sub	sp, #20
 8008840:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008842:	2300      	movs	r3, #0
 8008844:	607b      	str	r3, [r7, #4]
 8008846:	2300      	movs	r3, #0
 8008848:	60fb      	str	r3, [r7, #12]
 800884a:	2300      	movs	r3, #0
 800884c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800884e:	2300      	movs	r3, #0
 8008850:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008852:	4b50      	ldr	r3, [pc, #320]	; (8008994 <HAL_RCC_GetSysClockFreq+0x158>)
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	f003 030c 	and.w	r3, r3, #12
 800885a:	2b04      	cmp	r3, #4
 800885c:	d007      	beq.n	800886e <HAL_RCC_GetSysClockFreq+0x32>
 800885e:	2b08      	cmp	r3, #8
 8008860:	d008      	beq.n	8008874 <HAL_RCC_GetSysClockFreq+0x38>
 8008862:	2b00      	cmp	r3, #0
 8008864:	f040 808d 	bne.w	8008982 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008868:	4b4b      	ldr	r3, [pc, #300]	; (8008998 <HAL_RCC_GetSysClockFreq+0x15c>)
 800886a:	60bb      	str	r3, [r7, #8]
      break;
 800886c:	e08c      	b.n	8008988 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800886e:	4b4b      	ldr	r3, [pc, #300]	; (800899c <HAL_RCC_GetSysClockFreq+0x160>)
 8008870:	60bb      	str	r3, [r7, #8]
      break;
 8008872:	e089      	b.n	8008988 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008874:	4b47      	ldr	r3, [pc, #284]	; (8008994 <HAL_RCC_GetSysClockFreq+0x158>)
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800887c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800887e:	4b45      	ldr	r3, [pc, #276]	; (8008994 <HAL_RCC_GetSysClockFreq+0x158>)
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008886:	2b00      	cmp	r3, #0
 8008888:	d023      	beq.n	80088d2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800888a:	4b42      	ldr	r3, [pc, #264]	; (8008994 <HAL_RCC_GetSysClockFreq+0x158>)
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	099b      	lsrs	r3, r3, #6
 8008890:	f04f 0400 	mov.w	r4, #0
 8008894:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008898:	f04f 0200 	mov.w	r2, #0
 800889c:	ea03 0501 	and.w	r5, r3, r1
 80088a0:	ea04 0602 	and.w	r6, r4, r2
 80088a4:	4a3d      	ldr	r2, [pc, #244]	; (800899c <HAL_RCC_GetSysClockFreq+0x160>)
 80088a6:	fb02 f106 	mul.w	r1, r2, r6
 80088aa:	2200      	movs	r2, #0
 80088ac:	fb02 f205 	mul.w	r2, r2, r5
 80088b0:	440a      	add	r2, r1
 80088b2:	493a      	ldr	r1, [pc, #232]	; (800899c <HAL_RCC_GetSysClockFreq+0x160>)
 80088b4:	fba5 0101 	umull	r0, r1, r5, r1
 80088b8:	1853      	adds	r3, r2, r1
 80088ba:	4619      	mov	r1, r3
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f04f 0400 	mov.w	r4, #0
 80088c2:	461a      	mov	r2, r3
 80088c4:	4623      	mov	r3, r4
 80088c6:	f7f7 fcb7 	bl	8000238 <__aeabi_uldivmod>
 80088ca:	4603      	mov	r3, r0
 80088cc:	460c      	mov	r4, r1
 80088ce:	60fb      	str	r3, [r7, #12]
 80088d0:	e049      	b.n	8008966 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80088d2:	4b30      	ldr	r3, [pc, #192]	; (8008994 <HAL_RCC_GetSysClockFreq+0x158>)
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	099b      	lsrs	r3, r3, #6
 80088d8:	f04f 0400 	mov.w	r4, #0
 80088dc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80088e0:	f04f 0200 	mov.w	r2, #0
 80088e4:	ea03 0501 	and.w	r5, r3, r1
 80088e8:	ea04 0602 	and.w	r6, r4, r2
 80088ec:	4629      	mov	r1, r5
 80088ee:	4632      	mov	r2, r6
 80088f0:	f04f 0300 	mov.w	r3, #0
 80088f4:	f04f 0400 	mov.w	r4, #0
 80088f8:	0154      	lsls	r4, r2, #5
 80088fa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80088fe:	014b      	lsls	r3, r1, #5
 8008900:	4619      	mov	r1, r3
 8008902:	4622      	mov	r2, r4
 8008904:	1b49      	subs	r1, r1, r5
 8008906:	eb62 0206 	sbc.w	r2, r2, r6
 800890a:	f04f 0300 	mov.w	r3, #0
 800890e:	f04f 0400 	mov.w	r4, #0
 8008912:	0194      	lsls	r4, r2, #6
 8008914:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008918:	018b      	lsls	r3, r1, #6
 800891a:	1a5b      	subs	r3, r3, r1
 800891c:	eb64 0402 	sbc.w	r4, r4, r2
 8008920:	f04f 0100 	mov.w	r1, #0
 8008924:	f04f 0200 	mov.w	r2, #0
 8008928:	00e2      	lsls	r2, r4, #3
 800892a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800892e:	00d9      	lsls	r1, r3, #3
 8008930:	460b      	mov	r3, r1
 8008932:	4614      	mov	r4, r2
 8008934:	195b      	adds	r3, r3, r5
 8008936:	eb44 0406 	adc.w	r4, r4, r6
 800893a:	f04f 0100 	mov.w	r1, #0
 800893e:	f04f 0200 	mov.w	r2, #0
 8008942:	02a2      	lsls	r2, r4, #10
 8008944:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008948:	0299      	lsls	r1, r3, #10
 800894a:	460b      	mov	r3, r1
 800894c:	4614      	mov	r4, r2
 800894e:	4618      	mov	r0, r3
 8008950:	4621      	mov	r1, r4
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f04f 0400 	mov.w	r4, #0
 8008958:	461a      	mov	r2, r3
 800895a:	4623      	mov	r3, r4
 800895c:	f7f7 fc6c 	bl	8000238 <__aeabi_uldivmod>
 8008960:	4603      	mov	r3, r0
 8008962:	460c      	mov	r4, r1
 8008964:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008966:	4b0b      	ldr	r3, [pc, #44]	; (8008994 <HAL_RCC_GetSysClockFreq+0x158>)
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	0c1b      	lsrs	r3, r3, #16
 800896c:	f003 0303 	and.w	r3, r3, #3
 8008970:	3301      	adds	r3, #1
 8008972:	005b      	lsls	r3, r3, #1
 8008974:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8008976:	68fa      	ldr	r2, [r7, #12]
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	fbb2 f3f3 	udiv	r3, r2, r3
 800897e:	60bb      	str	r3, [r7, #8]
      break;
 8008980:	e002      	b.n	8008988 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008982:	4b05      	ldr	r3, [pc, #20]	; (8008998 <HAL_RCC_GetSysClockFreq+0x15c>)
 8008984:	60bb      	str	r3, [r7, #8]
      break;
 8008986:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008988:	68bb      	ldr	r3, [r7, #8]
}
 800898a:	4618      	mov	r0, r3
 800898c:	3714      	adds	r7, #20
 800898e:	46bd      	mov	sp, r7
 8008990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008992:	bf00      	nop
 8008994:	40023800 	.word	0x40023800
 8008998:	00f42400 	.word	0x00f42400
 800899c:	017d7840 	.word	0x017d7840

080089a0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80089a0:	b480      	push	{r7}
 80089a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80089a4:	4b03      	ldr	r3, [pc, #12]	; (80089b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80089a6:	681b      	ldr	r3, [r3, #0]
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr
 80089b2:	bf00      	nop
 80089b4:	20000000 	.word	0x20000000

080089b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80089bc:	f7ff fff0 	bl	80089a0 <HAL_RCC_GetHCLKFreq>
 80089c0:	4601      	mov	r1, r0
 80089c2:	4b05      	ldr	r3, [pc, #20]	; (80089d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80089c4:	689b      	ldr	r3, [r3, #8]
 80089c6:	0a9b      	lsrs	r3, r3, #10
 80089c8:	f003 0307 	and.w	r3, r3, #7
 80089cc:	4a03      	ldr	r2, [pc, #12]	; (80089dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80089ce:	5cd3      	ldrb	r3, [r2, r3]
 80089d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	40023800 	.word	0x40023800
 80089dc:	08012ad0 	.word	0x08012ad0

080089e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80089e4:	f7ff ffdc 	bl	80089a0 <HAL_RCC_GetHCLKFreq>
 80089e8:	4601      	mov	r1, r0
 80089ea:	4b05      	ldr	r3, [pc, #20]	; (8008a00 <HAL_RCC_GetPCLK2Freq+0x20>)
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	0b5b      	lsrs	r3, r3, #13
 80089f0:	f003 0307 	and.w	r3, r3, #7
 80089f4:	4a03      	ldr	r2, [pc, #12]	; (8008a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80089f6:	5cd3      	ldrb	r3, [r2, r3]
 80089f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	40023800 	.word	0x40023800
 8008a04:	08012ad0 	.word	0x08012ad0

08008a08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b088      	sub	sp, #32
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008a10:	2300      	movs	r3, #0
 8008a12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008a14:	2300      	movs	r3, #0
 8008a16:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008a20:	2300      	movs	r3, #0
 8008a22:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f003 0301 	and.w	r3, r3, #1
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d012      	beq.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008a30:	4b69      	ldr	r3, [pc, #420]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	4a68      	ldr	r2, [pc, #416]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a36:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008a3a:	6093      	str	r3, [r2, #8]
 8008a3c:	4b66      	ldr	r3, [pc, #408]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a3e:	689a      	ldr	r2, [r3, #8]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a44:	4964      	ldr	r1, [pc, #400]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a46:	4313      	orrs	r3, r2
 8008a48:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d101      	bne.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008a52:	2301      	movs	r3, #1
 8008a54:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d017      	beq.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008a62:	4b5d      	ldr	r3, [pc, #372]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a70:	4959      	ldr	r1, [pc, #356]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a72:	4313      	orrs	r3, r2
 8008a74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a80:	d101      	bne.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008a82:	2301      	movs	r3, #1
 8008a84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d101      	bne.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d017      	beq.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008a9e:	4b4e      	ldr	r3, [pc, #312]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008aa4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aac:	494a      	ldr	r1, [pc, #296]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008abc:	d101      	bne.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d101      	bne.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008aca:	2301      	movs	r3, #1
 8008acc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d001      	beq.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008ada:	2301      	movs	r3, #1
 8008adc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f003 0320 	and.w	r3, r3, #32
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	f000 808b 	beq.w	8008c02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008aec:	4b3a      	ldr	r3, [pc, #232]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af0:	4a39      	ldr	r2, [pc, #228]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008af6:	6413      	str	r3, [r2, #64]	; 0x40
 8008af8:	4b37      	ldr	r3, [pc, #220]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b00:	60bb      	str	r3, [r7, #8]
 8008b02:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008b04:	4b35      	ldr	r3, [pc, #212]	; (8008bdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a34      	ldr	r2, [pc, #208]	; (8008bdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b10:	f7fb fe20 	bl	8004754 <HAL_GetTick>
 8008b14:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008b16:	e008      	b.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b18:	f7fb fe1c 	bl	8004754 <HAL_GetTick>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	1ad3      	subs	r3, r2, r3
 8008b22:	2b64      	cmp	r3, #100	; 0x64
 8008b24:	d901      	bls.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008b26:	2303      	movs	r3, #3
 8008b28:	e38d      	b.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008b2a:	4b2c      	ldr	r3, [pc, #176]	; (8008bdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d0f0      	beq.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008b36:	4b28      	ldr	r3, [pc, #160]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b3e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d035      	beq.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b4e:	693a      	ldr	r2, [r7, #16]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d02e      	beq.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008b54:	4b20      	ldr	r3, [pc, #128]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b5c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008b5e:	4b1e      	ldr	r3, [pc, #120]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b62:	4a1d      	ldr	r2, [pc, #116]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b68:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008b6a:	4b1b      	ldr	r3, [pc, #108]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b6e:	4a1a      	ldr	r2, [pc, #104]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b74:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008b76:	4a18      	ldr	r2, [pc, #96]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008b7c:	4b16      	ldr	r3, [pc, #88]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b80:	f003 0301 	and.w	r3, r3, #1
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d114      	bne.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b88:	f7fb fde4 	bl	8004754 <HAL_GetTick>
 8008b8c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b8e:	e00a      	b.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b90:	f7fb fde0 	bl	8004754 <HAL_GetTick>
 8008b94:	4602      	mov	r2, r0
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	1ad3      	subs	r3, r2, r3
 8008b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d901      	bls.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008ba2:	2303      	movs	r3, #3
 8008ba4:	e34f      	b.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ba6:	4b0c      	ldr	r3, [pc, #48]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008baa:	f003 0302 	and.w	r3, r3, #2
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d0ee      	beq.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bbe:	d111      	bne.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008bc0:	4b05      	ldr	r3, [pc, #20]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008bcc:	4b04      	ldr	r3, [pc, #16]	; (8008be0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008bce:	400b      	ands	r3, r1
 8008bd0:	4901      	ldr	r1, [pc, #4]	; (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	608b      	str	r3, [r1, #8]
 8008bd6:	e00b      	b.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008bd8:	40023800 	.word	0x40023800
 8008bdc:	40007000 	.word	0x40007000
 8008be0:	0ffffcff 	.word	0x0ffffcff
 8008be4:	4bb3      	ldr	r3, [pc, #716]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	4ab2      	ldr	r2, [pc, #712]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008bea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008bee:	6093      	str	r3, [r2, #8]
 8008bf0:	4bb0      	ldr	r3, [pc, #704]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008bf2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008bfc:	49ad      	ldr	r1, [pc, #692]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f003 0310 	and.w	r3, r3, #16
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d010      	beq.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008c0e:	4ba9      	ldr	r3, [pc, #676]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c14:	4aa7      	ldr	r2, [pc, #668]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008c16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008c1e:	4ba5      	ldr	r3, [pc, #660]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008c20:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c28:	49a2      	ldr	r1, [pc, #648]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d00a      	beq.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008c3c:	4b9d      	ldr	r3, [pc, #628]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c4a:	499a      	ldr	r1, [pc, #616]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00a      	beq.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008c5e:	4b95      	ldr	r3, [pc, #596]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c6c:	4991      	ldr	r1, [pc, #580]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d00a      	beq.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008c80:	4b8c      	ldr	r3, [pc, #560]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c8e:	4989      	ldr	r1, [pc, #548]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008c90:	4313      	orrs	r3, r2
 8008c92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d00a      	beq.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008ca2:	4b84      	ldr	r3, [pc, #528]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ca8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cb0:	4980      	ldr	r1, [pc, #512]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d00a      	beq.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008cc4:	4b7b      	ldr	r3, [pc, #492]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cca:	f023 0203 	bic.w	r2, r3, #3
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cd2:	4978      	ldr	r1, [pc, #480]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d00a      	beq.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008ce6:	4b73      	ldr	r3, [pc, #460]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cec:	f023 020c 	bic.w	r2, r3, #12
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cf4:	496f      	ldr	r1, [pc, #444]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d00a      	beq.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008d08:	4b6a      	ldr	r3, [pc, #424]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d0e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d16:	4967      	ldr	r1, [pc, #412]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d00a      	beq.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008d2a:	4b62      	ldr	r3, [pc, #392]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d30:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d38:	495e      	ldr	r1, [pc, #376]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d00a      	beq.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008d4c:	4b59      	ldr	r3, [pc, #356]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d5a:	4956      	ldr	r1, [pc, #344]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00a      	beq.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008d6e:	4b51      	ldr	r3, [pc, #324]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d7c:	494d      	ldr	r1, [pc, #308]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d00a      	beq.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008d90:	4b48      	ldr	r3, [pc, #288]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d9e:	4945      	ldr	r1, [pc, #276]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008da0:	4313      	orrs	r3, r2
 8008da2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d00a      	beq.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008db2:	4b40      	ldr	r3, [pc, #256]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008db8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dc0:	493c      	ldr	r1, [pc, #240]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d00a      	beq.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008dd4:	4b37      	ldr	r3, [pc, #220]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dda:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008de2:	4934      	ldr	r1, [pc, #208]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008de4:	4313      	orrs	r3, r2
 8008de6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d011      	beq.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008df6:	4b2f      	ldr	r3, [pc, #188]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dfc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e04:	492b      	ldr	r1, [pc, #172]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008e06:	4313      	orrs	r3, r2
 8008e08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e14:	d101      	bne.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008e16:	2301      	movs	r3, #1
 8008e18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f003 0308 	and.w	r3, r3, #8
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d001      	beq.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008e26:	2301      	movs	r3, #1
 8008e28:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d00a      	beq.n	8008e4c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008e36:	4b1f      	ldr	r3, [pc, #124]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e3c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e44:	491b      	ldr	r1, [pc, #108]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008e46:	4313      	orrs	r3, r2
 8008e48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d00b      	beq.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008e58:	4b16      	ldr	r3, [pc, #88]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e5e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e68:	4912      	ldr	r1, [pc, #72]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d00b      	beq.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8008e7c:	4b0d      	ldr	r3, [pc, #52]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e82:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e8c:	4909      	ldr	r1, [pc, #36]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d00f      	beq.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008ea0:	4b04      	ldr	r3, [pc, #16]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008ea2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ea6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008eb0:	e002      	b.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8008eb2:	bf00      	nop
 8008eb4:	40023800 	.word	0x40023800
 8008eb8:	4985      	ldr	r1, [pc, #532]	; (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d00b      	beq.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8008ecc:	4b80      	ldr	r3, [pc, #512]	; (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008ece:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ed2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008edc:	497c      	ldr	r1, [pc, #496]	; (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8008ee4:	69fb      	ldr	r3, [r7, #28]
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d005      	beq.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ef2:	f040 80d6 	bne.w	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008ef6:	4b76      	ldr	r3, [pc, #472]	; (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a75      	ldr	r2, [pc, #468]	; (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008efc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008f00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f02:	f7fb fc27 	bl	8004754 <HAL_GetTick>
 8008f06:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008f08:	e008      	b.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008f0a:	f7fb fc23 	bl	8004754 <HAL_GetTick>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	1ad3      	subs	r3, r2, r3
 8008f14:	2b64      	cmp	r3, #100	; 0x64
 8008f16:	d901      	bls.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008f18:	2303      	movs	r3, #3
 8008f1a:	e194      	b.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008f1c:	4b6c      	ldr	r3, [pc, #432]	; (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d1f0      	bne.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f003 0301 	and.w	r3, r3, #1
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d021      	beq.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d11d      	bne.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008f3c:	4b64      	ldr	r3, [pc, #400]	; (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f42:	0c1b      	lsrs	r3, r3, #16
 8008f44:	f003 0303 	and.w	r3, r3, #3
 8008f48:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008f4a:	4b61      	ldr	r3, [pc, #388]	; (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008f4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f50:	0e1b      	lsrs	r3, r3, #24
 8008f52:	f003 030f 	and.w	r3, r3, #15
 8008f56:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	019a      	lsls	r2, r3, #6
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	041b      	lsls	r3, r3, #16
 8008f62:	431a      	orrs	r2, r3
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	061b      	lsls	r3, r3, #24
 8008f68:	431a      	orrs	r2, r3
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	071b      	lsls	r3, r3, #28
 8008f70:	4957      	ldr	r1, [pc, #348]	; (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008f72:	4313      	orrs	r3, r2
 8008f74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d004      	beq.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f8c:	d00a      	beq.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d02e      	beq.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008fa2:	d129      	bne.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008fa4:	4b4a      	ldr	r3, [pc, #296]	; (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008faa:	0c1b      	lsrs	r3, r3, #16
 8008fac:	f003 0303 	and.w	r3, r3, #3
 8008fb0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008fb2:	4b47      	ldr	r3, [pc, #284]	; (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fb8:	0f1b      	lsrs	r3, r3, #28
 8008fba:	f003 0307 	and.w	r3, r3, #7
 8008fbe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	019a      	lsls	r2, r3, #6
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	041b      	lsls	r3, r3, #16
 8008fca:	431a      	orrs	r2, r3
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	061b      	lsls	r3, r3, #24
 8008fd2:	431a      	orrs	r2, r3
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	071b      	lsls	r3, r3, #28
 8008fd8:	493d      	ldr	r1, [pc, #244]	; (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008fe0:	4b3b      	ldr	r3, [pc, #236]	; (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008fe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fe6:	f023 021f 	bic.w	r2, r3, #31
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fee:	3b01      	subs	r3, #1
 8008ff0:	4937      	ldr	r1, [pc, #220]	; (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009000:	2b00      	cmp	r3, #0
 8009002:	d01d      	beq.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009004:	4b32      	ldr	r3, [pc, #200]	; (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009006:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800900a:	0e1b      	lsrs	r3, r3, #24
 800900c:	f003 030f 	and.w	r3, r3, #15
 8009010:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009012:	4b2f      	ldr	r3, [pc, #188]	; (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009014:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009018:	0f1b      	lsrs	r3, r3, #28
 800901a:	f003 0307 	and.w	r3, r3, #7
 800901e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	019a      	lsls	r2, r3, #6
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	041b      	lsls	r3, r3, #16
 800902c:	431a      	orrs	r2, r3
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	061b      	lsls	r3, r3, #24
 8009032:	431a      	orrs	r2, r3
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	071b      	lsls	r3, r3, #28
 8009038:	4925      	ldr	r1, [pc, #148]	; (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800903a:	4313      	orrs	r3, r2
 800903c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009048:	2b00      	cmp	r3, #0
 800904a:	d011      	beq.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	019a      	lsls	r2, r3, #6
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	691b      	ldr	r3, [r3, #16]
 8009056:	041b      	lsls	r3, r3, #16
 8009058:	431a      	orrs	r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	061b      	lsls	r3, r3, #24
 8009060:	431a      	orrs	r2, r3
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	071b      	lsls	r3, r3, #28
 8009068:	4919      	ldr	r1, [pc, #100]	; (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800906a:	4313      	orrs	r3, r2
 800906c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009070:	4b17      	ldr	r3, [pc, #92]	; (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a16      	ldr	r2, [pc, #88]	; (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009076:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800907a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800907c:	f7fb fb6a 	bl	8004754 <HAL_GetTick>
 8009080:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009082:	e008      	b.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009084:	f7fb fb66 	bl	8004754 <HAL_GetTick>
 8009088:	4602      	mov	r2, r0
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	1ad3      	subs	r3, r2, r3
 800908e:	2b64      	cmp	r3, #100	; 0x64
 8009090:	d901      	bls.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009092:	2303      	movs	r3, #3
 8009094:	e0d7      	b.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009096:	4b0e      	ldr	r3, [pc, #56]	; (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d0f0      	beq.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80090a2:	69bb      	ldr	r3, [r7, #24]
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	f040 80cd 	bne.w	8009244 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80090aa:	4b09      	ldr	r3, [pc, #36]	; (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a08      	ldr	r2, [pc, #32]	; (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80090b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090b6:	f7fb fb4d 	bl	8004754 <HAL_GetTick>
 80090ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80090bc:	e00a      	b.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80090be:	f7fb fb49 	bl	8004754 <HAL_GetTick>
 80090c2:	4602      	mov	r2, r0
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	1ad3      	subs	r3, r2, r3
 80090c8:	2b64      	cmp	r3, #100	; 0x64
 80090ca:	d903      	bls.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80090cc:	2303      	movs	r3, #3
 80090ce:	e0ba      	b.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80090d0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80090d4:	4b5e      	ldr	r3, [pc, #376]	; (8009250 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090e0:	d0ed      	beq.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d003      	beq.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d009      	beq.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d02e      	beq.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009106:	2b00      	cmp	r3, #0
 8009108:	d12a      	bne.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800910a:	4b51      	ldr	r3, [pc, #324]	; (8009250 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800910c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009110:	0c1b      	lsrs	r3, r3, #16
 8009112:	f003 0303 	and.w	r3, r3, #3
 8009116:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009118:	4b4d      	ldr	r3, [pc, #308]	; (8009250 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800911a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800911e:	0f1b      	lsrs	r3, r3, #28
 8009120:	f003 0307 	and.w	r3, r3, #7
 8009124:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	695b      	ldr	r3, [r3, #20]
 800912a:	019a      	lsls	r2, r3, #6
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	041b      	lsls	r3, r3, #16
 8009130:	431a      	orrs	r2, r3
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	061b      	lsls	r3, r3, #24
 8009138:	431a      	orrs	r2, r3
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	071b      	lsls	r3, r3, #28
 800913e:	4944      	ldr	r1, [pc, #272]	; (8009250 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8009140:	4313      	orrs	r3, r2
 8009142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009146:	4b42      	ldr	r3, [pc, #264]	; (8009250 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8009148:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800914c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009154:	3b01      	subs	r3, #1
 8009156:	021b      	lsls	r3, r3, #8
 8009158:	493d      	ldr	r1, [pc, #244]	; (8009250 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800915a:	4313      	orrs	r3, r2
 800915c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009168:	2b00      	cmp	r3, #0
 800916a:	d022      	beq.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009170:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009174:	d11d      	bne.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009176:	4b36      	ldr	r3, [pc, #216]	; (8009250 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8009178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800917c:	0e1b      	lsrs	r3, r3, #24
 800917e:	f003 030f 	and.w	r3, r3, #15
 8009182:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009184:	4b32      	ldr	r3, [pc, #200]	; (8009250 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8009186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800918a:	0f1b      	lsrs	r3, r3, #28
 800918c:	f003 0307 	and.w	r3, r3, #7
 8009190:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	695b      	ldr	r3, [r3, #20]
 8009196:	019a      	lsls	r2, r3, #6
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6a1b      	ldr	r3, [r3, #32]
 800919c:	041b      	lsls	r3, r3, #16
 800919e:	431a      	orrs	r2, r3
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	061b      	lsls	r3, r3, #24
 80091a4:	431a      	orrs	r2, r3
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	071b      	lsls	r3, r3, #28
 80091aa:	4929      	ldr	r1, [pc, #164]	; (8009250 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80091ac:	4313      	orrs	r3, r2
 80091ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f003 0308 	and.w	r3, r3, #8
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d028      	beq.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80091be:	4b24      	ldr	r3, [pc, #144]	; (8009250 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80091c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091c4:	0e1b      	lsrs	r3, r3, #24
 80091c6:	f003 030f 	and.w	r3, r3, #15
 80091ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80091cc:	4b20      	ldr	r3, [pc, #128]	; (8009250 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80091ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091d2:	0c1b      	lsrs	r3, r3, #16
 80091d4:	f003 0303 	and.w	r3, r3, #3
 80091d8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	695b      	ldr	r3, [r3, #20]
 80091de:	019a      	lsls	r2, r3, #6
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	041b      	lsls	r3, r3, #16
 80091e4:	431a      	orrs	r2, r3
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	061b      	lsls	r3, r3, #24
 80091ea:	431a      	orrs	r2, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	69db      	ldr	r3, [r3, #28]
 80091f0:	071b      	lsls	r3, r3, #28
 80091f2:	4917      	ldr	r1, [pc, #92]	; (8009250 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80091f4:	4313      	orrs	r3, r2
 80091f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80091fa:	4b15      	ldr	r3, [pc, #84]	; (8009250 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80091fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009200:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009208:	4911      	ldr	r1, [pc, #68]	; (8009250 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800920a:	4313      	orrs	r3, r2
 800920c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009210:	4b0f      	ldr	r3, [pc, #60]	; (8009250 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a0e      	ldr	r2, [pc, #56]	; (8009250 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8009216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800921a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800921c:	f7fb fa9a 	bl	8004754 <HAL_GetTick>
 8009220:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009222:	e008      	b.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009224:	f7fb fa96 	bl	8004754 <HAL_GetTick>
 8009228:	4602      	mov	r2, r0
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	1ad3      	subs	r3, r2, r3
 800922e:	2b64      	cmp	r3, #100	; 0x64
 8009230:	d901      	bls.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009232:	2303      	movs	r3, #3
 8009234:	e007      	b.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009236:	4b06      	ldr	r3, [pc, #24]	; (8009250 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800923e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009242:	d1ef      	bne.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8009244:	2300      	movs	r3, #0
}
 8009246:	4618      	mov	r0, r3
 8009248:	3720      	adds	r7, #32
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop
 8009250:	40023800 	.word	0x40023800

08009254 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009254:	b480      	push	{r7}
 8009256:	b085      	sub	sp, #20
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 800925c:	2300      	movs	r3, #0
 800925e:	60fb      	str	r3, [r7, #12]

  /* Set all possible values for the extended clock type parameter------------*/
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	4a8c      	ldr	r2, [pc, #560]	; (8009494 <HAL_RCCEx_GetPeriphCLKConfig+0x240>)
 8009264:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8009266:	4b8c      	ldr	r3, [pc, #560]	; (8009498 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8009268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800926c:	099b      	lsrs	r3, r3, #6
 800926e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009276:	4b88      	ldr	r3, [pc, #544]	; (8009498 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8009278:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800927c:	0c1b      	lsrs	r3, r3, #16
 800927e:	f003 0203 	and.w	r2, r3, #3
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009286:	4b84      	ldr	r3, [pc, #528]	; (8009498 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8009288:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800928c:	0e1b      	lsrs	r3, r3, #24
 800928e:	f003 020f 	and.w	r2, r3, #15
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009296:	4b80      	ldr	r3, [pc, #512]	; (8009498 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8009298:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800929c:	0f1b      	lsrs	r3, r3, #28
 800929e:	f003 0207 	and.w	r2, r3, #7
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 80092a6:	4b7c      	ldr	r3, [pc, #496]	; (8009498 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 80092a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092ac:	099b      	lsrs	r3, r3, #6
 80092ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80092b6:	4b78      	ldr	r3, [pc, #480]	; (8009498 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 80092b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092bc:	0c1b      	lsrs	r3, r3, #16
 80092be:	f003 0203 	and.w	r2, r3, #3
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80092c6:	4b74      	ldr	r3, [pc, #464]	; (8009498 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 80092c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092cc:	0e1b      	lsrs	r3, r3, #24
 80092ce:	f003 020f 	and.w	r2, r3, #15
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80092d6:	4b70      	ldr	r3, [pc, #448]	; (8009498 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 80092d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092dc:	0f1b      	lsrs	r3, r3, #28
 80092de:	f003 0207 	and.w	r2, r3, #7
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 80092e6:	4b6c      	ldr	r3, [pc, #432]	; (8009498 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 80092e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092ec:	f003 021f 	and.w	r2, r3, #31
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 80092f4:	4b68      	ldr	r3, [pc, #416]	; (8009498 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 80092f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092fa:	0a1b      	lsrs	r3, r3, #8
 80092fc:	f003 021f 	and.w	r2, r3, #31
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 8009304:	4b64      	ldr	r3, [pc, #400]	; (8009498 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8009306:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800930a:	0c1b      	lsrs	r3, r3, #16
 800930c:	f003 0203 	and.w	r2, r3, #3
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 8009314:	4b60      	ldr	r3, [pc, #384]	; (8009498 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8009316:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800931a:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 8009322:	4b5d      	ldr	r3, [pc, #372]	; (8009498 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8009324:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009328:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8009330:	4b59      	ldr	r3, [pc, #356]	; (8009498 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 800933c:	4b56      	ldr	r3, [pc, #344]	; (8009498 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800933e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009342:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	665a      	str	r2, [r3, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800934a:	4b53      	ldr	r3, [pc, #332]	; (8009498 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800934c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009350:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	669a      	str	r2, [r3, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8009358:	4b4f      	ldr	r3, [pc, #316]	; (8009498 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800935a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800935e:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 8009366:	4b4c      	ldr	r3, [pc, #304]	; (8009498 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8009368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800936c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	671a      	str	r2, [r3, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8009374:	4b48      	ldr	r3, [pc, #288]	; (8009498 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8009376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800937a:	f003 0203 	and.w	r2, r3, #3
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 8009382:	4b45      	ldr	r3, [pc, #276]	; (8009498 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8009384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009388:	f003 020c 	and.w	r2, r3, #12
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	649a      	str	r2, [r3, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8009390:	4b41      	ldr	r3, [pc, #260]	; (8009498 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8009392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009396:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 800939e:	4b3e      	ldr	r3, [pc, #248]	; (8009498 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 80093a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093a4:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 80093ac:	4b3a      	ldr	r3, [pc, #232]	; (8009498 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 80093ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093b2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 80093ba:	4b37      	ldr	r3, [pc, #220]	; (8009498 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 80093bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093c0:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 80093c8:	4b33      	ldr	r3, [pc, #204]	; (8009498 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 80093ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093ce:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 80093d6:	4b30      	ldr	r3, [pc, #192]	; (8009498 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 80093d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093dc:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 80093e4:	4b2c      	ldr	r3, [pc, #176]	; (8009498 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 80093e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093ea:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 80093f2:	4b29      	ldr	r3, [pc, #164]	; (8009498 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 80093f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093f8:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	679a      	str	r2, [r3, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8009400:	4b25      	ldr	r3, [pc, #148]	; (8009498 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8009402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009406:	f003 6200 	and.w	r2, r3, #134217728	; 0x8000000
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 800940e:	4b22      	ldr	r3, [pc, #136]	; (8009498 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8009410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009414:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /* Get the SDMMC2 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc2ClockSelection = __HAL_RCC_GET_SDMMC2_SOURCE();
 800941e:	4b1e      	ldr	r3, [pc, #120]	; (8009498 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8009420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009424:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Get the DFSDM clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection = __HAL_RCC_GET_DFSDM1_SOURCE();
 800942e:	4b1a      	ldr	r3, [pc, #104]	; (8009498 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8009430:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009434:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 800943e:	4b16      	ldr	r3, [pc, #88]	; (8009498 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8009440:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009444:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800944e:	4b12      	ldr	r3, [pc, #72]	; (8009498 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 8009450:	689b      	ldr	r3, [r3, #8]
 8009452:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8009456:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8009458:	4b0f      	ldr	r3, [pc, #60]	; (8009498 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800945a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800945c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	431a      	orrs	r2, r3
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	631a      	str	r2, [r3, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 8009468:	4b0b      	ldr	r3, [pc, #44]	; (8009498 <HAL_RCCEx_GetPeriphCLKConfig+0x244>)
 800946a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800946e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009472:	2b00      	cmp	r3, #0
 8009474:	d103      	bne.n	800947e <HAL_RCCEx_GetPeriphCLKConfig+0x22a>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 800947c:	e003      	b.n	8009486 <HAL_RCCEx_GetPeriphCLKConfig+0x232>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009484:	639a      	str	r2, [r3, #56]	; 0x38
}
 8009486:	bf00      	nop
 8009488:	3714      	adds	r7, #20
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr
 8009492:	bf00      	nop
 8009494:	1cfffff1 	.word	0x1cfffff1
 8009498:	40023800 	.word	0x40023800

0800949c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800949c:	b480      	push	{r7}
 800949e:	b087      	sub	sp, #28
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80094a4:	2300      	movs	r3, #0
 80094a6:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80094a8:	2300      	movs	r3, #0
 80094aa:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80094ac:	2300      	movs	r3, #0
 80094ae:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80094b0:	2300      	movs	r3, #0
 80094b2:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80094ba:	f040 8099 	bne.w	80095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
  {
    saiclocksource = RCC->DCKCFGR1;
 80094be:	4ba0      	ldr	r3, [pc, #640]	; (8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80094c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094c4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80094cc:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094d4:	d045      	beq.n	8009562 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 80094d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094da:	d802      	bhi.n	80094e2 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d007      	beq.n	80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80094e0:	e087      	b.n	80095f2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
    switch (saiclocksource)
 80094e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80094e6:	d074      	beq.n	80095d2 <HAL_RCCEx_GetPeriphCLKFreq+0x136>
 80094e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80094ec:	d074      	beq.n	80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 80094ee:	e080      	b.n	80095f2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80094f0:	4b93      	ldr	r3, [pc, #588]	; (8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d108      	bne.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80094fc:	4b90      	ldr	r3, [pc, #576]	; (8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009504:	4a8f      	ldr	r2, [pc, #572]	; (8009744 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009506:	fbb2 f3f3 	udiv	r3, r2, r3
 800950a:	613b      	str	r3, [r7, #16]
 800950c:	e007      	b.n	800951e <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800950e:	4b8c      	ldr	r3, [pc, #560]	; (8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009516:	4a8c      	ldr	r2, [pc, #560]	; (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8009518:	fbb2 f3f3 	udiv	r3, r2, r3
 800951c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800951e:	4b88      	ldr	r3, [pc, #544]	; (8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009524:	0e1b      	lsrs	r3, r3, #24
 8009526:	f003 030f 	and.w	r3, r3, #15
 800952a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800952c:	4b84      	ldr	r3, [pc, #528]	; (8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800952e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009532:	099b      	lsrs	r3, r3, #6
 8009534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009538:	693a      	ldr	r2, [r7, #16]
 800953a:	fb02 f203 	mul.w	r2, r2, r3
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	fbb2 f3f3 	udiv	r3, r2, r3
 8009544:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009546:	4b7e      	ldr	r3, [pc, #504]	; (8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009548:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800954c:	0a1b      	lsrs	r3, r3, #8
 800954e:	f003 031f 	and.w	r3, r3, #31
 8009552:	3301      	adds	r3, #1
 8009554:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009556:	697a      	ldr	r2, [r7, #20]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	fbb2 f3f3 	udiv	r3, r2, r3
 800955e:	617b      	str	r3, [r7, #20]
        break;
 8009560:	e047      	b.n	80095f2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009562:	4b77      	ldr	r3, [pc, #476]	; (8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800956a:	2b00      	cmp	r3, #0
 800956c:	d108      	bne.n	8009580 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800956e:	4b74      	ldr	r3, [pc, #464]	; (8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009576:	4a73      	ldr	r2, [pc, #460]	; (8009744 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009578:	fbb2 f3f3 	udiv	r3, r2, r3
 800957c:	613b      	str	r3, [r7, #16]
 800957e:	e007      	b.n	8009590 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009580:	4b6f      	ldr	r3, [pc, #444]	; (8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009588:	4a6f      	ldr	r2, [pc, #444]	; (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 800958a:	fbb2 f3f3 	udiv	r3, r2, r3
 800958e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8009590:	4b6b      	ldr	r3, [pc, #428]	; (8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009592:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009596:	0e1b      	lsrs	r3, r3, #24
 8009598:	f003 030f 	and.w	r3, r3, #15
 800959c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800959e:	4b68      	ldr	r3, [pc, #416]	; (8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80095a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095a4:	099b      	lsrs	r3, r3, #6
 80095a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095aa:	693a      	ldr	r2, [r7, #16]
 80095ac:	fb02 f203 	mul.w	r2, r2, r3
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80095b6:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80095b8:	4b61      	ldr	r3, [pc, #388]	; (8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80095ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095be:	f003 031f 	and.w	r3, r3, #31
 80095c2:	3301      	adds	r3, #1
 80095c4:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80095c6:	697a      	ldr	r2, [r7, #20]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80095ce:	617b      	str	r3, [r7, #20]
        break;
 80095d0:	e00f      	b.n	80095f2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
        frequency = EXTERNAL_CLOCK_VALUE;
 80095d2:	4b5e      	ldr	r3, [pc, #376]	; (800974c <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 80095d4:	617b      	str	r3, [r7, #20]
        break;
 80095d6:	e00c      	b.n	80095f2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80095d8:	4b59      	ldr	r3, [pc, #356]	; (8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d102      	bne.n	80095ea <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
          frequency = HSI_VALUE;
 80095e4:	4b57      	ldr	r3, [pc, #348]	; (8009744 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80095e6:	617b      	str	r3, [r7, #20]
        break;
 80095e8:	e003      	b.n	80095f2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
          frequency = HSE_VALUE;
 80095ea:	4b57      	ldr	r3, [pc, #348]	; (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 80095ec:	617b      	str	r3, [r7, #20]
        break;
 80095ee:	e000      	b.n	80095f2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      }
    }
  }
 80095f0:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095f8:	f040 8099 	bne.w	800972e <HAL_RCCEx_GetPeriphCLKFreq+0x292>
  {
    saiclocksource = RCC->DCKCFGR1;
 80095fc:	4b50      	ldr	r3, [pc, #320]	; (8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80095fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009602:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800960a:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009612:	d045      	beq.n	80096a0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
 8009614:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009618:	d802      	bhi.n	8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 800961a:	2b00      	cmp	r3, #0
 800961c:	d007      	beq.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0x192>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800961e:	e087      	b.n	8009730 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
    switch (saiclocksource)
 8009620:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009624:	d074      	beq.n	8009710 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8009626:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800962a:	d074      	beq.n	8009716 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
        break;
 800962c:	e080      	b.n	8009730 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800962e:	4b44      	ldr	r3, [pc, #272]	; (8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009636:	2b00      	cmp	r3, #0
 8009638:	d108      	bne.n	800964c <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800963a:	4b41      	ldr	r3, [pc, #260]	; (8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009642:	4a40      	ldr	r2, [pc, #256]	; (8009744 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009644:	fbb2 f3f3 	udiv	r3, r2, r3
 8009648:	613b      	str	r3, [r7, #16]
 800964a:	e007      	b.n	800965c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800964c:	4b3c      	ldr	r3, [pc, #240]	; (8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009654:	4a3c      	ldr	r2, [pc, #240]	; (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8009656:	fbb2 f3f3 	udiv	r3, r2, r3
 800965a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800965c:	4b38      	ldr	r3, [pc, #224]	; (8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800965e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009662:	0e1b      	lsrs	r3, r3, #24
 8009664:	f003 030f 	and.w	r3, r3, #15
 8009668:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800966a:	4b35      	ldr	r3, [pc, #212]	; (8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800966c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009670:	099b      	lsrs	r3, r3, #6
 8009672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009676:	693a      	ldr	r2, [r7, #16]
 8009678:	fb02 f203 	mul.w	r2, r2, r3
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009682:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009684:	4b2e      	ldr	r3, [pc, #184]	; (8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009686:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800968a:	0a1b      	lsrs	r3, r3, #8
 800968c:	f003 031f 	and.w	r3, r3, #31
 8009690:	3301      	adds	r3, #1
 8009692:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009694:	697a      	ldr	r2, [r7, #20]
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	fbb2 f3f3 	udiv	r3, r2, r3
 800969c:	617b      	str	r3, [r7, #20]
        break;
 800969e:	e047      	b.n	8009730 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80096a0:	4b27      	ldr	r3, [pc, #156]	; (8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80096a2:	685b      	ldr	r3, [r3, #4]
 80096a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d108      	bne.n	80096be <HAL_RCCEx_GetPeriphCLKFreq+0x222>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80096ac:	4b24      	ldr	r3, [pc, #144]	; (8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096b4:	4a23      	ldr	r2, [pc, #140]	; (8009744 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80096b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80096ba:	613b      	str	r3, [r7, #16]
 80096bc:	e007      	b.n	80096ce <HAL_RCCEx_GetPeriphCLKFreq+0x232>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80096be:	4b20      	ldr	r3, [pc, #128]	; (8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096c6:	4a20      	ldr	r2, [pc, #128]	; (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 80096c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80096cc:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80096ce:	4b1c      	ldr	r3, [pc, #112]	; (8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80096d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096d4:	0e1b      	lsrs	r3, r3, #24
 80096d6:	f003 030f 	and.w	r3, r3, #15
 80096da:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80096dc:	4b18      	ldr	r3, [pc, #96]	; (8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80096de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096e2:	099b      	lsrs	r3, r3, #6
 80096e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096e8:	693a      	ldr	r2, [r7, #16]
 80096ea:	fb02 f203 	mul.w	r2, r2, r3
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80096f4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80096f6:	4b12      	ldr	r3, [pc, #72]	; (8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80096f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096fc:	f003 031f 	and.w	r3, r3, #31
 8009700:	3301      	adds	r3, #1
 8009702:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009704:	697a      	ldr	r2, [r7, #20]
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	fbb2 f3f3 	udiv	r3, r2, r3
 800970c:	617b      	str	r3, [r7, #20]
        break;
 800970e:	e00f      	b.n	8009730 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
        frequency = EXTERNAL_CLOCK_VALUE;
 8009710:	4b0e      	ldr	r3, [pc, #56]	; (800974c <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8009712:	617b      	str	r3, [r7, #20]
        break;
 8009714:	e00c      	b.n	8009730 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009716:	4b0a      	ldr	r3, [pc, #40]	; (8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800971e:	2b00      	cmp	r3, #0
 8009720:	d102      	bne.n	8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
          frequency = HSI_VALUE;
 8009722:	4b08      	ldr	r3, [pc, #32]	; (8009744 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009724:	617b      	str	r3, [r7, #20]
        break;
 8009726:	e003      	b.n	8009730 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
          frequency = HSE_VALUE;
 8009728:	4b07      	ldr	r3, [pc, #28]	; (8009748 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 800972a:	617b      	str	r3, [r7, #20]
        break;
 800972c:	e000      	b.n	8009730 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
      }
    }
  }
 800972e:	bf00      	nop

  return frequency;
 8009730:	697b      	ldr	r3, [r7, #20]
}
 8009732:	4618      	mov	r0, r3
 8009734:	371c      	adds	r7, #28
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr
 800973e:	bf00      	nop
 8009740:	40023800 	.word	0x40023800
 8009744:	00f42400 	.word	0x00f42400
 8009748:	017d7840 	.word	0x017d7840
 800974c:	00bb8000 	.word	0x00bb8000

08009750 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b086      	sub	sp, #24
 8009754:	af00      	add	r7, sp, #0
 8009756:	60f8      	str	r0, [r7, #12]
 8009758:	60b9      	str	r1, [r7, #8]
 800975a:	607a      	str	r2, [r7, #4]
 800975c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800975e:	2300      	movs	r3, #0
 8009760:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch(protocol)
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	2b04      	cmp	r3, #4
 8009766:	d81f      	bhi.n	80097a8 <HAL_SAI_InitProtocol+0x58>
 8009768:	a201      	add	r2, pc, #4	; (adr r2, 8009770 <HAL_SAI_InitProtocol+0x20>)
 800976a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800976e:	bf00      	nop
 8009770:	08009785 	.word	0x08009785
 8009774:	08009785 	.word	0x08009785
 8009778:	08009785 	.word	0x08009785
 800977c:	08009797 	.word	0x08009797
 8009780:	08009797 	.word	0x08009797
  {
  case SAI_I2S_STANDARD :
  case SAI_I2S_MSBJUSTIFIED :
  case SAI_I2S_LSBJUSTIFIED :
    status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	68b9      	ldr	r1, [r7, #8]
 800978a:	68f8      	ldr	r0, [r7, #12]
 800978c:	f000 fc92 	bl	800a0b4 <SAI_InitI2S>
 8009790:	4603      	mov	r3, r0
 8009792:	75fb      	strb	r3, [r7, #23]
    break;
 8009794:	e00b      	b.n	80097ae <HAL_SAI_InitProtocol+0x5e>
  case SAI_PCM_LONG :
  case SAI_PCM_SHORT :
    status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	68b9      	ldr	r1, [r7, #8]
 800979c:	68f8      	ldr	r0, [r7, #12]
 800979e:	f000 fd3d 	bl	800a21c <SAI_InitPCM>
 80097a2:	4603      	mov	r3, r0
 80097a4:	75fb      	strb	r3, [r7, #23]
    break;
 80097a6:	e002      	b.n	80097ae <HAL_SAI_InitProtocol+0x5e>
  default :
    status = HAL_ERROR;
 80097a8:	2301      	movs	r3, #1
 80097aa:	75fb      	strb	r3, [r7, #23]
    break;
 80097ac:	bf00      	nop
  }

  if(status == HAL_OK)
 80097ae:	7dfb      	ldrb	r3, [r7, #23]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d104      	bne.n	80097be <HAL_SAI_InitProtocol+0x6e>
  {
    status = HAL_SAI_Init(hsai);
 80097b4:	68f8      	ldr	r0, [r7, #12]
 80097b6:	f000 f807 	bl	80097c8 <HAL_SAI_Init>
 80097ba:	4603      	mov	r3, r0
 80097bc:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80097be:	7dfb      	ldrb	r3, [r7, #23]
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3718      	adds	r7, #24
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b088      	sub	sp, #32
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80097d0:	2300      	movs	r3, #0
 80097d2:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80097d4:	2300      	movs	r3, #0
 80097d6:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80097d8:	2300      	movs	r3, #0
 80097da:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d101      	bne.n	80097e6 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80097e2:	2301      	movs	r3, #1
 80097e4:	e149      	b.n	8009a7a <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d106      	bne.n	8009800 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2200      	movs	r2, #0
 80097f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f7f8 fb08 	bl	8001e10 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2202      	movs	r2, #2
 8009804:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f000 fdc1 	bl	800a390 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	2b01      	cmp	r3, #1
 8009814:	d007      	beq.n	8009826 <HAL_SAI_Init+0x5e>
 8009816:	2b01      	cmp	r3, #1
 8009818:	d302      	bcc.n	8009820 <HAL_SAI_Init+0x58>
 800981a:	2b02      	cmp	r3, #2
 800981c:	d006      	beq.n	800982c <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 800981e:	e008      	b.n	8009832 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 8009820:	2300      	movs	r3, #0
 8009822:	61fb      	str	r3, [r7, #28]
      break;
 8009824:	e005      	b.n	8009832 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8009826:	2310      	movs	r3, #16
 8009828:	61fb      	str	r3, [r7, #28]
      break;
 800982a:	e002      	b.n	8009832 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800982c:	2320      	movs	r3, #32
 800982e:	61fb      	str	r3, [r7, #28]
      break;
 8009830:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	2b03      	cmp	r3, #3
 8009838:	d81d      	bhi.n	8009876 <HAL_SAI_Init+0xae>
 800983a:	a201      	add	r2, pc, #4	; (adr r2, 8009840 <HAL_SAI_Init+0x78>)
 800983c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009840:	08009851 	.word	0x08009851
 8009844:	08009857 	.word	0x08009857
 8009848:	0800985f 	.word	0x0800985f
 800984c:	08009867 	.word	0x08009867
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8009850:	2300      	movs	r3, #0
 8009852:	617b      	str	r3, [r7, #20]
      }
      break;
 8009854:	e010      	b.n	8009878 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8009856:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800985a:	617b      	str	r3, [r7, #20]
      }
      break;
 800985c:	e00c      	b.n	8009878 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800985e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009862:	617b      	str	r3, [r7, #20]
      }
      break;
 8009864:	e008      	b.n	8009878 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8009866:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800986a:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800986c:	69fb      	ldr	r3, [r7, #28]
 800986e:	f043 0301 	orr.w	r3, r3, #1
 8009872:	61fb      	str	r3, [r7, #28]
      }
      break;
 8009874:	e000      	b.n	8009878 <HAL_SAI_Init+0xb0>
  default:
    break;
 8009876:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a81      	ldr	r2, [pc, #516]	; (8009a84 <HAL_SAI_Init+0x2bc>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d004      	beq.n	800988c <HAL_SAI_Init+0xc4>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a80      	ldr	r2, [pc, #512]	; (8009a88 <HAL_SAI_Init+0x2c0>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d103      	bne.n	8009894 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 800988c:	4a7f      	ldr	r2, [pc, #508]	; (8009a8c <HAL_SAI_Init+0x2c4>)
 800988e:	69fb      	ldr	r3, [r7, #28]
 8009890:	6013      	str	r3, [r2, #0]
 8009892:	e002      	b.n	800989a <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8009894:	4a7e      	ldr	r2, [pc, #504]	; (8009a90 <HAL_SAI_Init+0x2c8>)
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	69db      	ldr	r3, [r3, #28]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d043      	beq.n	800992a <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 80098a2:	2300      	movs	r3, #0
 80098a4:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a76      	ldr	r2, [pc, #472]	; (8009a84 <HAL_SAI_Init+0x2bc>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d004      	beq.n	80098ba <HAL_SAI_Init+0xf2>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a74      	ldr	r2, [pc, #464]	; (8009a88 <HAL_SAI_Init+0x2c0>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d104      	bne.n	80098c4 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80098ba:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80098be:	f7ff fded 	bl	800949c <HAL_RCCEx_GetPeriphCLKFreq>
 80098c2:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4a72      	ldr	r2, [pc, #456]	; (8009a94 <HAL_SAI_Init+0x2cc>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d004      	beq.n	80098d8 <HAL_SAI_Init+0x110>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a71      	ldr	r2, [pc, #452]	; (8009a98 <HAL_SAI_Init+0x2d0>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d104      	bne.n	80098e2 <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80098d8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80098dc:	f7ff fdde 	bl	800949c <HAL_RCCEx_GetPeriphCLKFreq>
 80098e0:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80098e2:	693a      	ldr	r2, [r7, #16]
 80098e4:	4613      	mov	r3, r2
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	4413      	add	r3, r2
 80098ea:	005b      	lsls	r3, r3, #1
 80098ec:	461a      	mov	r2, r3
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	69db      	ldr	r3, [r3, #28]
 80098f2:	025b      	lsls	r3, r3, #9
 80098f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80098f8:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	4a67      	ldr	r2, [pc, #412]	; (8009a9c <HAL_SAI_Init+0x2d4>)
 80098fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009902:	08da      	lsrs	r2, r3, #3
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8009908:	68f9      	ldr	r1, [r7, #12]
 800990a:	4b64      	ldr	r3, [pc, #400]	; (8009a9c <HAL_SAI_Init+0x2d4>)
 800990c:	fba3 2301 	umull	r2, r3, r3, r1
 8009910:	08da      	lsrs	r2, r3, #3
 8009912:	4613      	mov	r3, r2
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	4413      	add	r3, r2
 8009918:	005b      	lsls	r3, r3, #1
 800991a:	1aca      	subs	r2, r1, r3
 800991c:	2a08      	cmp	r2, #8
 800991e:	d904      	bls.n	800992a <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6a1b      	ldr	r3, [r3, #32]
 8009924:	1c5a      	adds	r2, r3, #1
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d003      	beq.n	800993a <HAL_SAI_Init+0x172>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	2b02      	cmp	r3, #2
 8009938:	d109      	bne.n	800994e <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800993e:	2b01      	cmp	r3, #1
 8009940:	d101      	bne.n	8009946 <HAL_SAI_Init+0x17e>
 8009942:	2300      	movs	r3, #0
 8009944:	e001      	b.n	800994a <HAL_SAI_Init+0x182>
 8009946:	f44f 7300 	mov.w	r3, #512	; 0x200
 800994a:	61bb      	str	r3, [r7, #24]
 800994c:	e008      	b.n	8009960 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009952:	2b01      	cmp	r3, #1
 8009954:	d102      	bne.n	800995c <HAL_SAI_Init+0x194>
 8009956:	f44f 7300 	mov.w	r3, #512	; 0x200
 800995a:	e000      	b.n	800995e <HAL_SAI_Init+0x196>
 800995c:	2300      	movs	r3, #0
 800995e:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	6819      	ldr	r1, [r3, #0]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681a      	ldr	r2, [r3, #0]
 800996a:	4b4d      	ldr	r3, [pc, #308]	; (8009aa0 <HAL_SAI_Init+0x2d8>)
 800996c:	400b      	ands	r3, r1
 800996e:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	6819      	ldr	r1, [r3, #0]
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	685a      	ldr	r2, [r3, #4]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800997e:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009984:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800998a:	431a      	orrs	r2, r3
 800998c:	69bb      	ldr	r3, [r7, #24]
 800998e:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8009998:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	691b      	ldr	r3, [r3, #16]
 800999e:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80099a4:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6a1b      	ldr	r3, [r3, #32]
 80099aa:	051b      	lsls	r3, r3, #20
 80099ac:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	430a      	orrs	r2, r1
 80099b4:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	6859      	ldr	r1, [r3, #4]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	4b38      	ldr	r3, [pc, #224]	; (8009aa4 <HAL_SAI_Init+0x2dc>)
 80099c2:	400b      	ands	r3, r1
 80099c4:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	6859      	ldr	r1, [r3, #4]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	699a      	ldr	r2, [r3, #24]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d4:	431a      	orrs	r2, r3
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099da:	431a      	orrs	r2, r3
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	430a      	orrs	r2, r1
 80099e2:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	6899      	ldr	r1, [r3, #8]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	4b2e      	ldr	r3, [pc, #184]	; (8009aa8 <HAL_SAI_Init+0x2e0>)
 80099f0:	400b      	ands	r3, r1
 80099f2:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	6899      	ldr	r1, [r3, #8]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099fe:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8009a04:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8009a0a:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8009a10:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a16:	3b01      	subs	r3, #1
 8009a18:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8009a1a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	430a      	orrs	r2, r1
 8009a22:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	68d9      	ldr	r1, [r3, #12]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681a      	ldr	r2, [r3, #0]
 8009a2e:	f24f 0320 	movw	r3, #61472	; 0xf020
 8009a32:	400b      	ands	r3, r1
 8009a34:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	68d9      	ldr	r1, [r3, #12]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a44:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a4a:	041b      	lsls	r3, r3, #16
 8009a4c:	431a      	orrs	r2, r3
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a52:	3b01      	subs	r3, #1
 8009a54:	021b      	lsls	r3, r3, #8
 8009a56:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	430a      	orrs	r2, r1
 8009a5e:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2200      	movs	r2, #0
 8009a64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2200      	movs	r2, #0
 8009a74:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009a78:	2300      	movs	r3, #0
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3720      	adds	r7, #32
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	bf00      	nop
 8009a84:	40015804 	.word	0x40015804
 8009a88:	40015824 	.word	0x40015824
 8009a8c:	40015800 	.word	0x40015800
 8009a90:	40015c00 	.word	0x40015c00
 8009a94:	40015c04 	.word	0x40015c04
 8009a98:	40015c24 	.word	0x40015c24
 8009a9c:	cccccccd 	.word	0xcccccccd
 8009aa0:	ff05c010 	.word	0xff05c010
 8009aa4:	ffff1ff0 	.word	0xffff1ff0
 8009aa8:	fff88000 	.word	0xfff88000

08009aac <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b082      	sub	sp, #8
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d101      	bne.n	8009abe <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 8009aba:	2301      	movs	r3, #1
 8009abc:	e027      	b.n	8009b0e <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2202      	movs	r2, #2
 8009ac2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	2200      	movs	r2, #0
 8009acc:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ad6:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 fc59 	bl	800a390 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	685a      	ldr	r2, [r3, #4]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f042 0208 	orr.w	r2, r2, #8
 8009aec:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f7f8 fa26 	bl	8001f40 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2200      	movs	r2, #0
 8009af8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009b0c:	2300      	movs	r3, #0
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3708      	adds	r7, #8
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}

08009b16 <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 8009b16:	b580      	push	{r7, lr}
 8009b18:	b084      	sub	sp, #16
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d101      	bne.n	8009b30 <HAL_SAI_DMAStop+0x1a>
 8009b2c:	2302      	movs	r3, #2
 8009b2e:	e061      	b.n	8009bf4 <HAL_SAI_DMAStop+0xde>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8009b46:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d01c      	beq.n	8009b8a <HAL_SAI_DMAStop+0x74>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	2b12      	cmp	r3, #18
 8009b5a:	d116      	bne.n	8009b8a <HAL_SAI_DMAStop+0x74>
  {
    if(HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b60:	4618      	mov	r0, r3
 8009b62:	f7fb f9e7 	bl	8004f34 <HAL_DMA_Abort>
 8009b66:	4603      	mov	r3, r0
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d00e      	beq.n	8009b8a <HAL_SAI_DMAStop+0x74>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if(hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b72:	2b80      	cmp	r3, #128	; 0x80
 8009b74:	d009      	beq.n	8009b8a <HAL_SAI_DMAStop+0x74>
      {
        status = HAL_ERROR;
 8009b76:	2301      	movs	r3, #1
 8009b78:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b80:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d01c      	beq.n	8009bcc <HAL_SAI_DMAStop+0xb6>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	2b22      	cmp	r3, #34	; 0x22
 8009b9c:	d116      	bne.n	8009bcc <HAL_SAI_DMAStop+0xb6>
  {
    if(HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f7fb f9c6 	bl	8004f34 <HAL_DMA_Abort>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d00e      	beq.n	8009bcc <HAL_SAI_DMAStop+0xb6>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if(hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bb4:	2b80      	cmp	r3, #128	; 0x80
 8009bb6:	d009      	beq.n	8009bcc <HAL_SAI_DMAStop+0xb6>
      {
        status = HAL_ERROR;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bc2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
  }

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f000 fbdf 	bl	800a390 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	685a      	ldr	r2, [r3, #4]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f042 0208 	orr.w	r2, r2, #8
 8009be0:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2201      	movs	r2, #1
 8009be6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2200      	movs	r2, #0
 8009bee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return status;
 8009bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3710      	adds	r7, #16
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c04:	2300      	movs	r3, #0
 8009c06:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	d101      	bne.n	8009c16 <HAL_SAI_Abort+0x1a>
 8009c12:	2302      	movs	r3, #2
 8009c14:	e072      	b.n	8009cfc <HAL_SAI_Abort+0x100>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2201      	movs	r2, #1
 8009c1a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Check SAI DMA is enabled or not */
  if((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c2c:	d149      	bne.n	8009cc2 <HAL_SAI_Abort+0xc6>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8009c3c:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d01c      	beq.n	8009c80 <HAL_SAI_Abort+0x84>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009c4c:	b2db      	uxtb	r3, r3
 8009c4e:	2b12      	cmp	r3, #18
 8009c50:	d116      	bne.n	8009c80 <HAL_SAI_Abort+0x84>
    {
      if(HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c56:	4618      	mov	r0, r3
 8009c58:	f7fb f96c 	bl	8004f34 <HAL_DMA_Abort>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d00e      	beq.n	8009c80 <HAL_SAI_Abort+0x84>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if(hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c68:	2b80      	cmp	r3, #128	; 0x80
 8009c6a:	d009      	beq.n	8009c80 <HAL_SAI_Abort+0x84>
        {
          status = HAL_ERROR;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c76:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d01c      	beq.n	8009cc2 <HAL_SAI_Abort+0xc6>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009c8e:	b2db      	uxtb	r3, r3
 8009c90:	2b22      	cmp	r3, #34	; 0x22
 8009c92:	d116      	bne.n	8009cc2 <HAL_SAI_Abort+0xc6>
    {
      if(HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f7fb f94b 	bl	8004f34 <HAL_DMA_Abort>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d00e      	beq.n	8009cc2 <HAL_SAI_Abort+0xc6>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if(hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009caa:	2b80      	cmp	r3, #128	; 0x80
 8009cac:	d009      	beq.n	8009cc2 <HAL_SAI_Abort+0xc6>
        {
          status = HAL_ERROR;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009cb8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        }
      }
    }
  }
  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f04f 32ff 	mov.w	r2, #4294967295
 8009cd2:	619a      	str	r2, [r3, #24]

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 fb5b 	bl	800a390 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	685a      	ldr	r2, [r3, #4]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f042 0208 	orr.w	r2, r2, #8
 8009ce8:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2201      	movs	r2, #1
 8009cee:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return status;
 8009cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3710      	adds	r7, #16
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	4613      	mov	r3, r2
 8009d10:	80fb      	strh	r3, [r7, #6]
  if((pData == NULL) || (Size == 0))
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d002      	beq.n	8009d1e <HAL_SAI_Transmit_DMA+0x1a>
 8009d18:	88fb      	ldrh	r3, [r7, #6]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d101      	bne.n	8009d22 <HAL_SAI_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e074      	b.n	8009e0c <HAL_SAI_Transmit_DMA+0x108>
  }

  if(hsai->State == HAL_SAI_STATE_READY)
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009d28:	b2db      	uxtb	r3, r3
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d16d      	bne.n	8009e0a <HAL_SAI_Transmit_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d101      	bne.n	8009d3c <HAL_SAI_Transmit_DMA+0x38>
 8009d38:	2302      	movs	r3, #2
 8009d3a:	e067      	b.n	8009e0c <HAL_SAI_Transmit_DMA+0x108>
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	68ba      	ldr	r2, [r7, #8]
 8009d48:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	88fa      	ldrh	r2, [r7, #6]
 8009d4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	88fa      	ldrh	r2, [r7, #6]
 8009d56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2212      	movs	r2, #18
 8009d66:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d6e:	4a29      	ldr	r2, [pc, #164]	; (8009e14 <HAL_SAI_Transmit_DMA+0x110>)
 8009d70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d76:	4a28      	ldr	r2, [pc, #160]	; (8009e18 <HAL_SAI_Transmit_DMA+0x114>)
 8009d78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d7e:	4a27      	ldr	r2, [pc, #156]	; (8009e1c <HAL_SAI_Transmit_DMA+0x118>)
 8009d80:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d86:	2200      	movs	r2, #0
 8009d88:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d92:	4619      	mov	r1, r3
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	331c      	adds	r3, #28
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009da2:	f7fb f867 	bl	8004e74 <HAL_DMA_Start_IT>
 8009da6:	4603      	mov	r3, r0
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d005      	beq.n	8009db8 <HAL_SAI_Transmit_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2200      	movs	r2, #0
 8009db0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 8009db4:	2301      	movs	r3, #1
 8009db6:	e029      	b.n	8009e0c <HAL_SAI_Transmit_DMA+0x108>
    }

    /* Check if the SAI is already enabled */
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d107      	bne.n	8009dd6 <HAL_SAI_Transmit_DMA+0xd2>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	681a      	ldr	r2, [r3, #0]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009dd4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009dd6:	2100      	movs	r1, #0
 8009dd8:	68f8      	ldr	r0, [r7, #12]
 8009dda:	f000 faa3 	bl	800a324 <SAI_InterruptFlag>
 8009dde:	4601      	mov	r1, r0
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	691a      	ldr	r2, [r3, #16]
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	430a      	orrs	r2, r1
 8009dec:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	681a      	ldr	r2, [r3, #0]
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009dfc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2200      	movs	r2, #0
 8009e02:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009e06:	2300      	movs	r3, #0
 8009e08:	e000      	b.n	8009e0c <HAL_SAI_Transmit_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8009e0a:	2302      	movs	r3, #2
  }
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3710      	adds	r7, #16
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}
 8009e14:	0800a45d 	.word	0x0800a45d
 8009e18:	0800a3fd 	.word	0x0800a3fd
 8009e1c:	0800a479 	.word	0x0800a479

08009e20 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b086      	sub	sp, #24
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  if(hsai->State != HAL_SAI_STATE_RESET)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009e2e:	b2db      	uxtb	r3, r3
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	f000 812b 	beq.w	800a08c <HAL_SAI_IRQHandler+0x26c>
  {
    uint32_t itflags = hsai->Instance->SR;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	695b      	ldr	r3, [r3, #20]
 8009e3c:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	691b      	ldr	r3, [r3, #16]
 8009e44:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred ------------------------------------*/
    if(((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	f003 0308 	and.w	r3, r3, #8
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d009      	beq.n	8009e6c <HAL_SAI_IRQHandler+0x4c>
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	f003 0308 	and.w	r3, r3, #8
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d004      	beq.n	8009e6c <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	4798      	blx	r3
 8009e6a:	e10f      	b.n	800a08c <HAL_SAI_IRQHandler+0x26c>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if(((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	f003 0301 	and.w	r3, r3, #1
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d01e      	beq.n	8009eb4 <HAL_SAI_IRQHandler+0x94>
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	f003 0301 	and.w	r3, r3, #1
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d019      	beq.n	8009eb4 <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	2201      	movs	r2, #1
 8009e86:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	2b22      	cmp	r3, #34	; 0x22
 8009e92:	d101      	bne.n	8009e98 <HAL_SAI_IRQHandler+0x78>
 8009e94:	2301      	movs	r3, #1
 8009e96:	e000      	b.n	8009e9a <HAL_SAI_IRQHandler+0x7a>
 8009e98:	2302      	movs	r3, #2
 8009e9a:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	431a      	orrs	r2, r3
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f7fa fa73 	bl	8004398 <HAL_SAI_ErrorCallback>
 8009eb2:	e0eb      	b.n	800a08c <HAL_SAI_IRQHandler+0x26c>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if(((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	f003 0302 	and.w	r3, r3, #2
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d011      	beq.n	8009ee2 <HAL_SAI_IRQHandler+0xc2>
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	f003 0302 	and.w	r3, r3, #2
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d00c      	beq.n	8009ee2 <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	2202      	movs	r2, #2
 8009ece:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if(hsai->mutecallback != (SAIcallback)NULL)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	f000 80d9 	beq.w	800a08c <HAL_SAI_IRQHandler+0x26c>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ede:	4798      	blx	r3
      if(hsai->mutecallback != (SAIcallback)NULL)
 8009ee0:	e0d4      	b.n	800a08c <HAL_SAI_IRQHandler+0x26c>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if(((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	f003 0320 	and.w	r3, r3, #32
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d035      	beq.n	8009f58 <HAL_SAI_IRQHandler+0x138>
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	f003 0320 	and.w	r3, r3, #32
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d030      	beq.n	8009f58 <HAL_SAI_IRQHandler+0x138>
    {
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009efc:	f043 0204 	orr.w	r2, r3, #4
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* Check SAI DMA is enabled or not */
      if((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d01c      	beq.n	8009f4a <HAL_SAI_IRQHandler+0x12a>
      {
        /* Abort the SAI DMA Streams */
        if(hsai->hdmatx != NULL)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d009      	beq.n	8009f2c <HAL_SAI_IRQHandler+0x10c>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f1c:	4a5d      	ldr	r2, [pc, #372]	; (800a094 <HAL_SAI_IRQHandler+0x274>)
 8009f1e:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmatx);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f24:	4618      	mov	r0, r3
 8009f26:	f7fb f875 	bl	8005014 <HAL_DMA_Abort_IT>
      if((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009f2a:	e0ac      	b.n	800a086 <HAL_SAI_IRQHandler+0x266>
        }
        else if(hsai->hdmarx != NULL)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	f000 80a8 	beq.w	800a086 <HAL_SAI_IRQHandler+0x266>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f3a:	4a56      	ldr	r2, [pc, #344]	; (800a094 <HAL_SAI_IRQHandler+0x274>)
 8009f3c:	651a      	str	r2, [r3, #80]	; 0x50
          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmarx);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7fb f866 	bl	8005014 <HAL_DMA_Abort_IT>
      if((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009f48:	e09d      	b.n	800a086 <HAL_SAI_IRQHandler+0x266>
        }
      }
      else
      {
        /* Abort SAI */
        HAL_SAI_Abort(hsai);
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f7ff fe56 	bl	8009bfc <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f7fa fa21 	bl	8004398 <HAL_SAI_ErrorCallback>
      if((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009f56:	e096      	b.n	800a086 <HAL_SAI_IRQHandler+0x266>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if(((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d034      	beq.n	8009fcc <HAL_SAI_IRQHandler+0x1ac>
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d02f      	beq.n	8009fcc <HAL_SAI_IRQHandler+0x1ac>
    {
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f72:	f043 0208 	orr.w	r2, r3, #8
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Check SAI DMA is enabled or not */
      if((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d01b      	beq.n	8009fbe <HAL_SAI_IRQHandler+0x19e>
      {
        /* Abort the SAI DMA Streams */
        if(hsai->hdmatx != NULL)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d009      	beq.n	8009fa2 <HAL_SAI_IRQHandler+0x182>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f92:	4a40      	ldr	r2, [pc, #256]	; (800a094 <HAL_SAI_IRQHandler+0x274>)
 8009f94:	651a      	str	r2, [r3, #80]	; 0x50
          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmatx);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f7fb f83a 	bl	8005014 <HAL_DMA_Abort_IT>
      if((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009fa0:	e073      	b.n	800a08a <HAL_SAI_IRQHandler+0x26a>
        }
        else if(hsai->hdmarx != NULL)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d06f      	beq.n	800a08a <HAL_SAI_IRQHandler+0x26a>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fae:	4a39      	ldr	r2, [pc, #228]	; (800a094 <HAL_SAI_IRQHandler+0x274>)
 8009fb0:	651a      	str	r2, [r3, #80]	; 0x50
          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmarx);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f7fb f82c 	bl	8005014 <HAL_DMA_Abort_IT>
      if((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009fbc:	e065      	b.n	800a08a <HAL_SAI_IRQHandler+0x26a>
        }
      }
      else
      {
        /* Abort SAI */
        HAL_SAI_Abort(hsai);
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f7ff fe1c 	bl	8009bfc <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f7fa f9e7 	bl	8004398 <HAL_SAI_ErrorCallback>
      if((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8009fca:	e05e      	b.n	800a08a <HAL_SAI_IRQHandler+0x26a>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if(((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	f003 0304 	and.w	r3, r3, #4
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d03d      	beq.n	800a052 <HAL_SAI_IRQHandler+0x232>
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	f003 0304 	and.w	r3, r3, #4
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d038      	beq.n	800a052 <HAL_SAI_IRQHandler+0x232>
    {
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009fe6:	f043 0220 	orr.w	r2, r3, #32
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Abort the SAI DMA Streams */
      if(hsai->hdmatx != NULL)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d009      	beq.n	800a00c <HAL_SAI_IRQHandler+0x1ec>
      {
        /* Set the DMA Tx abort callback */
        hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ffc:	4a25      	ldr	r2, [pc, #148]	; (800a094 <HAL_SAI_IRQHandler+0x274>)
 8009ffe:	651a      	str	r2, [r3, #80]	; 0x50
        /* Abort DMA in IT mode */
        HAL_DMA_Abort_IT(hsai->hdmatx);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a004:	4618      	mov	r0, r3
 800a006:	f7fb f805 	bl	8005014 <HAL_DMA_Abort_IT>
      if(hsai->hdmatx != NULL)
 800a00a:	e03f      	b.n	800a08c <HAL_SAI_IRQHandler+0x26c>
      }
      else if(hsai->hdmarx != NULL)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a010:	2b00      	cmp	r3, #0
 800a012:	d009      	beq.n	800a028 <HAL_SAI_IRQHandler+0x208>
      {
        /* Set the DMA Rx abort callback */
        hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a018:	4a1e      	ldr	r2, [pc, #120]	; (800a094 <HAL_SAI_IRQHandler+0x274>)
 800a01a:	651a      	str	r2, [r3, #80]	; 0x50
        /* Abort DMA in IT mode */
        HAL_DMA_Abort_IT(hsai->hdmarx);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a020:	4618      	mov	r0, r3
 800a022:	f7fa fff7 	bl	8005014 <HAL_DMA_Abort_IT>
      if(hsai->hdmatx != NULL)
 800a026:	e031      	b.n	800a08c <HAL_SAI_IRQHandler+0x26c>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	2200      	movs	r2, #0
 800a02e:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f04f 32ff 	mov.w	r2, #4294967295
 800a038:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2201      	movs	r2, #1
 800a03e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2200      	movs	r2, #0
 800a046:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f7fa f9a4 	bl	8004398 <HAL_SAI_ErrorCallback>
      if(hsai->hdmatx != NULL)
 800a050:	e01c      	b.n	800a08c <HAL_SAI_IRQHandler+0x26c>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if(((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	f003 0310 	and.w	r3, r3, #16
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d017      	beq.n	800a08c <HAL_SAI_IRQHandler+0x26c>
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	f003 0310 	and.w	r3, r3, #16
 800a062:	2b00      	cmp	r3, #0
 800a064:	d012      	beq.n	800a08c <HAL_SAI_IRQHandler+0x26c>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	2210      	movs	r2, #16
 800a06c:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a074:	f043 0210 	orr.w	r2, r3, #16
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f7fa f98a 	bl	8004398 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 800a084:	e002      	b.n	800a08c <HAL_SAI_IRQHandler+0x26c>
      if((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a086:	bf00      	nop
 800a088:	e000      	b.n	800a08c <HAL_SAI_IRQHandler+0x26c>
      if((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800a08a:	bf00      	nop
}
 800a08c:	bf00      	nop
 800a08e:	3718      	adds	r7, #24
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}
 800a094:	0800a4df 	.word	0x0800a4df

0800a098 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(SAI_HandleTypeDef *hsai)
{
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  return hsai->State;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a0a6:	b2db      	uxtb	r3, r3
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	370c      	adds	r7, #12
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr

0800a0b4 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b085      	sub	sp, #20
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	607a      	str	r2, [r7, #4]
 800a0c0:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d003      	beq.n	800a0de <SAI_InitI2S+0x2a>
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	2b02      	cmp	r3, #2
 800a0dc:	d103      	bne.n	800a0e6 <SAI_InitI2S+0x32>
  { /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	63da      	str	r2, [r3, #60]	; 0x3c
 800a0e4:	e002      	b.n	800a0ec <SAI_InitI2S+0x38>
  }
  else
  { /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a0f2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a0fa:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2200      	movs	r2, #0
 800a100:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	683a      	ldr	r2, [r7, #0]
 800a106:	65da      	str	r2, [r3, #92]	; 0x5c

  /* in IS2 the number of slot must be even */
  if((nbslot & 0x1) != 0 )
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	f003 0301 	and.w	r3, r3, #1
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d001      	beq.n	800a116 <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 800a112:	2301      	movs	r3, #1
 800a114:	e07c      	b.n	800a210 <SAI_InitI2S+0x15c>
  }

  switch(protocol)
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d002      	beq.n	800a122 <SAI_InitI2S+0x6e>
 800a11c:	2b02      	cmp	r3, #2
 800a11e:	d810      	bhi.n	800a142 <SAI_InitI2S+0x8e>
 800a120:	e007      	b.n	800a132 <SAI_InitI2S+0x7e>
  {
  case SAI_I2S_STANDARD :
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2200      	movs	r2, #0
 800a126:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a12e:	651a      	str	r2, [r3, #80]	; 0x50
    break;
 800a130:	e009      	b.n	800a146 <SAI_InitI2S+0x92>
  case SAI_I2S_MSBJUSTIFIED :
  case SAI_I2S_LSBJUSTIFIED :
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a138:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	2200      	movs	r2, #0
 800a13e:	651a      	str	r2, [r3, #80]	; 0x50
    break;
 800a140:	e001      	b.n	800a146 <SAI_InitI2S+0x92>
  default :
    return HAL_ERROR;
 800a142:	2301      	movs	r3, #1
 800a144:	e064      	b.n	800a210 <SAI_InitI2S+0x15c>
  }

  /* Frame definition */
  switch(datasize)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2b03      	cmp	r3, #3
 800a14a:	d84f      	bhi.n	800a1ec <SAI_InitI2S+0x138>
 800a14c:	a201      	add	r2, pc, #4	; (adr r2, 800a154 <SAI_InitI2S+0xa0>)
 800a14e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a152:	bf00      	nop
 800a154:	0800a165 	.word	0x0800a165
 800a158:	0800a187 	.word	0x0800a187
 800a15c:	0800a1a9 	.word	0x0800a1a9
 800a160:	0800a1cb 	.word	0x0800a1cb
  {
  case SAI_PROTOCOL_DATASIZE_16BIT:
    hsai->Init.DataSize = SAI_DATASIZE_16;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2280      	movs	r2, #128	; 0x80
 800a168:	635a      	str	r2, [r3, #52]	; 0x34
    hsai->FrameInit.FrameLength = 32*(nbslot/2);
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	085b      	lsrs	r3, r3, #1
 800a16e:	015a      	lsls	r2, r3, #5
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	641a      	str	r2, [r3, #64]	; 0x40
    hsai->FrameInit.ActiveFrameLength = 16*(nbslot/2);
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	085b      	lsrs	r3, r3, #1
 800a178:	011a      	lsls	r2, r3, #4
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	645a      	str	r2, [r3, #68]	; 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2240      	movs	r2, #64	; 0x40
 800a182:	659a      	str	r2, [r3, #88]	; 0x58
    break;
 800a184:	e034      	b.n	800a1f0 <SAI_InitI2S+0x13c>
  case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
    hsai->Init.DataSize = SAI_DATASIZE_16;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2280      	movs	r2, #128	; 0x80
 800a18a:	635a      	str	r2, [r3, #52]	; 0x34
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	085b      	lsrs	r3, r3, #1
 800a190:	019a      	lsls	r2, r3, #6
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	641a      	str	r2, [r3, #64]	; 0x40
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	085b      	lsrs	r3, r3, #1
 800a19a:	015a      	lsls	r2, r3, #5
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	645a      	str	r2, [r3, #68]	; 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2280      	movs	r2, #128	; 0x80
 800a1a4:	659a      	str	r2, [r3, #88]	; 0x58
    break;
 800a1a6:	e023      	b.n	800a1f0 <SAI_InitI2S+0x13c>
  case SAI_PROTOCOL_DATASIZE_24BIT:
    hsai->Init.DataSize = SAI_DATASIZE_24;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	22c0      	movs	r2, #192	; 0xc0
 800a1ac:	635a      	str	r2, [r3, #52]	; 0x34
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	085b      	lsrs	r3, r3, #1
 800a1b2:	019a      	lsls	r2, r3, #6
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	641a      	str	r2, [r3, #64]	; 0x40
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	085b      	lsrs	r3, r3, #1
 800a1bc:	015a      	lsls	r2, r3, #5
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	645a      	str	r2, [r3, #68]	; 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	2280      	movs	r2, #128	; 0x80
 800a1c6:	659a      	str	r2, [r3, #88]	; 0x58
    break;
 800a1c8:	e012      	b.n	800a1f0 <SAI_InitI2S+0x13c>
  case SAI_PROTOCOL_DATASIZE_32BIT:
    hsai->Init.DataSize = SAI_DATASIZE_32;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	22e0      	movs	r2, #224	; 0xe0
 800a1ce:	635a      	str	r2, [r3, #52]	; 0x34
    hsai->FrameInit.FrameLength = 64*(nbslot/2);
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	085b      	lsrs	r3, r3, #1
 800a1d4:	019a      	lsls	r2, r3, #6
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	641a      	str	r2, [r3, #64]	; 0x40
    hsai->FrameInit.ActiveFrameLength = 32*(nbslot/2);
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	085b      	lsrs	r3, r3, #1
 800a1de:	015a      	lsls	r2, r3, #5
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	645a      	str	r2, [r3, #68]	; 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2280      	movs	r2, #128	; 0x80
 800a1e8:	659a      	str	r2, [r3, #88]	; 0x58
    break;
 800a1ea:	e001      	b.n	800a1f0 <SAI_InitI2S+0x13c>
  default :
    return HAL_ERROR;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	e00f      	b.n	800a210 <SAI_InitI2S+0x15c>
  }
  if(protocol == SAI_I2S_LSBJUSTIFIED)
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	2b02      	cmp	r3, #2
 800a1f4:	d10b      	bne.n	800a20e <SAI_InitI2S+0x15a>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d102      	bne.n	800a202 <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2210      	movs	r2, #16
 800a200:	655a      	str	r2, [r3, #84]	; 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2b02      	cmp	r3, #2
 800a206:	d102      	bne.n	800a20e <SAI_InitI2S+0x15a>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2208      	movs	r2, #8
 800a20c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  return HAL_OK;
 800a20e:	2300      	movs	r3, #0
}
 800a210:	4618      	mov	r0, r3
 800a212:	3714      	adds	r7, #20
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr

0800a21c <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b085      	sub	sp, #20
 800a220:	af00      	add	r7, sp, #0
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	607a      	str	r2, [r7, #4]
 800a228:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	2200      	movs	r2, #0
 800a22e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2200      	movs	r2, #0
 800a234:	639a      	str	r2, [r3, #56]	; 0x38
  /* Compute ClockStrobing according AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d003      	beq.n	800a246 <SAI_InitPCM+0x2a>
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	2b02      	cmp	r3, #2
 800a244:	d103      	bne.n	800a24e <SAI_InitPCM+0x32>
  { /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2201      	movs	r2, #1
 800a24a:	63da      	str	r2, [r3, #60]	; 0x3c
 800a24c:	e002      	b.n	800a254 <SAI_InitPCM+0x38>
  }
  else
  { /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2200      	movs	r2, #0
 800a252:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2200      	movs	r2, #0
 800a258:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a260:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a268:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2200      	movs	r2, #0
 800a26e:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	683a      	ldr	r2, [r7, #0]
 800a274:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a27c:	661a      	str	r2, [r3, #96]	; 0x60

  switch(protocol)
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	2b03      	cmp	r3, #3
 800a282:	d005      	beq.n	800a290 <SAI_InitPCM+0x74>
 800a284:	2b04      	cmp	r3, #4
 800a286:	d107      	bne.n	800a298 <SAI_InitPCM+0x7c>
  {
  case SAI_PCM_SHORT :
    hsai->FrameInit.ActiveFrameLength = 1;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2201      	movs	r2, #1
 800a28c:	645a      	str	r2, [r3, #68]	; 0x44
    break;
 800a28e:	e005      	b.n	800a29c <SAI_InitPCM+0x80>
  case SAI_PCM_LONG :
    hsai->FrameInit.ActiveFrameLength = 13;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	220d      	movs	r2, #13
 800a294:	645a      	str	r2, [r3, #68]	; 0x44
    break;
 800a296:	e001      	b.n	800a29c <SAI_InitPCM+0x80>
  default :
    return HAL_ERROR;
 800a298:	2301      	movs	r3, #1
 800a29a:	e03c      	b.n	800a316 <SAI_InitPCM+0xfa>
  }

  switch(datasize)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2b03      	cmp	r3, #3
 800a2a0:	d836      	bhi.n	800a310 <SAI_InitPCM+0xf4>
 800a2a2:	a201      	add	r2, pc, #4	; (adr r2, 800a2a8 <SAI_InitPCM+0x8c>)
 800a2a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2a8:	0800a2b9 	.word	0x0800a2b9
 800a2ac:	0800a2cf 	.word	0x0800a2cf
 800a2b0:	0800a2e5 	.word	0x0800a2e5
 800a2b4:	0800a2fb 	.word	0x0800a2fb
  {
  case SAI_PROTOCOL_DATASIZE_16BIT:
    hsai->Init.DataSize = SAI_DATASIZE_16;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2280      	movs	r2, #128	; 0x80
 800a2bc:	635a      	str	r2, [r3, #52]	; 0x34
    hsai->FrameInit.FrameLength = 16 * nbslot;
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	011a      	lsls	r2, r3, #4
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	641a      	str	r2, [r3, #64]	; 0x40
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	2240      	movs	r2, #64	; 0x40
 800a2ca:	659a      	str	r2, [r3, #88]	; 0x58
    break;
 800a2cc:	e022      	b.n	800a314 <SAI_InitPCM+0xf8>
  case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
    hsai->Init.DataSize = SAI_DATASIZE_16;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2280      	movs	r2, #128	; 0x80
 800a2d2:	635a      	str	r2, [r3, #52]	; 0x34
    hsai->FrameInit.FrameLength = 32 * nbslot;
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	015a      	lsls	r2, r3, #5
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	641a      	str	r2, [r3, #64]	; 0x40
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	2280      	movs	r2, #128	; 0x80
 800a2e0:	659a      	str	r2, [r3, #88]	; 0x58
    break;
 800a2e2:	e017      	b.n	800a314 <SAI_InitPCM+0xf8>
  case SAI_PROTOCOL_DATASIZE_24BIT :
    hsai->Init.DataSize = SAI_DATASIZE_24;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	22c0      	movs	r2, #192	; 0xc0
 800a2e8:	635a      	str	r2, [r3, #52]	; 0x34
    hsai->FrameInit.FrameLength = 32 * nbslot;
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	015a      	lsls	r2, r3, #5
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	641a      	str	r2, [r3, #64]	; 0x40
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2280      	movs	r2, #128	; 0x80
 800a2f6:	659a      	str	r2, [r3, #88]	; 0x58
    break;
 800a2f8:	e00c      	b.n	800a314 <SAI_InitPCM+0xf8>
  case SAI_PROTOCOL_DATASIZE_32BIT:
    hsai->Init.DataSize = SAI_DATASIZE_32;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	22e0      	movs	r2, #224	; 0xe0
 800a2fe:	635a      	str	r2, [r3, #52]	; 0x34
    hsai->FrameInit.FrameLength = 32 * nbslot;
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	015a      	lsls	r2, r3, #5
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	641a      	str	r2, [r3, #64]	; 0x40
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2280      	movs	r2, #128	; 0x80
 800a30c:	659a      	str	r2, [r3, #88]	; 0x58
    break;
 800a30e:	e001      	b.n	800a314 <SAI_InitPCM+0xf8>
  default :
    return HAL_ERROR;
 800a310:	2301      	movs	r3, #1
 800a312:	e000      	b.n	800a316 <SAI_InitPCM+0xfa>
  }

  return HAL_OK;
 800a314:	2300      	movs	r3, #0
}
 800a316:	4618      	mov	r0, r3
 800a318:	3714      	adds	r7, #20
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr
 800a322:	bf00      	nop

0800a324 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800a324:	b480      	push	{r7}
 800a326:	b085      	sub	sp, #20
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800a32e:	2301      	movs	r3, #1
 800a330:	60fb      	str	r3, [r7, #12]

  if(mode == SAI_MODE_IT)
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	2b01      	cmp	r3, #1
 800a336:	d103      	bne.n	800a340 <SAI_InterruptFlag+0x1c>
  {
    tmpIT|= SAI_IT_FREQ;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f043 0308 	orr.w	r3, r3, #8
 800a33e:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a344:	2b08      	cmp	r3, #8
 800a346:	d10b      	bne.n	800a360 <SAI_InterruptFlag+0x3c>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	685b      	ldr	r3, [r3, #4]
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800a34c:	2b03      	cmp	r3, #3
 800a34e:	d003      	beq.n	800a358 <SAI_InterruptFlag+0x34>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	2b01      	cmp	r3, #1
 800a356:	d103      	bne.n	800a360 <SAI_InterruptFlag+0x3c>
  {
    tmpIT|= SAI_IT_CNRDY;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f043 0310 	orr.w	r3, r3, #16
 800a35e:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	2b03      	cmp	r3, #3
 800a366:	d003      	beq.n	800a370 <SAI_InterruptFlag+0x4c>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	2b02      	cmp	r3, #2
 800a36e:	d104      	bne.n	800a37a <SAI_InterruptFlag+0x56>
  {
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a376:	60fb      	str	r3, [r7, #12]
 800a378:	e003      	b.n	800a382 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f043 0304 	orr.w	r3, r3, #4
 800a380:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800a382:	68fb      	ldr	r3, [r7, #12]
}
 800a384:	4618      	mov	r0, r3
 800a386:	3714      	adds	r7, #20
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr

0800a390 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a390:	b490      	push	{r4, r7}
 800a392:	b084      	sub	sp, #16
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 800a398:	4b16      	ldr	r3, [pc, #88]	; (800a3f4 <SAI_Disable+0x64>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4a16      	ldr	r2, [pc, #88]	; (800a3f8 <SAI_Disable+0x68>)
 800a39e:	fba2 2303 	umull	r2, r3, r2, r3
 800a3a2:	0b1b      	lsrs	r3, r3, #12
 800a3a4:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	681a      	ldr	r2, [r3, #0]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a3b8:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800a3ba:	4623      	mov	r3, r4
 800a3bc:	1e5c      	subs	r4, r3, #1
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d10a      	bne.n	800a3d8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800a3d2:	2303      	movs	r3, #3
 800a3d4:	73fb      	strb	r3, [r7, #15]
      break;
 800a3d6:	e006      	b.n	800a3e6 <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d1e9      	bne.n	800a3ba <SAI_Disable+0x2a>

  return status;
 800a3e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3710      	adds	r7, #16
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bc90      	pop	{r4, r7}
 800a3f0:	4770      	bx	lr
 800a3f2:	bf00      	nop
 800a3f4:	20000000 	.word	0x20000000
 800a3f8:	95cbec1b 	.word	0x95cbec1b

0800a3fc <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b084      	sub	sp, #16
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a408:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	69db      	ldr	r3, [r3, #28]
 800a40e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a412:	d01c      	beq.n	800a44e <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2200      	movs	r2, #0
 800a418:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	681a      	ldr	r2, [r3, #0]
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a42a:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800a42c:	2100      	movs	r1, #0
 800a42e:	68f8      	ldr	r0, [r7, #12]
 800a430:	f7ff ff78 	bl	800a324 <SAI_InterruptFlag>
 800a434:	4603      	mov	r3, r0
 800a436:	43d9      	mvns	r1, r3
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	691a      	ldr	r2, [r3, #16]
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	400a      	ands	r2, r1
 800a444:	611a      	str	r2, [r3, #16]

    hsai->State= HAL_SAI_STATE_READY;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2201      	movs	r2, #1
 800a44a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800a44e:	68f8      	ldr	r0, [r7, #12]
 800a450:	f7f9 ff8e 	bl	8004370 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800a454:	bf00      	nop
 800a456:	3710      	adds	r7, #16
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b084      	sub	sp, #16
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a468:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800a46a:	68f8      	ldr	r0, [r7, #12]
 800a46c:	f7f9 ff8a 	bl	8004384 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800a470:	bf00      	nop
 800a472:	3710      	adds	r7, #16
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}

0800a478 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b084      	sub	sp, #16
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a484:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a48c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a49a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d004      	beq.n	800a4aa <SAI_DMAError+0x32>
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4a6:	2b01      	cmp	r3, #1
 800a4a8:	d112      	bne.n	800a4d0 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	681a      	ldr	r2, [r3, #0]
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a4b8:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800a4ba:	68f8      	ldr	r0, [r7, #12]
 800a4bc:	f7ff ff68 	bl	800a390 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800a4d0:	68f8      	ldr	r0, [r7, #12]
 800a4d2:	f7f9 ff61 	bl	8004398 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800a4d6:	bf00      	nop
 800a4d8:	3710      	adds	r7, #16
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}

0800a4de <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a4de:	b580      	push	{r7, lr}
 800a4e0:	b084      	sub	sp, #16
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ea:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a4fa:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	2200      	movs	r2, #0
 800a502:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f04f 32ff 	mov.w	r2, #4294967295
 800a50c:	619a      	str	r2, [r3, #24]

  if(hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a514:	2b20      	cmp	r3, #32
 800a516:	d00a      	beq.n	800a52e <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800a518:	68f8      	ldr	r0, [r7, #12]
 800a51a:	f7ff ff39 	bl	800a390 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	685a      	ldr	r2, [r3, #4]
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f042 0208 	orr.w	r2, r2, #8
 800a52c:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2201      	movs	r2, #1
 800a532:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2200      	movs	r2, #0
 800a53a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800a53e:	68f8      	ldr	r0, [r7, #12]
 800a540:	f7f9 ff2a 	bl	8004398 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800a544:	bf00      	nop
 800a546:	3710      	adds	r7, #16
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b082      	sub	sp, #8
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d101      	bne.n	800a55e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a55a:	2301      	movs	r3, #1
 800a55c:	e040      	b.n	800a5e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a562:	2b00      	cmp	r3, #0
 800a564:	d106      	bne.n	800a574 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2200      	movs	r2, #0
 800a56a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f7f7 fbc8 	bl	8001d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2224      	movs	r2, #36	; 0x24
 800a578:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	681a      	ldr	r2, [r3, #0]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f022 0201 	bic.w	r2, r2, #1
 800a588:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 fac4 	bl	800ab18 <UART_SetConfig>
 800a590:	4603      	mov	r3, r0
 800a592:	2b01      	cmp	r3, #1
 800a594:	d101      	bne.n	800a59a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a596:	2301      	movs	r3, #1
 800a598:	e022      	b.n	800a5e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d002      	beq.n	800a5a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f000 fd62 	bl	800b06c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	685a      	ldr	r2, [r3, #4]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a5b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	689a      	ldr	r2, [r3, #8]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a5c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	681a      	ldr	r2, [r3, #0]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f042 0201 	orr.w	r2, r2, #1
 800a5d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f000 fde9 	bl	800b1b0 <UART_CheckIdleState>
 800a5de:	4603      	mov	r3, r0
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3708      	adds	r7, #8
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b08a      	sub	sp, #40	; 0x28
 800a5ec:	af02      	add	r7, sp, #8
 800a5ee:	60f8      	str	r0, [r7, #12]
 800a5f0:	60b9      	str	r1, [r7, #8]
 800a5f2:	603b      	str	r3, [r7, #0]
 800a5f4:	4613      	mov	r3, r2
 800a5f6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5fc:	2b20      	cmp	r3, #32
 800a5fe:	d17f      	bne.n	800a700 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d002      	beq.n	800a60c <HAL_UART_Transmit+0x24>
 800a606:	88fb      	ldrh	r3, [r7, #6]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d101      	bne.n	800a610 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a60c:	2301      	movs	r3, #1
 800a60e:	e078      	b.n	800a702 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a616:	2b01      	cmp	r3, #1
 800a618:	d101      	bne.n	800a61e <HAL_UART_Transmit+0x36>
 800a61a:	2302      	movs	r3, #2
 800a61c:	e071      	b.n	800a702 <HAL_UART_Transmit+0x11a>
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	2201      	movs	r2, #1
 800a622:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2200      	movs	r2, #0
 800a62a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2221      	movs	r2, #33	; 0x21
 800a630:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800a632:	f7fa f88f 	bl	8004754 <HAL_GetTick>
 800a636:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	88fa      	ldrh	r2, [r7, #6]
 800a63c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	88fa      	ldrh	r2, [r7, #6]
 800a644:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	689b      	ldr	r3, [r3, #8]
 800a64c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a650:	d108      	bne.n	800a664 <HAL_UART_Transmit+0x7c>
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	691b      	ldr	r3, [r3, #16]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d104      	bne.n	800a664 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800a65a:	2300      	movs	r3, #0
 800a65c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	61bb      	str	r3, [r7, #24]
 800a662:	e003      	b.n	800a66c <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a668:	2300      	movs	r3, #0
 800a66a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2200      	movs	r2, #0
 800a670:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800a674:	e02c      	b.n	800a6d0 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	9300      	str	r3, [sp, #0]
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	2200      	movs	r2, #0
 800a67e:	2180      	movs	r1, #128	; 0x80
 800a680:	68f8      	ldr	r0, [r7, #12]
 800a682:	f000 fdda 	bl	800b23a <UART_WaitOnFlagUntilTimeout>
 800a686:	4603      	mov	r3, r0
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d001      	beq.n	800a690 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800a68c:	2303      	movs	r3, #3
 800a68e:	e038      	b.n	800a702 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800a690:	69fb      	ldr	r3, [r7, #28]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d10b      	bne.n	800a6ae <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a696:	69bb      	ldr	r3, [r7, #24]
 800a698:	881b      	ldrh	r3, [r3, #0]
 800a69a:	461a      	mov	r2, r3
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a6a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a6a6:	69bb      	ldr	r3, [r7, #24]
 800a6a8:	3302      	adds	r3, #2
 800a6aa:	61bb      	str	r3, [r7, #24]
 800a6ac:	e007      	b.n	800a6be <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a6ae:	69fb      	ldr	r3, [r7, #28]
 800a6b0:	781a      	ldrb	r2, [r3, #0]
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a6b8:	69fb      	ldr	r3, [r7, #28]
 800a6ba:	3301      	adds	r3, #1
 800a6bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a6c4:	b29b      	uxth	r3, r3
 800a6c6:	3b01      	subs	r3, #1
 800a6c8:	b29a      	uxth	r2, r3
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d1cc      	bne.n	800a676 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	9300      	str	r3, [sp, #0]
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	2140      	movs	r1, #64	; 0x40
 800a6e6:	68f8      	ldr	r0, [r7, #12]
 800a6e8:	f000 fda7 	bl	800b23a <UART_WaitOnFlagUntilTimeout>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d001      	beq.n	800a6f6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a6f2:	2303      	movs	r3, #3
 800a6f4:	e005      	b.n	800a702 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2220      	movs	r2, #32
 800a6fa:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	e000      	b.n	800a702 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800a700:	2302      	movs	r3, #2
  }
}
 800a702:	4618      	mov	r0, r3
 800a704:	3720      	adds	r7, #32
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
	...

0800a70c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b085      	sub	sp, #20
 800a710:	af00      	add	r7, sp, #0
 800a712:	60f8      	str	r0, [r7, #12]
 800a714:	60b9      	str	r1, [r7, #8]
 800a716:	4613      	mov	r3, r2
 800a718:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a71e:	2b20      	cmp	r3, #32
 800a720:	f040 808a 	bne.w	800a838 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d002      	beq.n	800a730 <HAL_UART_Receive_IT+0x24>
 800a72a:	88fb      	ldrh	r3, [r7, #6]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d101      	bne.n	800a734 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a730:	2301      	movs	r3, #1
 800a732:	e082      	b.n	800a83a <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d101      	bne.n	800a742 <HAL_UART_Receive_IT+0x36>
 800a73e:	2302      	movs	r3, #2
 800a740:	e07b      	b.n	800a83a <HAL_UART_Receive_IT+0x12e>
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2201      	movs	r2, #1
 800a746:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	68ba      	ldr	r2, [r7, #8]
 800a74e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	88fa      	ldrh	r2, [r7, #6]
 800a754:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	88fa      	ldrh	r2, [r7, #6]
 800a75c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2200      	movs	r2, #0
 800a764:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	689b      	ldr	r3, [r3, #8]
 800a76a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a76e:	d10e      	bne.n	800a78e <HAL_UART_Receive_IT+0x82>
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	691b      	ldr	r3, [r3, #16]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d105      	bne.n	800a784 <HAL_UART_Receive_IT+0x78>
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a77e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a782:	e02d      	b.n	800a7e0 <HAL_UART_Receive_IT+0xd4>
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	22ff      	movs	r2, #255	; 0xff
 800a788:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a78c:	e028      	b.n	800a7e0 <HAL_UART_Receive_IT+0xd4>
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	689b      	ldr	r3, [r3, #8]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d10d      	bne.n	800a7b2 <HAL_UART_Receive_IT+0xa6>
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	691b      	ldr	r3, [r3, #16]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d104      	bne.n	800a7a8 <HAL_UART_Receive_IT+0x9c>
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	22ff      	movs	r2, #255	; 0xff
 800a7a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a7a6:	e01b      	b.n	800a7e0 <HAL_UART_Receive_IT+0xd4>
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	227f      	movs	r2, #127	; 0x7f
 800a7ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a7b0:	e016      	b.n	800a7e0 <HAL_UART_Receive_IT+0xd4>
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	689b      	ldr	r3, [r3, #8]
 800a7b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a7ba:	d10d      	bne.n	800a7d8 <HAL_UART_Receive_IT+0xcc>
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	691b      	ldr	r3, [r3, #16]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d104      	bne.n	800a7ce <HAL_UART_Receive_IT+0xc2>
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	227f      	movs	r2, #127	; 0x7f
 800a7c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a7cc:	e008      	b.n	800a7e0 <HAL_UART_Receive_IT+0xd4>
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	223f      	movs	r2, #63	; 0x3f
 800a7d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a7d6:	e003      	b.n	800a7e0 <HAL_UART_Receive_IT+0xd4>
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	2222      	movs	r2, #34	; 0x22
 800a7ea:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	689a      	ldr	r2, [r3, #8]
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f042 0201 	orr.w	r2, r2, #1
 800a7fa:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	689b      	ldr	r3, [r3, #8]
 800a800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a804:	d107      	bne.n	800a816 <HAL_UART_Receive_IT+0x10a>
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	691b      	ldr	r3, [r3, #16]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d103      	bne.n	800a816 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	4a0d      	ldr	r2, [pc, #52]	; (800a848 <HAL_UART_Receive_IT+0x13c>)
 800a812:	661a      	str	r2, [r3, #96]	; 0x60
 800a814:	e002      	b.n	800a81c <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	4a0c      	ldr	r2, [pc, #48]	; (800a84c <HAL_UART_Receive_IT+0x140>)
 800a81a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2200      	movs	r2, #0
 800a820:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800a832:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800a834:	2300      	movs	r3, #0
 800a836:	e000      	b.n	800a83a <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800a838:	2302      	movs	r3, #2
  }
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3714      	adds	r7, #20
 800a83e:	46bd      	mov	sp, r7
 800a840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a844:	4770      	bx	lr
 800a846:	bf00      	nop
 800a848:	0800b475 	.word	0x0800b475
 800a84c:	0800b3cf 	.word	0x0800b3cf

0800a850 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b088      	sub	sp, #32
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	69db      	ldr	r3, [r3, #28]
 800a85e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	689b      	ldr	r3, [r3, #8]
 800a86e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a870:	69fa      	ldr	r2, [r7, #28]
 800a872:	f640 030f 	movw	r3, #2063	; 0x80f
 800a876:	4013      	ands	r3, r2
 800a878:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d113      	bne.n	800a8a8 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a880:	69fb      	ldr	r3, [r7, #28]
 800a882:	f003 0320 	and.w	r3, r3, #32
 800a886:	2b00      	cmp	r3, #0
 800a888:	d00e      	beq.n	800a8a8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a88a:	69bb      	ldr	r3, [r7, #24]
 800a88c:	f003 0320 	and.w	r3, r3, #32
 800a890:	2b00      	cmp	r3, #0
 800a892:	d009      	beq.n	800a8a8 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a898:	2b00      	cmp	r3, #0
 800a89a:	f000 8114 	beq.w	800aac6 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	4798      	blx	r3
      }
      return;
 800a8a6:	e10e      	b.n	800aac6 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	f000 80d6 	beq.w	800aa5c <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	f003 0301 	and.w	r3, r3, #1
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d105      	bne.n	800a8c6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800a8ba:	69bb      	ldr	r3, [r7, #24]
 800a8bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	f000 80cb 	beq.w	800aa5c <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a8c6:	69fb      	ldr	r3, [r7, #28]
 800a8c8:	f003 0301 	and.w	r3, r3, #1
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d00e      	beq.n	800a8ee <HAL_UART_IRQHandler+0x9e>
 800a8d0:	69bb      	ldr	r3, [r7, #24]
 800a8d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d009      	beq.n	800a8ee <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8e6:	f043 0201 	orr.w	r2, r3, #1
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a8ee:	69fb      	ldr	r3, [r7, #28]
 800a8f0:	f003 0302 	and.w	r3, r3, #2
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d00e      	beq.n	800a916 <HAL_UART_IRQHandler+0xc6>
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	f003 0301 	and.w	r3, r3, #1
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d009      	beq.n	800a916 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	2202      	movs	r2, #2
 800a908:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a90e:	f043 0204 	orr.w	r2, r3, #4
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a916:	69fb      	ldr	r3, [r7, #28]
 800a918:	f003 0304 	and.w	r3, r3, #4
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d00e      	beq.n	800a93e <HAL_UART_IRQHandler+0xee>
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	f003 0301 	and.w	r3, r3, #1
 800a926:	2b00      	cmp	r3, #0
 800a928:	d009      	beq.n	800a93e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	2204      	movs	r2, #4
 800a930:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a936:	f043 0202 	orr.w	r2, r3, #2
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a93e:	69fb      	ldr	r3, [r7, #28]
 800a940:	f003 0308 	and.w	r3, r3, #8
 800a944:	2b00      	cmp	r3, #0
 800a946:	d013      	beq.n	800a970 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a948:	69bb      	ldr	r3, [r7, #24]
 800a94a:	f003 0320 	and.w	r3, r3, #32
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d104      	bne.n	800a95c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d009      	beq.n	800a970 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	2208      	movs	r2, #8
 800a962:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a968:	f043 0208 	orr.w	r2, r3, #8
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a970:	69fb      	ldr	r3, [r7, #28]
 800a972:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a976:	2b00      	cmp	r3, #0
 800a978:	d00f      	beq.n	800a99a <HAL_UART_IRQHandler+0x14a>
 800a97a:	69bb      	ldr	r3, [r7, #24]
 800a97c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a980:	2b00      	cmp	r3, #0
 800a982:	d00a      	beq.n	800a99a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a98c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a992:	f043 0220 	orr.w	r2, r3, #32
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	f000 8093 	beq.w	800aaca <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a9a4:	69fb      	ldr	r3, [r7, #28]
 800a9a6:	f003 0320 	and.w	r3, r3, #32
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d00c      	beq.n	800a9c8 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a9ae:	69bb      	ldr	r3, [r7, #24]
 800a9b0:	f003 0320 	and.w	r3, r3, #32
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d007      	beq.n	800a9c8 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d003      	beq.n	800a9c8 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9cc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	689b      	ldr	r3, [r3, #8]
 800a9d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9d8:	2b40      	cmp	r3, #64	; 0x40
 800a9da:	d004      	beq.n	800a9e6 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d031      	beq.n	800aa4a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f000 fca2 	bl	800b330 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	689b      	ldr	r3, [r3, #8]
 800a9f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9f6:	2b40      	cmp	r3, #64	; 0x40
 800a9f8:	d123      	bne.n	800aa42 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	689a      	ldr	r2, [r3, #8]
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa08:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d013      	beq.n	800aa3a <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa16:	4a30      	ldr	r2, [pc, #192]	; (800aad8 <HAL_UART_IRQHandler+0x288>)
 800aa18:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f7fa faf8 	bl	8005014 <HAL_DMA_Abort_IT>
 800aa24:	4603      	mov	r3, r0
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d016      	beq.n	800aa58 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa30:	687a      	ldr	r2, [r7, #4]
 800aa32:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800aa34:	4610      	mov	r0, r2
 800aa36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa38:	e00e      	b.n	800aa58 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f000 f858 	bl	800aaf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa40:	e00a      	b.n	800aa58 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 f854 	bl	800aaf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa48:	e006      	b.n	800aa58 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f000 f850 	bl	800aaf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2200      	movs	r2, #0
 800aa54:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800aa56:	e038      	b.n	800aaca <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa58:	bf00      	nop
    return;
 800aa5a:	e036      	b.n	800aaca <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800aa5c:	69fb      	ldr	r3, [r7, #28]
 800aa5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d00d      	beq.n	800aa82 <HAL_UART_IRQHandler+0x232>
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d008      	beq.n	800aa82 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800aa78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f000 f842 	bl	800ab04 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aa80:	e026      	b.n	800aad0 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800aa82:	69fb      	ldr	r3, [r7, #28]
 800aa84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d00d      	beq.n	800aaa8 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800aa8c:	69bb      	ldr	r3, [r7, #24]
 800aa8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d008      	beq.n	800aaa8 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d017      	beq.n	800aace <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	4798      	blx	r3
    }
    return;
 800aaa6:	e012      	b.n	800aace <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800aaa8:	69fb      	ldr	r3, [r7, #28]
 800aaaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d00e      	beq.n	800aad0 <HAL_UART_IRQHandler+0x280>
 800aab2:	69bb      	ldr	r3, [r7, #24]
 800aab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d009      	beq.n	800aad0 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f000 fc6d 	bl	800b39c <UART_EndTransmit_IT>
    return;
 800aac2:	bf00      	nop
 800aac4:	e004      	b.n	800aad0 <HAL_UART_IRQHandler+0x280>
      return;
 800aac6:	bf00      	nop
 800aac8:	e002      	b.n	800aad0 <HAL_UART_IRQHandler+0x280>
    return;
 800aaca:	bf00      	nop
 800aacc:	e000      	b.n	800aad0 <HAL_UART_IRQHandler+0x280>
    return;
 800aace:	bf00      	nop
  }

}
 800aad0:	3720      	adds	r7, #32
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}
 800aad6:	bf00      	nop
 800aad8:	0800b371 	.word	0x0800b371

0800aadc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aadc:	b480      	push	{r7}
 800aade:	b083      	sub	sp, #12
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800aae4:	bf00      	nop
 800aae6:	370c      	adds	r7, #12
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr

0800aaf0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b083      	sub	sp, #12
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800aaf8:	bf00      	nop
 800aafa:	370c      	adds	r7, #12
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr

0800ab04 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ab04:	b480      	push	{r7}
 800ab06:	b083      	sub	sp, #12
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ab0c:	bf00      	nop
 800ab0e:	370c      	adds	r7, #12
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr

0800ab18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b088      	sub	sp, #32
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800ab20:	2300      	movs	r3, #0
 800ab22:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800ab24:	2300      	movs	r3, #0
 800ab26:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	689a      	ldr	r2, [r3, #8]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	691b      	ldr	r3, [r3, #16]
 800ab30:	431a      	orrs	r2, r3
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	695b      	ldr	r3, [r3, #20]
 800ab36:	431a      	orrs	r2, r3
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	69db      	ldr	r3, [r3, #28]
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	681a      	ldr	r2, [r3, #0]
 800ab46:	4bb1      	ldr	r3, [pc, #708]	; (800ae0c <UART_SetConfig+0x2f4>)
 800ab48:	4013      	ands	r3, r2
 800ab4a:	687a      	ldr	r2, [r7, #4]
 800ab4c:	6812      	ldr	r2, [r2, #0]
 800ab4e:	6939      	ldr	r1, [r7, #16]
 800ab50:	430b      	orrs	r3, r1
 800ab52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	68da      	ldr	r2, [r3, #12]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	430a      	orrs	r2, r1
 800ab68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	699b      	ldr	r3, [r3, #24]
 800ab6e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6a1b      	ldr	r3, [r3, #32]
 800ab74:	693a      	ldr	r2, [r7, #16]
 800ab76:	4313      	orrs	r3, r2
 800ab78:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	689b      	ldr	r3, [r3, #8]
 800ab80:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	693a      	ldr	r2, [r7, #16]
 800ab8a:	430a      	orrs	r2, r1
 800ab8c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	4a9f      	ldr	r2, [pc, #636]	; (800ae10 <UART_SetConfig+0x2f8>)
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d121      	bne.n	800abdc <UART_SetConfig+0xc4>
 800ab98:	4b9e      	ldr	r3, [pc, #632]	; (800ae14 <UART_SetConfig+0x2fc>)
 800ab9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab9e:	f003 0303 	and.w	r3, r3, #3
 800aba2:	2b03      	cmp	r3, #3
 800aba4:	d816      	bhi.n	800abd4 <UART_SetConfig+0xbc>
 800aba6:	a201      	add	r2, pc, #4	; (adr r2, 800abac <UART_SetConfig+0x94>)
 800aba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abac:	0800abbd 	.word	0x0800abbd
 800abb0:	0800abc9 	.word	0x0800abc9
 800abb4:	0800abc3 	.word	0x0800abc3
 800abb8:	0800abcf 	.word	0x0800abcf
 800abbc:	2301      	movs	r3, #1
 800abbe:	77fb      	strb	r3, [r7, #31]
 800abc0:	e151      	b.n	800ae66 <UART_SetConfig+0x34e>
 800abc2:	2302      	movs	r3, #2
 800abc4:	77fb      	strb	r3, [r7, #31]
 800abc6:	e14e      	b.n	800ae66 <UART_SetConfig+0x34e>
 800abc8:	2304      	movs	r3, #4
 800abca:	77fb      	strb	r3, [r7, #31]
 800abcc:	e14b      	b.n	800ae66 <UART_SetConfig+0x34e>
 800abce:	2308      	movs	r3, #8
 800abd0:	77fb      	strb	r3, [r7, #31]
 800abd2:	e148      	b.n	800ae66 <UART_SetConfig+0x34e>
 800abd4:	2310      	movs	r3, #16
 800abd6:	77fb      	strb	r3, [r7, #31]
 800abd8:	bf00      	nop
 800abda:	e144      	b.n	800ae66 <UART_SetConfig+0x34e>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4a8d      	ldr	r2, [pc, #564]	; (800ae18 <UART_SetConfig+0x300>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d134      	bne.n	800ac50 <UART_SetConfig+0x138>
 800abe6:	4b8b      	ldr	r3, [pc, #556]	; (800ae14 <UART_SetConfig+0x2fc>)
 800abe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abec:	f003 030c 	and.w	r3, r3, #12
 800abf0:	2b0c      	cmp	r3, #12
 800abf2:	d829      	bhi.n	800ac48 <UART_SetConfig+0x130>
 800abf4:	a201      	add	r2, pc, #4	; (adr r2, 800abfc <UART_SetConfig+0xe4>)
 800abf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abfa:	bf00      	nop
 800abfc:	0800ac31 	.word	0x0800ac31
 800ac00:	0800ac49 	.word	0x0800ac49
 800ac04:	0800ac49 	.word	0x0800ac49
 800ac08:	0800ac49 	.word	0x0800ac49
 800ac0c:	0800ac3d 	.word	0x0800ac3d
 800ac10:	0800ac49 	.word	0x0800ac49
 800ac14:	0800ac49 	.word	0x0800ac49
 800ac18:	0800ac49 	.word	0x0800ac49
 800ac1c:	0800ac37 	.word	0x0800ac37
 800ac20:	0800ac49 	.word	0x0800ac49
 800ac24:	0800ac49 	.word	0x0800ac49
 800ac28:	0800ac49 	.word	0x0800ac49
 800ac2c:	0800ac43 	.word	0x0800ac43
 800ac30:	2300      	movs	r3, #0
 800ac32:	77fb      	strb	r3, [r7, #31]
 800ac34:	e117      	b.n	800ae66 <UART_SetConfig+0x34e>
 800ac36:	2302      	movs	r3, #2
 800ac38:	77fb      	strb	r3, [r7, #31]
 800ac3a:	e114      	b.n	800ae66 <UART_SetConfig+0x34e>
 800ac3c:	2304      	movs	r3, #4
 800ac3e:	77fb      	strb	r3, [r7, #31]
 800ac40:	e111      	b.n	800ae66 <UART_SetConfig+0x34e>
 800ac42:	2308      	movs	r3, #8
 800ac44:	77fb      	strb	r3, [r7, #31]
 800ac46:	e10e      	b.n	800ae66 <UART_SetConfig+0x34e>
 800ac48:	2310      	movs	r3, #16
 800ac4a:	77fb      	strb	r3, [r7, #31]
 800ac4c:	bf00      	nop
 800ac4e:	e10a      	b.n	800ae66 <UART_SetConfig+0x34e>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4a71      	ldr	r2, [pc, #452]	; (800ae1c <UART_SetConfig+0x304>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d120      	bne.n	800ac9c <UART_SetConfig+0x184>
 800ac5a:	4b6e      	ldr	r3, [pc, #440]	; (800ae14 <UART_SetConfig+0x2fc>)
 800ac5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac60:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ac64:	2b10      	cmp	r3, #16
 800ac66:	d00f      	beq.n	800ac88 <UART_SetConfig+0x170>
 800ac68:	2b10      	cmp	r3, #16
 800ac6a:	d802      	bhi.n	800ac72 <UART_SetConfig+0x15a>
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d005      	beq.n	800ac7c <UART_SetConfig+0x164>
 800ac70:	e010      	b.n	800ac94 <UART_SetConfig+0x17c>
 800ac72:	2b20      	cmp	r3, #32
 800ac74:	d005      	beq.n	800ac82 <UART_SetConfig+0x16a>
 800ac76:	2b30      	cmp	r3, #48	; 0x30
 800ac78:	d009      	beq.n	800ac8e <UART_SetConfig+0x176>
 800ac7a:	e00b      	b.n	800ac94 <UART_SetConfig+0x17c>
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	77fb      	strb	r3, [r7, #31]
 800ac80:	e0f1      	b.n	800ae66 <UART_SetConfig+0x34e>
 800ac82:	2302      	movs	r3, #2
 800ac84:	77fb      	strb	r3, [r7, #31]
 800ac86:	e0ee      	b.n	800ae66 <UART_SetConfig+0x34e>
 800ac88:	2304      	movs	r3, #4
 800ac8a:	77fb      	strb	r3, [r7, #31]
 800ac8c:	e0eb      	b.n	800ae66 <UART_SetConfig+0x34e>
 800ac8e:	2308      	movs	r3, #8
 800ac90:	77fb      	strb	r3, [r7, #31]
 800ac92:	e0e8      	b.n	800ae66 <UART_SetConfig+0x34e>
 800ac94:	2310      	movs	r3, #16
 800ac96:	77fb      	strb	r3, [r7, #31]
 800ac98:	bf00      	nop
 800ac9a:	e0e4      	b.n	800ae66 <UART_SetConfig+0x34e>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4a5f      	ldr	r2, [pc, #380]	; (800ae20 <UART_SetConfig+0x308>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d120      	bne.n	800ace8 <UART_SetConfig+0x1d0>
 800aca6:	4b5b      	ldr	r3, [pc, #364]	; (800ae14 <UART_SetConfig+0x2fc>)
 800aca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800acb0:	2b40      	cmp	r3, #64	; 0x40
 800acb2:	d00f      	beq.n	800acd4 <UART_SetConfig+0x1bc>
 800acb4:	2b40      	cmp	r3, #64	; 0x40
 800acb6:	d802      	bhi.n	800acbe <UART_SetConfig+0x1a6>
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d005      	beq.n	800acc8 <UART_SetConfig+0x1b0>
 800acbc:	e010      	b.n	800ace0 <UART_SetConfig+0x1c8>
 800acbe:	2b80      	cmp	r3, #128	; 0x80
 800acc0:	d005      	beq.n	800acce <UART_SetConfig+0x1b6>
 800acc2:	2bc0      	cmp	r3, #192	; 0xc0
 800acc4:	d009      	beq.n	800acda <UART_SetConfig+0x1c2>
 800acc6:	e00b      	b.n	800ace0 <UART_SetConfig+0x1c8>
 800acc8:	2300      	movs	r3, #0
 800acca:	77fb      	strb	r3, [r7, #31]
 800accc:	e0cb      	b.n	800ae66 <UART_SetConfig+0x34e>
 800acce:	2302      	movs	r3, #2
 800acd0:	77fb      	strb	r3, [r7, #31]
 800acd2:	e0c8      	b.n	800ae66 <UART_SetConfig+0x34e>
 800acd4:	2304      	movs	r3, #4
 800acd6:	77fb      	strb	r3, [r7, #31]
 800acd8:	e0c5      	b.n	800ae66 <UART_SetConfig+0x34e>
 800acda:	2308      	movs	r3, #8
 800acdc:	77fb      	strb	r3, [r7, #31]
 800acde:	e0c2      	b.n	800ae66 <UART_SetConfig+0x34e>
 800ace0:	2310      	movs	r3, #16
 800ace2:	77fb      	strb	r3, [r7, #31]
 800ace4:	bf00      	nop
 800ace6:	e0be      	b.n	800ae66 <UART_SetConfig+0x34e>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4a4d      	ldr	r2, [pc, #308]	; (800ae24 <UART_SetConfig+0x30c>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d124      	bne.n	800ad3c <UART_SetConfig+0x224>
 800acf2:	4b48      	ldr	r3, [pc, #288]	; (800ae14 <UART_SetConfig+0x2fc>)
 800acf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800acfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad00:	d012      	beq.n	800ad28 <UART_SetConfig+0x210>
 800ad02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad06:	d802      	bhi.n	800ad0e <UART_SetConfig+0x1f6>
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d007      	beq.n	800ad1c <UART_SetConfig+0x204>
 800ad0c:	e012      	b.n	800ad34 <UART_SetConfig+0x21c>
 800ad0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad12:	d006      	beq.n	800ad22 <UART_SetConfig+0x20a>
 800ad14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad18:	d009      	beq.n	800ad2e <UART_SetConfig+0x216>
 800ad1a:	e00b      	b.n	800ad34 <UART_SetConfig+0x21c>
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	77fb      	strb	r3, [r7, #31]
 800ad20:	e0a1      	b.n	800ae66 <UART_SetConfig+0x34e>
 800ad22:	2302      	movs	r3, #2
 800ad24:	77fb      	strb	r3, [r7, #31]
 800ad26:	e09e      	b.n	800ae66 <UART_SetConfig+0x34e>
 800ad28:	2304      	movs	r3, #4
 800ad2a:	77fb      	strb	r3, [r7, #31]
 800ad2c:	e09b      	b.n	800ae66 <UART_SetConfig+0x34e>
 800ad2e:	2308      	movs	r3, #8
 800ad30:	77fb      	strb	r3, [r7, #31]
 800ad32:	e098      	b.n	800ae66 <UART_SetConfig+0x34e>
 800ad34:	2310      	movs	r3, #16
 800ad36:	77fb      	strb	r3, [r7, #31]
 800ad38:	bf00      	nop
 800ad3a:	e094      	b.n	800ae66 <UART_SetConfig+0x34e>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4a39      	ldr	r2, [pc, #228]	; (800ae28 <UART_SetConfig+0x310>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d124      	bne.n	800ad90 <UART_SetConfig+0x278>
 800ad46:	4b33      	ldr	r3, [pc, #204]	; (800ae14 <UART_SetConfig+0x2fc>)
 800ad48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ad50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad54:	d012      	beq.n	800ad7c <UART_SetConfig+0x264>
 800ad56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad5a:	d802      	bhi.n	800ad62 <UART_SetConfig+0x24a>
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d007      	beq.n	800ad70 <UART_SetConfig+0x258>
 800ad60:	e012      	b.n	800ad88 <UART_SetConfig+0x270>
 800ad62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad66:	d006      	beq.n	800ad76 <UART_SetConfig+0x25e>
 800ad68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ad6c:	d009      	beq.n	800ad82 <UART_SetConfig+0x26a>
 800ad6e:	e00b      	b.n	800ad88 <UART_SetConfig+0x270>
 800ad70:	2301      	movs	r3, #1
 800ad72:	77fb      	strb	r3, [r7, #31]
 800ad74:	e077      	b.n	800ae66 <UART_SetConfig+0x34e>
 800ad76:	2302      	movs	r3, #2
 800ad78:	77fb      	strb	r3, [r7, #31]
 800ad7a:	e074      	b.n	800ae66 <UART_SetConfig+0x34e>
 800ad7c:	2304      	movs	r3, #4
 800ad7e:	77fb      	strb	r3, [r7, #31]
 800ad80:	e071      	b.n	800ae66 <UART_SetConfig+0x34e>
 800ad82:	2308      	movs	r3, #8
 800ad84:	77fb      	strb	r3, [r7, #31]
 800ad86:	e06e      	b.n	800ae66 <UART_SetConfig+0x34e>
 800ad88:	2310      	movs	r3, #16
 800ad8a:	77fb      	strb	r3, [r7, #31]
 800ad8c:	bf00      	nop
 800ad8e:	e06a      	b.n	800ae66 <UART_SetConfig+0x34e>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4a25      	ldr	r2, [pc, #148]	; (800ae2c <UART_SetConfig+0x314>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d124      	bne.n	800ade4 <UART_SetConfig+0x2cc>
 800ad9a:	4b1e      	ldr	r3, [pc, #120]	; (800ae14 <UART_SetConfig+0x2fc>)
 800ad9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ada0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ada4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ada8:	d012      	beq.n	800add0 <UART_SetConfig+0x2b8>
 800adaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adae:	d802      	bhi.n	800adb6 <UART_SetConfig+0x29e>
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d007      	beq.n	800adc4 <UART_SetConfig+0x2ac>
 800adb4:	e012      	b.n	800addc <UART_SetConfig+0x2c4>
 800adb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800adba:	d006      	beq.n	800adca <UART_SetConfig+0x2b2>
 800adbc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800adc0:	d009      	beq.n	800add6 <UART_SetConfig+0x2be>
 800adc2:	e00b      	b.n	800addc <UART_SetConfig+0x2c4>
 800adc4:	2300      	movs	r3, #0
 800adc6:	77fb      	strb	r3, [r7, #31]
 800adc8:	e04d      	b.n	800ae66 <UART_SetConfig+0x34e>
 800adca:	2302      	movs	r3, #2
 800adcc:	77fb      	strb	r3, [r7, #31]
 800adce:	e04a      	b.n	800ae66 <UART_SetConfig+0x34e>
 800add0:	2304      	movs	r3, #4
 800add2:	77fb      	strb	r3, [r7, #31]
 800add4:	e047      	b.n	800ae66 <UART_SetConfig+0x34e>
 800add6:	2308      	movs	r3, #8
 800add8:	77fb      	strb	r3, [r7, #31]
 800adda:	e044      	b.n	800ae66 <UART_SetConfig+0x34e>
 800addc:	2310      	movs	r3, #16
 800adde:	77fb      	strb	r3, [r7, #31]
 800ade0:	bf00      	nop
 800ade2:	e040      	b.n	800ae66 <UART_SetConfig+0x34e>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	4a11      	ldr	r2, [pc, #68]	; (800ae30 <UART_SetConfig+0x318>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d139      	bne.n	800ae62 <UART_SetConfig+0x34a>
 800adee:	4b09      	ldr	r3, [pc, #36]	; (800ae14 <UART_SetConfig+0x2fc>)
 800adf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adf4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800adf8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800adfc:	d027      	beq.n	800ae4e <UART_SetConfig+0x336>
 800adfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae02:	d817      	bhi.n	800ae34 <UART_SetConfig+0x31c>
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d01c      	beq.n	800ae42 <UART_SetConfig+0x32a>
 800ae08:	e027      	b.n	800ae5a <UART_SetConfig+0x342>
 800ae0a:	bf00      	nop
 800ae0c:	efff69f3 	.word	0xefff69f3
 800ae10:	40011000 	.word	0x40011000
 800ae14:	40023800 	.word	0x40023800
 800ae18:	40004400 	.word	0x40004400
 800ae1c:	40004800 	.word	0x40004800
 800ae20:	40004c00 	.word	0x40004c00
 800ae24:	40005000 	.word	0x40005000
 800ae28:	40011400 	.word	0x40011400
 800ae2c:	40007800 	.word	0x40007800
 800ae30:	40007c00 	.word	0x40007c00
 800ae34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae38:	d006      	beq.n	800ae48 <UART_SetConfig+0x330>
 800ae3a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ae3e:	d009      	beq.n	800ae54 <UART_SetConfig+0x33c>
 800ae40:	e00b      	b.n	800ae5a <UART_SetConfig+0x342>
 800ae42:	2300      	movs	r3, #0
 800ae44:	77fb      	strb	r3, [r7, #31]
 800ae46:	e00e      	b.n	800ae66 <UART_SetConfig+0x34e>
 800ae48:	2302      	movs	r3, #2
 800ae4a:	77fb      	strb	r3, [r7, #31]
 800ae4c:	e00b      	b.n	800ae66 <UART_SetConfig+0x34e>
 800ae4e:	2304      	movs	r3, #4
 800ae50:	77fb      	strb	r3, [r7, #31]
 800ae52:	e008      	b.n	800ae66 <UART_SetConfig+0x34e>
 800ae54:	2308      	movs	r3, #8
 800ae56:	77fb      	strb	r3, [r7, #31]
 800ae58:	e005      	b.n	800ae66 <UART_SetConfig+0x34e>
 800ae5a:	2310      	movs	r3, #16
 800ae5c:	77fb      	strb	r3, [r7, #31]
 800ae5e:	bf00      	nop
 800ae60:	e001      	b.n	800ae66 <UART_SetConfig+0x34e>
 800ae62:	2310      	movs	r3, #16
 800ae64:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	69db      	ldr	r3, [r3, #28]
 800ae6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae6e:	d17f      	bne.n	800af70 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800ae70:	7ffb      	ldrb	r3, [r7, #31]
 800ae72:	2b08      	cmp	r3, #8
 800ae74:	d85c      	bhi.n	800af30 <UART_SetConfig+0x418>
 800ae76:	a201      	add	r2, pc, #4	; (adr r2, 800ae7c <UART_SetConfig+0x364>)
 800ae78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae7c:	0800aea1 	.word	0x0800aea1
 800ae80:	0800aec1 	.word	0x0800aec1
 800ae84:	0800aee1 	.word	0x0800aee1
 800ae88:	0800af31 	.word	0x0800af31
 800ae8c:	0800aef9 	.word	0x0800aef9
 800ae90:	0800af31 	.word	0x0800af31
 800ae94:	0800af31 	.word	0x0800af31
 800ae98:	0800af31 	.word	0x0800af31
 800ae9c:	0800af19 	.word	0x0800af19
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aea0:	f7fd fd8a 	bl	80089b8 <HAL_RCC_GetPCLK1Freq>
 800aea4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	005a      	lsls	r2, r3, #1
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	685b      	ldr	r3, [r3, #4]
 800aeae:	085b      	lsrs	r3, r3, #1
 800aeb0:	441a      	add	r2, r3
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800aeba:	b29b      	uxth	r3, r3
 800aebc:	61bb      	str	r3, [r7, #24]
        break;
 800aebe:	e03a      	b.n	800af36 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aec0:	f7fd fd8e 	bl	80089e0 <HAL_RCC_GetPCLK2Freq>
 800aec4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	005a      	lsls	r2, r3, #1
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	685b      	ldr	r3, [r3, #4]
 800aece:	085b      	lsrs	r3, r3, #1
 800aed0:	441a      	add	r2, r3
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	fbb2 f3f3 	udiv	r3, r2, r3
 800aeda:	b29b      	uxth	r3, r3
 800aedc:	61bb      	str	r3, [r7, #24]
        break;
 800aede:	e02a      	b.n	800af36 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	685b      	ldr	r3, [r3, #4]
 800aee4:	085a      	lsrs	r2, r3, #1
 800aee6:	4b5f      	ldr	r3, [pc, #380]	; (800b064 <UART_SetConfig+0x54c>)
 800aee8:	4413      	add	r3, r2
 800aeea:	687a      	ldr	r2, [r7, #4]
 800aeec:	6852      	ldr	r2, [r2, #4]
 800aeee:	fbb3 f3f2 	udiv	r3, r3, r2
 800aef2:	b29b      	uxth	r3, r3
 800aef4:	61bb      	str	r3, [r7, #24]
        break;
 800aef6:	e01e      	b.n	800af36 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aef8:	f7fd fca0 	bl	800883c <HAL_RCC_GetSysClockFreq>
 800aefc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	005a      	lsls	r2, r3, #1
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	685b      	ldr	r3, [r3, #4]
 800af06:	085b      	lsrs	r3, r3, #1
 800af08:	441a      	add	r2, r3
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	685b      	ldr	r3, [r3, #4]
 800af0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800af12:	b29b      	uxth	r3, r3
 800af14:	61bb      	str	r3, [r7, #24]
        break;
 800af16:	e00e      	b.n	800af36 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	685b      	ldr	r3, [r3, #4]
 800af1c:	085b      	lsrs	r3, r3, #1
 800af1e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	685b      	ldr	r3, [r3, #4]
 800af26:	fbb2 f3f3 	udiv	r3, r2, r3
 800af2a:	b29b      	uxth	r3, r3
 800af2c:	61bb      	str	r3, [r7, #24]
        break;
 800af2e:	e002      	b.n	800af36 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800af30:	2301      	movs	r3, #1
 800af32:	75fb      	strb	r3, [r7, #23]
        break;
 800af34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af36:	69bb      	ldr	r3, [r7, #24]
 800af38:	2b0f      	cmp	r3, #15
 800af3a:	d916      	bls.n	800af6a <UART_SetConfig+0x452>
 800af3c:	69bb      	ldr	r3, [r7, #24]
 800af3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af42:	d212      	bcs.n	800af6a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800af44:	69bb      	ldr	r3, [r7, #24]
 800af46:	b29b      	uxth	r3, r3
 800af48:	f023 030f 	bic.w	r3, r3, #15
 800af4c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800af4e:	69bb      	ldr	r3, [r7, #24]
 800af50:	085b      	lsrs	r3, r3, #1
 800af52:	b29b      	uxth	r3, r3
 800af54:	f003 0307 	and.w	r3, r3, #7
 800af58:	b29a      	uxth	r2, r3
 800af5a:	897b      	ldrh	r3, [r7, #10]
 800af5c:	4313      	orrs	r3, r2
 800af5e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	897a      	ldrh	r2, [r7, #10]
 800af66:	60da      	str	r2, [r3, #12]
 800af68:	e070      	b.n	800b04c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800af6a:	2301      	movs	r3, #1
 800af6c:	75fb      	strb	r3, [r7, #23]
 800af6e:	e06d      	b.n	800b04c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800af70:	7ffb      	ldrb	r3, [r7, #31]
 800af72:	2b08      	cmp	r3, #8
 800af74:	d859      	bhi.n	800b02a <UART_SetConfig+0x512>
 800af76:	a201      	add	r2, pc, #4	; (adr r2, 800af7c <UART_SetConfig+0x464>)
 800af78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af7c:	0800afa1 	.word	0x0800afa1
 800af80:	0800afbf 	.word	0x0800afbf
 800af84:	0800afdd 	.word	0x0800afdd
 800af88:	0800b02b 	.word	0x0800b02b
 800af8c:	0800aff5 	.word	0x0800aff5
 800af90:	0800b02b 	.word	0x0800b02b
 800af94:	0800b02b 	.word	0x0800b02b
 800af98:	0800b02b 	.word	0x0800b02b
 800af9c:	0800b013 	.word	0x0800b013
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800afa0:	f7fd fd0a 	bl	80089b8 <HAL_RCC_GetPCLK1Freq>
 800afa4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	685b      	ldr	r3, [r3, #4]
 800afaa:	085a      	lsrs	r2, r3, #1
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	441a      	add	r2, r3
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	685b      	ldr	r3, [r3, #4]
 800afb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800afb8:	b29b      	uxth	r3, r3
 800afba:	61bb      	str	r3, [r7, #24]
        break;
 800afbc:	e038      	b.n	800b030 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800afbe:	f7fd fd0f 	bl	80089e0 <HAL_RCC_GetPCLK2Freq>
 800afc2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	085a      	lsrs	r2, r3, #1
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	441a      	add	r2, r3
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	685b      	ldr	r3, [r3, #4]
 800afd2:	fbb2 f3f3 	udiv	r3, r2, r3
 800afd6:	b29b      	uxth	r3, r3
 800afd8:	61bb      	str	r3, [r7, #24]
        break;
 800afda:	e029      	b.n	800b030 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	085a      	lsrs	r2, r3, #1
 800afe2:	4b21      	ldr	r3, [pc, #132]	; (800b068 <UART_SetConfig+0x550>)
 800afe4:	4413      	add	r3, r2
 800afe6:	687a      	ldr	r2, [r7, #4]
 800afe8:	6852      	ldr	r2, [r2, #4]
 800afea:	fbb3 f3f2 	udiv	r3, r3, r2
 800afee:	b29b      	uxth	r3, r3
 800aff0:	61bb      	str	r3, [r7, #24]
        break;
 800aff2:	e01d      	b.n	800b030 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aff4:	f7fd fc22 	bl	800883c <HAL_RCC_GetSysClockFreq>
 800aff8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	685b      	ldr	r3, [r3, #4]
 800affe:	085a      	lsrs	r2, r3, #1
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	441a      	add	r2, r3
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	fbb2 f3f3 	udiv	r3, r2, r3
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	61bb      	str	r3, [r7, #24]
        break;
 800b010:	e00e      	b.n	800b030 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	685b      	ldr	r3, [r3, #4]
 800b016:	085b      	lsrs	r3, r3, #1
 800b018:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	685b      	ldr	r3, [r3, #4]
 800b020:	fbb2 f3f3 	udiv	r3, r2, r3
 800b024:	b29b      	uxth	r3, r3
 800b026:	61bb      	str	r3, [r7, #24]
        break;
 800b028:	e002      	b.n	800b030 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800b02a:	2301      	movs	r3, #1
 800b02c:	75fb      	strb	r3, [r7, #23]
        break;
 800b02e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b030:	69bb      	ldr	r3, [r7, #24]
 800b032:	2b0f      	cmp	r3, #15
 800b034:	d908      	bls.n	800b048 <UART_SetConfig+0x530>
 800b036:	69bb      	ldr	r3, [r7, #24]
 800b038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b03c:	d204      	bcs.n	800b048 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	69ba      	ldr	r2, [r7, #24]
 800b044:	60da      	str	r2, [r3, #12]
 800b046:	e001      	b.n	800b04c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b048:	2301      	movs	r3, #1
 800b04a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2200      	movs	r2, #0
 800b050:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2200      	movs	r2, #0
 800b056:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800b058:	7dfb      	ldrb	r3, [r7, #23]
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3720      	adds	r7, #32
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}
 800b062:	bf00      	nop
 800b064:	01e84800 	.word	0x01e84800
 800b068:	00f42400 	.word	0x00f42400

0800b06c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b083      	sub	sp, #12
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b078:	f003 0301 	and.w	r3, r3, #1
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d00a      	beq.n	800b096 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	430a      	orrs	r2, r1
 800b094:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b09a:	f003 0302 	and.w	r3, r3, #2
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d00a      	beq.n	800b0b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	430a      	orrs	r2, r1
 800b0b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0bc:	f003 0304 	and.w	r3, r3, #4
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d00a      	beq.n	800b0da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	430a      	orrs	r2, r1
 800b0d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0de:	f003 0308 	and.w	r3, r3, #8
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d00a      	beq.n	800b0fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	430a      	orrs	r2, r1
 800b0fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b100:	f003 0310 	and.w	r3, r3, #16
 800b104:	2b00      	cmp	r3, #0
 800b106:	d00a      	beq.n	800b11e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	689b      	ldr	r3, [r3, #8]
 800b10e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	430a      	orrs	r2, r1
 800b11c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b122:	f003 0320 	and.w	r3, r3, #32
 800b126:	2b00      	cmp	r3, #0
 800b128:	d00a      	beq.n	800b140 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	689b      	ldr	r3, [r3, #8]
 800b130:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	430a      	orrs	r2, r1
 800b13e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d01a      	beq.n	800b182 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	430a      	orrs	r2, r1
 800b160:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b166:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b16a:	d10a      	bne.n	800b182 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	430a      	orrs	r2, r1
 800b180:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d00a      	beq.n	800b1a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	430a      	orrs	r2, r1
 800b1a2:	605a      	str	r2, [r3, #4]
  }
}
 800b1a4:	bf00      	nop
 800b1a6:	370c      	adds	r7, #12
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr

0800b1b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b086      	sub	sp, #24
 800b1b4:	af02      	add	r7, sp, #8
 800b1b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b1be:	f7f9 fac9 	bl	8004754 <HAL_GetTick>
 800b1c2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f003 0308 	and.w	r3, r3, #8
 800b1ce:	2b08      	cmp	r3, #8
 800b1d0:	d10e      	bne.n	800b1f0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b1d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b1d6:	9300      	str	r3, [sp, #0]
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f000 f82a 	bl	800b23a <UART_WaitOnFlagUntilTimeout>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d001      	beq.n	800b1f0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b1ec:	2303      	movs	r3, #3
 800b1ee:	e020      	b.n	800b232 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f003 0304 	and.w	r3, r3, #4
 800b1fa:	2b04      	cmp	r3, #4
 800b1fc:	d10e      	bne.n	800b21c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b1fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b202:	9300      	str	r3, [sp, #0]
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	2200      	movs	r2, #0
 800b208:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f000 f814 	bl	800b23a <UART_WaitOnFlagUntilTimeout>
 800b212:	4603      	mov	r3, r0
 800b214:	2b00      	cmp	r3, #0
 800b216:	d001      	beq.n	800b21c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b218:	2303      	movs	r3, #3
 800b21a:	e00a      	b.n	800b232 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2220      	movs	r2, #32
 800b220:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2220      	movs	r2, #32
 800b226:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2200      	movs	r2, #0
 800b22c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800b230:	2300      	movs	r3, #0
}
 800b232:	4618      	mov	r0, r3
 800b234:	3710      	adds	r7, #16
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}

0800b23a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b23a:	b580      	push	{r7, lr}
 800b23c:	b084      	sub	sp, #16
 800b23e:	af00      	add	r7, sp, #0
 800b240:	60f8      	str	r0, [r7, #12]
 800b242:	60b9      	str	r1, [r7, #8]
 800b244:	603b      	str	r3, [r7, #0]
 800b246:	4613      	mov	r3, r2
 800b248:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b24a:	e05d      	b.n	800b308 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b24c:	69bb      	ldr	r3, [r7, #24]
 800b24e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b252:	d059      	beq.n	800b308 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b254:	f7f9 fa7e 	bl	8004754 <HAL_GetTick>
 800b258:	4602      	mov	r2, r0
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	1ad3      	subs	r3, r2, r3
 800b25e:	69ba      	ldr	r2, [r7, #24]
 800b260:	429a      	cmp	r2, r3
 800b262:	d302      	bcc.n	800b26a <UART_WaitOnFlagUntilTimeout+0x30>
 800b264:	69bb      	ldr	r3, [r7, #24]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d11b      	bne.n	800b2a2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	681a      	ldr	r2, [r3, #0]
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b278:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	689a      	ldr	r2, [r3, #8]
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f022 0201 	bic.w	r2, r2, #1
 800b288:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	2220      	movs	r2, #32
 800b28e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	2220      	movs	r2, #32
 800b294:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	2200      	movs	r2, #0
 800b29a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800b29e:	2303      	movs	r3, #3
 800b2a0:	e042      	b.n	800b328 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f003 0304 	and.w	r3, r3, #4
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d02b      	beq.n	800b308 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	69db      	ldr	r3, [r3, #28]
 800b2b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b2ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2be:	d123      	bne.n	800b308 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b2c8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	681a      	ldr	r2, [r3, #0]
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b2d8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	689a      	ldr	r2, [r3, #8]
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	f022 0201 	bic.w	r2, r2, #1
 800b2e8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	2220      	movs	r2, #32
 800b2ee:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	2220      	movs	r2, #32
 800b2f4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	2220      	movs	r2, #32
 800b2fa:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	2200      	movs	r2, #0
 800b300:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800b304:	2303      	movs	r3, #3
 800b306:	e00f      	b.n	800b328 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	69da      	ldr	r2, [r3, #28]
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	4013      	ands	r3, r2
 800b312:	68ba      	ldr	r2, [r7, #8]
 800b314:	429a      	cmp	r2, r3
 800b316:	bf0c      	ite	eq
 800b318:	2301      	moveq	r3, #1
 800b31a:	2300      	movne	r3, #0
 800b31c:	b2db      	uxtb	r3, r3
 800b31e:	461a      	mov	r2, r3
 800b320:	79fb      	ldrb	r3, [r7, #7]
 800b322:	429a      	cmp	r2, r3
 800b324:	d092      	beq.n	800b24c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b326:	2300      	movs	r3, #0
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3710      	adds	r7, #16
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b330:	b480      	push	{r7}
 800b332:	b083      	sub	sp, #12
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	681a      	ldr	r2, [r3, #0]
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b346:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	689a      	ldr	r2, [r3, #8]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f022 0201 	bic.w	r2, r2, #1
 800b356:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2220      	movs	r2, #32
 800b35c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2200      	movs	r2, #0
 800b362:	661a      	str	r2, [r3, #96]	; 0x60
}
 800b364:	bf00      	nop
 800b366:	370c      	adds	r7, #12
 800b368:	46bd      	mov	sp, r7
 800b36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36e:	4770      	bx	lr

0800b370 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b084      	sub	sp, #16
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b37c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2200      	movs	r2, #0
 800b382:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2200      	movs	r2, #0
 800b38a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b38e:	68f8      	ldr	r0, [r7, #12]
 800b390:	f7ff fbae 	bl	800aaf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b394:	bf00      	nop
 800b396:	3710      	adds	r7, #16
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}

0800b39c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b082      	sub	sp, #8
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	681a      	ldr	r2, [r3, #0]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b3b2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2220      	movs	r2, #32
 800b3b8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f7ff fb8b 	bl	800aadc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3c6:	bf00      	nop
 800b3c8:	3708      	adds	r7, #8
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}

0800b3ce <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b3ce:	b580      	push	{r7, lr}
 800b3d0:	b084      	sub	sp, #16
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b3dc:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b3e2:	2b22      	cmp	r3, #34	; 0x22
 800b3e4:	d13a      	bne.n	800b45c <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ec:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b3ee:	89bb      	ldrh	r3, [r7, #12]
 800b3f0:	b2d9      	uxtb	r1, r3
 800b3f2:	89fb      	ldrh	r3, [r7, #14]
 800b3f4:	b2da      	uxtb	r2, r3
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3fa:	400a      	ands	r2, r1
 800b3fc:	b2d2      	uxtb	r2, r2
 800b3fe:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b404:	1c5a      	adds	r2, r3, #1
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b410:	b29b      	uxth	r3, r3
 800b412:	3b01      	subs	r3, #1
 800b414:	b29a      	uxth	r2, r3
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b422:	b29b      	uxth	r3, r3
 800b424:	2b00      	cmp	r3, #0
 800b426:	d121      	bne.n	800b46c <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	681a      	ldr	r2, [r3, #0]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b436:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	689a      	ldr	r2, [r3, #8]
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f022 0201 	bic.w	r2, r2, #1
 800b446:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2220      	movs	r2, #32
 800b44c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2200      	movs	r2, #0
 800b452:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f7f5 ff33 	bl	80012c0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b45a:	e007      	b.n	800b46c <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	699a      	ldr	r2, [r3, #24]
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f042 0208 	orr.w	r2, r2, #8
 800b46a:	619a      	str	r2, [r3, #24]
}
 800b46c:	bf00      	nop
 800b46e:	3710      	adds	r7, #16
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}

0800b474 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b482:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b488:	2b22      	cmp	r3, #34	; 0x22
 800b48a:	d13a      	bne.n	800b502 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b492:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b498:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800b49a:	89ba      	ldrh	r2, [r7, #12]
 800b49c:	89fb      	ldrh	r3, [r7, #14]
 800b49e:	4013      	ands	r3, r2
 800b4a0:	b29a      	uxth	r2, r3
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4aa:	1c9a      	adds	r2, r3, #2
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b4b6:	b29b      	uxth	r3, r3
 800b4b8:	3b01      	subs	r3, #1
 800b4ba:	b29a      	uxth	r2, r3
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b4c8:	b29b      	uxth	r3, r3
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d121      	bne.n	800b512 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	681a      	ldr	r2, [r3, #0]
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b4dc:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	689a      	ldr	r2, [r3, #8]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f022 0201 	bic.w	r2, r2, #1
 800b4ec:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2220      	movs	r2, #32
 800b4f2:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f7f5 fee0 	bl	80012c0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b500:	e007      	b.n	800b512 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	699a      	ldr	r2, [r3, #24]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f042 0208 	orr.w	r2, r2, #8
 800b510:	619a      	str	r2, [r3, #24]
}
 800b512:	bf00      	nop
 800b514:	3710      	adds	r7, #16
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}
	...

0800b51c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b51c:	b084      	sub	sp, #16
 800b51e:	b580      	push	{r7, lr}
 800b520:	b084      	sub	sp, #16
 800b522:	af00      	add	r7, sp, #0
 800b524:	6078      	str	r0, [r7, #4]
 800b526:	f107 001c 	add.w	r0, r7, #28
 800b52a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b530:	2b01      	cmp	r3, #1
 800b532:	d120      	bne.n	800b576 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b538:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	68da      	ldr	r2, [r3, #12]
 800b544:	4b20      	ldr	r3, [pc, #128]	; (800b5c8 <USB_CoreInit+0xac>)
 800b546:	4013      	ands	r3, r2
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	68db      	ldr	r3, [r3, #12]
 800b550:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b55a:	2b01      	cmp	r3, #1
 800b55c:	d105      	bne.n	800b56a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	68db      	ldr	r3, [r3, #12]
 800b562:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 f942 	bl	800b7f4 <USB_CoreReset>
 800b570:	4603      	mov	r3, r0
 800b572:	73fb      	strb	r3, [r7, #15]
 800b574:	e010      	b.n	800b598 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	68db      	ldr	r3, [r3, #12]
 800b57a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f000 f936 	bl	800b7f4 <USB_CoreReset>
 800b588:	4603      	mov	r3, r0
 800b58a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b590:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800b598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	d10b      	bne.n	800b5b6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	689b      	ldr	r3, [r3, #8]
 800b5a2:	f043 0206 	orr.w	r2, r3, #6
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	689b      	ldr	r3, [r3, #8]
 800b5ae:	f043 0220 	orr.w	r2, r3, #32
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b5b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3710      	adds	r7, #16
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b5c2:	b004      	add	sp, #16
 800b5c4:	4770      	bx	lr
 800b5c6:	bf00      	nop
 800b5c8:	ffbdffbf 	.word	0xffbdffbf

0800b5cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b083      	sub	sp, #12
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	689b      	ldr	r3, [r3, #8]
 800b5d8:	f043 0201 	orr.w	r2, r3, #1
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b5e0:	2300      	movs	r3, #0
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	370c      	adds	r7, #12
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ec:	4770      	bx	lr

0800b5ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b5ee:	b480      	push	{r7}
 800b5f0:	b083      	sub	sp, #12
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	689b      	ldr	r3, [r3, #8]
 800b5fa:	f023 0201 	bic.w	r2, r3, #1
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b602:	2300      	movs	r3, #0
}
 800b604:	4618      	mov	r0, r3
 800b606:	370c      	adds	r7, #12
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr

0800b610 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	460b      	mov	r3, r1
 800b61a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	68db      	ldr	r3, [r3, #12]
 800b620:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b628:	78fb      	ldrb	r3, [r7, #3]
 800b62a:	2b01      	cmp	r3, #1
 800b62c:	d106      	bne.n	800b63c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	68db      	ldr	r3, [r3, #12]
 800b632:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	60da      	str	r2, [r3, #12]
 800b63a:	e00b      	b.n	800b654 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b63c:	78fb      	ldrb	r3, [r7, #3]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d106      	bne.n	800b650 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	68db      	ldr	r3, [r3, #12]
 800b646:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	60da      	str	r2, [r3, #12]
 800b64e:	e001      	b.n	800b654 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b650:	2301      	movs	r3, #1
 800b652:	e003      	b.n	800b65c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b654:	2032      	movs	r0, #50	; 0x32
 800b656:	f7f9 f889 	bl	800476c <HAL_Delay>

  return HAL_OK;
 800b65a:	2300      	movs	r3, #0
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3708      	adds	r7, #8
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}

0800b664 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b664:	b480      	push	{r7}
 800b666:	b085      	sub	sp, #20
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b66e:	2300      	movs	r3, #0
 800b670:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	019b      	lsls	r3, r3, #6
 800b676:	f043 0220 	orr.w	r2, r3, #32
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	3301      	adds	r3, #1
 800b682:	60fb      	str	r3, [r7, #12]
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	4a09      	ldr	r2, [pc, #36]	; (800b6ac <USB_FlushTxFifo+0x48>)
 800b688:	4293      	cmp	r3, r2
 800b68a:	d901      	bls.n	800b690 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b68c:	2303      	movs	r3, #3
 800b68e:	e006      	b.n	800b69e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	691b      	ldr	r3, [r3, #16]
 800b694:	f003 0320 	and.w	r3, r3, #32
 800b698:	2b20      	cmp	r3, #32
 800b69a:	d0f0      	beq.n	800b67e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b69c:	2300      	movs	r3, #0
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3714      	adds	r7, #20
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a8:	4770      	bx	lr
 800b6aa:	bf00      	nop
 800b6ac:	00030d40 	.word	0x00030d40

0800b6b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b085      	sub	sp, #20
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2210      	movs	r2, #16
 800b6c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	3301      	adds	r3, #1
 800b6c6:	60fb      	str	r3, [r7, #12]
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	4a09      	ldr	r2, [pc, #36]	; (800b6f0 <USB_FlushRxFifo+0x40>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d901      	bls.n	800b6d4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b6d0:	2303      	movs	r3, #3
 800b6d2:	e006      	b.n	800b6e2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	691b      	ldr	r3, [r3, #16]
 800b6d8:	f003 0310 	and.w	r3, r3, #16
 800b6dc:	2b10      	cmp	r3, #16
 800b6de:	d0f0      	beq.n	800b6c2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b6e0:	2300      	movs	r3, #0
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3714      	adds	r7, #20
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr
 800b6ee:	bf00      	nop
 800b6f0:	00030d40 	.word	0x00030d40

0800b6f4 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b089      	sub	sp, #36	; 0x24
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	4611      	mov	r1, r2
 800b700:	461a      	mov	r2, r3
 800b702:	460b      	mov	r3, r1
 800b704:	71fb      	strb	r3, [r7, #7]
 800b706:	4613      	mov	r3, r2
 800b708:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800b712:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b716:	2b00      	cmp	r3, #0
 800b718:	d11a      	bne.n	800b750 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b71a:	88bb      	ldrh	r3, [r7, #4]
 800b71c:	3303      	adds	r3, #3
 800b71e:	089b      	lsrs	r3, r3, #2
 800b720:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b722:	2300      	movs	r3, #0
 800b724:	61bb      	str	r3, [r7, #24]
 800b726:	e00f      	b.n	800b748 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b728:	79fb      	ldrb	r3, [r7, #7]
 800b72a:	031a      	lsls	r2, r3, #12
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	4413      	add	r3, r2
 800b730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b734:	461a      	mov	r2, r3
 800b736:	69fb      	ldr	r3, [r7, #28]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b73c:	69fb      	ldr	r3, [r7, #28]
 800b73e:	3304      	adds	r3, #4
 800b740:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b742:	69bb      	ldr	r3, [r7, #24]
 800b744:	3301      	adds	r3, #1
 800b746:	61bb      	str	r3, [r7, #24]
 800b748:	69ba      	ldr	r2, [r7, #24]
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d3eb      	bcc.n	800b728 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b750:	2300      	movs	r3, #0
}
 800b752:	4618      	mov	r0, r3
 800b754:	3724      	adds	r7, #36	; 0x24
 800b756:	46bd      	mov	sp, r7
 800b758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75c:	4770      	bx	lr

0800b75e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b75e:	b480      	push	{r7}
 800b760:	b089      	sub	sp, #36	; 0x24
 800b762:	af00      	add	r7, sp, #0
 800b764:	60f8      	str	r0, [r7, #12]
 800b766:	60b9      	str	r1, [r7, #8]
 800b768:	4613      	mov	r3, r2
 800b76a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b774:	88fb      	ldrh	r3, [r7, #6]
 800b776:	3303      	adds	r3, #3
 800b778:	089b      	lsrs	r3, r3, #2
 800b77a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b77c:	2300      	movs	r3, #0
 800b77e:	61bb      	str	r3, [r7, #24]
 800b780:	e00b      	b.n	800b79a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b788:	681a      	ldr	r2, [r3, #0]
 800b78a:	69fb      	ldr	r3, [r7, #28]
 800b78c:	601a      	str	r2, [r3, #0]
    pDest++;
 800b78e:	69fb      	ldr	r3, [r7, #28]
 800b790:	3304      	adds	r3, #4
 800b792:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b794:	69bb      	ldr	r3, [r7, #24]
 800b796:	3301      	adds	r3, #1
 800b798:	61bb      	str	r3, [r7, #24]
 800b79a:	69ba      	ldr	r2, [r7, #24]
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	d3ef      	bcc.n	800b782 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b7a2:	69fb      	ldr	r3, [r7, #28]
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3724      	adds	r7, #36	; 0x24
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr

0800b7b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b085      	sub	sp, #20
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	695b      	ldr	r3, [r3, #20]
 800b7bc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	699b      	ldr	r3, [r3, #24]
 800b7c2:	68fa      	ldr	r2, [r7, #12]
 800b7c4:	4013      	ands	r3, r2
 800b7c6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3714      	adds	r7, #20
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d4:	4770      	bx	lr

0800b7d6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b7d6:	b480      	push	{r7}
 800b7d8:	b083      	sub	sp, #12
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	695b      	ldr	r3, [r3, #20]
 800b7e2:	f003 0301 	and.w	r3, r3, #1
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	370c      	adds	r7, #12
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr
	...

0800b7f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b085      	sub	sp, #20
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	3301      	adds	r3, #1
 800b804:	60fb      	str	r3, [r7, #12]
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	4a13      	ldr	r2, [pc, #76]	; (800b858 <USB_CoreReset+0x64>)
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d901      	bls.n	800b812 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b80e:	2303      	movs	r3, #3
 800b810:	e01b      	b.n	800b84a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	691b      	ldr	r3, [r3, #16]
 800b816:	2b00      	cmp	r3, #0
 800b818:	daf2      	bge.n	800b800 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b81a:	2300      	movs	r3, #0
 800b81c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	691b      	ldr	r3, [r3, #16]
 800b822:	f043 0201 	orr.w	r2, r3, #1
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	3301      	adds	r3, #1
 800b82e:	60fb      	str	r3, [r7, #12]
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	4a09      	ldr	r2, [pc, #36]	; (800b858 <USB_CoreReset+0x64>)
 800b834:	4293      	cmp	r3, r2
 800b836:	d901      	bls.n	800b83c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b838:	2303      	movs	r3, #3
 800b83a:	e006      	b.n	800b84a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	691b      	ldr	r3, [r3, #16]
 800b840:	f003 0301 	and.w	r3, r3, #1
 800b844:	2b01      	cmp	r3, #1
 800b846:	d0f0      	beq.n	800b82a <USB_CoreReset+0x36>

  return HAL_OK;
 800b848:	2300      	movs	r3, #0
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3714      	adds	r7, #20
 800b84e:	46bd      	mov	sp, r7
 800b850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b854:	4770      	bx	lr
 800b856:	bf00      	nop
 800b858:	00030d40 	.word	0x00030d40

0800b85c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b85c:	b084      	sub	sp, #16
 800b85e:	b580      	push	{r7, lr}
 800b860:	b084      	sub	sp, #16
 800b862:	af00      	add	r7, sp, #0
 800b864:	6078      	str	r0, [r7, #4]
 800b866:	f107 001c 	add.w	r0, r7, #28
 800b86a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b878:	461a      	mov	r2, r3
 800b87a:	2300      	movs	r3, #0
 800b87c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b882:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b88e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b892:	2b00      	cmp	r3, #0
 800b894:	d018      	beq.n	800b8c8 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800b896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b898:	2b01      	cmp	r3, #1
 800b89a:	d10a      	bne.n	800b8b2 <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	68ba      	ldr	r2, [r7, #8]
 800b8a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b8aa:	f043 0304 	orr.w	r3, r3, #4
 800b8ae:	6013      	str	r3, [r2, #0]
 800b8b0:	e014      	b.n	800b8dc <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	68ba      	ldr	r2, [r7, #8]
 800b8bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b8c0:	f023 0304 	bic.w	r3, r3, #4
 800b8c4:	6013      	str	r3, [r2, #0]
 800b8c6:	e009      	b.n	800b8dc <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	68ba      	ldr	r2, [r7, #8]
 800b8d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b8d6:	f023 0304 	bic.w	r3, r3, #4
 800b8da:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800b8dc:	2110      	movs	r1, #16
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f7ff fec0 	bl	800b664 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f7ff fee3 	bl	800b6b0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	60fb      	str	r3, [r7, #12]
 800b8ee:	e015      	b.n	800b91c <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	015a      	lsls	r2, r3, #5
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	4413      	add	r3, r2
 800b8f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b8fc:	461a      	mov	r2, r3
 800b8fe:	f04f 33ff 	mov.w	r3, #4294967295
 800b902:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	015a      	lsls	r2, r3, #5
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	4413      	add	r3, r2
 800b90c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b910:	461a      	mov	r2, r3
 800b912:	2300      	movs	r3, #0
 800b914:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	3301      	adds	r3, #1
 800b91a:	60fb      	str	r3, [r7, #12]
 800b91c:	6a3b      	ldr	r3, [r7, #32]
 800b91e:	68fa      	ldr	r2, [r7, #12]
 800b920:	429a      	cmp	r2, r3
 800b922:	d3e5      	bcc.n	800b8f0 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800b924:	2101      	movs	r1, #1
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f000 f8ac 	bl	800ba84 <USB_DriveVbus>

  HAL_Delay(200U);
 800b92c:	20c8      	movs	r0, #200	; 0xc8
 800b92e:	f7f8 ff1d 	bl	800476c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2200      	movs	r2, #0
 800b936:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f04f 32ff 	mov.w	r2, #4294967295
 800b93e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d00b      	beq.n	800b964 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b952:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	4a14      	ldr	r2, [pc, #80]	; (800b9a8 <USB_HostInit+0x14c>)
 800b958:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	4a13      	ldr	r2, [pc, #76]	; (800b9ac <USB_HostInit+0x150>)
 800b95e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800b962:	e009      	b.n	800b978 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2280      	movs	r2, #128	; 0x80
 800b968:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	4a10      	ldr	r2, [pc, #64]	; (800b9b0 <USB_HostInit+0x154>)
 800b96e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	4a10      	ldr	r2, [pc, #64]	; (800b9b4 <USB_HostInit+0x158>)
 800b974:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d105      	bne.n	800b98a <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	699b      	ldr	r3, [r3, #24]
 800b982:	f043 0210 	orr.w	r2, r3, #16
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	699a      	ldr	r2, [r3, #24]
 800b98e:	4b0a      	ldr	r3, [pc, #40]	; (800b9b8 <USB_HostInit+0x15c>)
 800b990:	4313      	orrs	r3, r2
 800b992:	687a      	ldr	r2, [r7, #4]
 800b994:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800b996:	2300      	movs	r3, #0
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3710      	adds	r7, #16
 800b99c:	46bd      	mov	sp, r7
 800b99e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b9a2:	b004      	add	sp, #16
 800b9a4:	4770      	bx	lr
 800b9a6:	bf00      	nop
 800b9a8:	01000200 	.word	0x01000200
 800b9ac:	00e00300 	.word	0x00e00300
 800b9b0:	00600080 	.word	0x00600080
 800b9b4:	004000e0 	.word	0x004000e0
 800b9b8:	a3200008 	.word	0xa3200008

0800b9bc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b085      	sub	sp, #20
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	68fa      	ldr	r2, [r7, #12]
 800b9d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b9da:	f023 0303 	bic.w	r3, r3, #3
 800b9de:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b9e6:	681a      	ldr	r2, [r3, #0]
 800b9e8:	78fb      	ldrb	r3, [r7, #3]
 800b9ea:	f003 0303 	and.w	r3, r3, #3
 800b9ee:	68f9      	ldr	r1, [r7, #12]
 800b9f0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b9f4:	4313      	orrs	r3, r2
 800b9f6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800b9f8:	78fb      	ldrb	r3, [r7, #3]
 800b9fa:	2b01      	cmp	r3, #1
 800b9fc:	d107      	bne.n	800ba0e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ba04:	461a      	mov	r2, r3
 800ba06:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800ba0a:	6053      	str	r3, [r2, #4]
 800ba0c:	e009      	b.n	800ba22 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800ba0e:	78fb      	ldrb	r3, [r7, #3]
 800ba10:	2b02      	cmp	r3, #2
 800ba12:	d106      	bne.n	800ba22 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ba1a:	461a      	mov	r2, r3
 800ba1c:	f241 7370 	movw	r3, #6000	; 0x1770
 800ba20:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800ba22:	2300      	movs	r3, #0
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3714      	adds	r7, #20
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2e:	4770      	bx	lr

0800ba30 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b084      	sub	sp, #16
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800ba50:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	68fa      	ldr	r2, [r7, #12]
 800ba56:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ba5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba5e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800ba60:	2064      	movs	r0, #100	; 0x64
 800ba62:	f7f8 fe83 	bl	800476c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	68fa      	ldr	r2, [r7, #12]
 800ba6a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ba6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba72:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800ba74:	200a      	movs	r0, #10
 800ba76:	f7f8 fe79 	bl	800476c <HAL_Delay>

  return HAL_OK;
 800ba7a:	2300      	movs	r3, #0
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3710      	adds	r7, #16
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}

0800ba84 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800ba84:	b480      	push	{r7}
 800ba86:	b085      	sub	sp, #20
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	460b      	mov	r3, r1
 800ba8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ba94:	2300      	movs	r3, #0
 800ba96:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800baa8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d109      	bne.n	800bac8 <USB_DriveVbus+0x44>
 800bab4:	78fb      	ldrb	r3, [r7, #3]
 800bab6:	2b01      	cmp	r3, #1
 800bab8:	d106      	bne.n	800bac8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	68fa      	ldr	r2, [r7, #12]
 800babe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bac2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bac6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bad2:	d109      	bne.n	800bae8 <USB_DriveVbus+0x64>
 800bad4:	78fb      	ldrb	r3, [r7, #3]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d106      	bne.n	800bae8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	68fa      	ldr	r2, [r7, #12]
 800bade:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bae2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bae6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800bae8:	2300      	movs	r3, #0
}
 800baea:	4618      	mov	r0, r3
 800baec:	3714      	adds	r7, #20
 800baee:	46bd      	mov	sp, r7
 800baf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf4:	4770      	bx	lr

0800baf6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800baf6:	b480      	push	{r7}
 800baf8:	b085      	sub	sp, #20
 800bafa:	af00      	add	r7, sp, #0
 800bafc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800bb02:	2300      	movs	r3, #0
 800bb04:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	0c5b      	lsrs	r3, r3, #17
 800bb14:	f003 0303 	and.w	r3, r3, #3
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3714      	adds	r7, #20
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb22:	4770      	bx	lr

0800bb24 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b085      	sub	sp, #20
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bb36:	689b      	ldr	r3, [r3, #8]
 800bb38:	b29b      	uxth	r3, r3
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3714      	adds	r7, #20
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb44:	4770      	bx	lr
	...

0800bb48 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b087      	sub	sp, #28
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	4608      	mov	r0, r1
 800bb52:	4611      	mov	r1, r2
 800bb54:	461a      	mov	r2, r3
 800bb56:	4603      	mov	r3, r0
 800bb58:	70fb      	strb	r3, [r7, #3]
 800bb5a:	460b      	mov	r3, r1
 800bb5c:	70bb      	strb	r3, [r7, #2]
 800bb5e:	4613      	mov	r3, r2
 800bb60:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800bb62:	2300      	movs	r3, #0
 800bb64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800bb6a:	78fb      	ldrb	r3, [r7, #3]
 800bb6c:	015a      	lsls	r2, r3, #5
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	4413      	add	r3, r2
 800bb72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb76:	461a      	mov	r2, r3
 800bb78:	f04f 33ff 	mov.w	r3, #4294967295
 800bb7c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800bb7e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bb82:	2b03      	cmp	r3, #3
 800bb84:	d87e      	bhi.n	800bc84 <USB_HC_Init+0x13c>
 800bb86:	a201      	add	r2, pc, #4	; (adr r2, 800bb8c <USB_HC_Init+0x44>)
 800bb88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb8c:	0800bb9d 	.word	0x0800bb9d
 800bb90:	0800bc47 	.word	0x0800bc47
 800bb94:	0800bb9d 	.word	0x0800bb9d
 800bb98:	0800bc09 	.word	0x0800bc09
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800bb9c:	78fb      	ldrb	r3, [r7, #3]
 800bb9e:	015a      	lsls	r2, r3, #5
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	4413      	add	r3, r2
 800bba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bba8:	461a      	mov	r2, r3
 800bbaa:	f240 439d 	movw	r3, #1181	; 0x49d
 800bbae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800bbb0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	da10      	bge.n	800bbda <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800bbb8:	78fb      	ldrb	r3, [r7, #3]
 800bbba:	015a      	lsls	r2, r3, #5
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	4413      	add	r3, r2
 800bbc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bbc4:	68db      	ldr	r3, [r3, #12]
 800bbc6:	78fa      	ldrb	r2, [r7, #3]
 800bbc8:	0151      	lsls	r1, r2, #5
 800bbca:	68ba      	ldr	r2, [r7, #8]
 800bbcc:	440a      	add	r2, r1
 800bbce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bbd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bbd6:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800bbd8:	e057      	b.n	800bc8a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d051      	beq.n	800bc8a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800bbe6:	78fb      	ldrb	r3, [r7, #3]
 800bbe8:	015a      	lsls	r2, r3, #5
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	4413      	add	r3, r2
 800bbee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bbf2:	68db      	ldr	r3, [r3, #12]
 800bbf4:	78fa      	ldrb	r2, [r7, #3]
 800bbf6:	0151      	lsls	r1, r2, #5
 800bbf8:	68ba      	ldr	r2, [r7, #8]
 800bbfa:	440a      	add	r2, r1
 800bbfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bc00:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800bc04:	60d3      	str	r3, [r2, #12]
      break;
 800bc06:	e040      	b.n	800bc8a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800bc08:	78fb      	ldrb	r3, [r7, #3]
 800bc0a:	015a      	lsls	r2, r3, #5
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	4413      	add	r3, r2
 800bc10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc14:	461a      	mov	r2, r3
 800bc16:	f240 639d 	movw	r3, #1693	; 0x69d
 800bc1a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800bc1c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	da34      	bge.n	800bc8e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800bc24:	78fb      	ldrb	r3, [r7, #3]
 800bc26:	015a      	lsls	r2, r3, #5
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	4413      	add	r3, r2
 800bc2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc30:	68db      	ldr	r3, [r3, #12]
 800bc32:	78fa      	ldrb	r2, [r7, #3]
 800bc34:	0151      	lsls	r1, r2, #5
 800bc36:	68ba      	ldr	r2, [r7, #8]
 800bc38:	440a      	add	r2, r1
 800bc3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bc3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc42:	60d3      	str	r3, [r2, #12]
      }

      break;
 800bc44:	e023      	b.n	800bc8e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800bc46:	78fb      	ldrb	r3, [r7, #3]
 800bc48:	015a      	lsls	r2, r3, #5
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	4413      	add	r3, r2
 800bc4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc52:	461a      	mov	r2, r3
 800bc54:	f240 2325 	movw	r3, #549	; 0x225
 800bc58:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800bc5a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	da17      	bge.n	800bc92 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800bc62:	78fb      	ldrb	r3, [r7, #3]
 800bc64:	015a      	lsls	r2, r3, #5
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	4413      	add	r3, r2
 800bc6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc6e:	68db      	ldr	r3, [r3, #12]
 800bc70:	78fa      	ldrb	r2, [r7, #3]
 800bc72:	0151      	lsls	r1, r2, #5
 800bc74:	68ba      	ldr	r2, [r7, #8]
 800bc76:	440a      	add	r2, r1
 800bc78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bc7c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800bc80:	60d3      	str	r3, [r2, #12]
      }
      break;
 800bc82:	e006      	b.n	800bc92 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800bc84:	2301      	movs	r3, #1
 800bc86:	75fb      	strb	r3, [r7, #23]
      break;
 800bc88:	e004      	b.n	800bc94 <USB_HC_Init+0x14c>
      break;
 800bc8a:	bf00      	nop
 800bc8c:	e002      	b.n	800bc94 <USB_HC_Init+0x14c>
      break;
 800bc8e:	bf00      	nop
 800bc90:	e000      	b.n	800bc94 <USB_HC_Init+0x14c>
      break;
 800bc92:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bc9a:	699a      	ldr	r2, [r3, #24]
 800bc9c:	78fb      	ldrb	r3, [r7, #3]
 800bc9e:	f003 030f 	and.w	r3, r3, #15
 800bca2:	2101      	movs	r1, #1
 800bca4:	fa01 f303 	lsl.w	r3, r1, r3
 800bca8:	68b9      	ldr	r1, [r7, #8]
 800bcaa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800bcae:	4313      	orrs	r3, r2
 800bcb0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	699b      	ldr	r3, [r3, #24]
 800bcb6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800bcbe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	da03      	bge.n	800bcce <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800bcc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bcca:	613b      	str	r3, [r7, #16]
 800bccc:	e001      	b.n	800bcd2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800bcd2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bcd6:	2b02      	cmp	r3, #2
 800bcd8:	d103      	bne.n	800bce2 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800bcda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bcde:	60fb      	str	r3, [r7, #12]
 800bce0:	e001      	b.n	800bce6 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800bce2:	2300      	movs	r3, #0
 800bce4:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bce6:	787b      	ldrb	r3, [r7, #1]
 800bce8:	059b      	lsls	r3, r3, #22
 800bcea:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800bcee:	78bb      	ldrb	r3, [r7, #2]
 800bcf0:	02db      	lsls	r3, r3, #11
 800bcf2:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bcf6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800bcf8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bcfc:	049b      	lsls	r3, r3, #18
 800bcfe:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800bd02:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800bd04:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bd06:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800bd0a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800bd0c:	693b      	ldr	r3, [r7, #16]
 800bd0e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bd10:	78fb      	ldrb	r3, [r7, #3]
 800bd12:	0159      	lsls	r1, r3, #5
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	440b      	add	r3, r1
 800bd18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd1c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bd22:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800bd24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bd28:	2b03      	cmp	r3, #3
 800bd2a:	d10f      	bne.n	800bd4c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800bd2c:	78fb      	ldrb	r3, [r7, #3]
 800bd2e:	015a      	lsls	r2, r3, #5
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	4413      	add	r3, r2
 800bd34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	78fa      	ldrb	r2, [r7, #3]
 800bd3c:	0151      	lsls	r1, r2, #5
 800bd3e:	68ba      	ldr	r2, [r7, #8]
 800bd40:	440a      	add	r2, r1
 800bd42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bd46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bd4a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800bd4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	371c      	adds	r7, #28
 800bd52:	46bd      	mov	sp, r7
 800bd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd58:	4770      	bx	lr
 800bd5a:	bf00      	nop

0800bd5c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b08c      	sub	sp, #48	; 0x30
 800bd60:	af02      	add	r7, sp, #8
 800bd62:	60f8      	str	r0, [r7, #12]
 800bd64:	60b9      	str	r1, [r7, #8]
 800bd66:	4613      	mov	r3, r2
 800bd68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	785b      	ldrb	r3, [r3, #1]
 800bd72:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800bd74:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd78:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d028      	beq.n	800bdd8 <USB_HC_StartXfer+0x7c>
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	791b      	ldrb	r3, [r3, #4]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d124      	bne.n	800bdd8 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800bd8e:	79fb      	ldrb	r3, [r7, #7]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d10b      	bne.n	800bdac <USB_HC_StartXfer+0x50>
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	795b      	ldrb	r3, [r3, #5]
 800bd98:	2b01      	cmp	r3, #1
 800bd9a:	d107      	bne.n	800bdac <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	785b      	ldrb	r3, [r3, #1]
 800bda0:	4619      	mov	r1, r3
 800bda2:	68f8      	ldr	r0, [r7, #12]
 800bda4:	f000 fa2e 	bl	800c204 <USB_DoPing>
      return HAL_OK;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	e112      	b.n	800bfd2 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 800bdac:	79fb      	ldrb	r3, [r7, #7]
 800bdae:	2b01      	cmp	r3, #1
 800bdb0:	d112      	bne.n	800bdd8 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800bdb2:	69fb      	ldr	r3, [r7, #28]
 800bdb4:	015a      	lsls	r2, r3, #5
 800bdb6:	6a3b      	ldr	r3, [r7, #32]
 800bdb8:	4413      	add	r3, r2
 800bdba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bdbe:	68db      	ldr	r3, [r3, #12]
 800bdc0:	69fa      	ldr	r2, [r7, #28]
 800bdc2:	0151      	lsls	r1, r2, #5
 800bdc4:	6a3a      	ldr	r2, [r7, #32]
 800bdc6:	440a      	add	r2, r1
 800bdc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bdcc:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800bdd0:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	691b      	ldr	r3, [r3, #16]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d018      	beq.n	800be12 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	691b      	ldr	r3, [r3, #16]
 800bde4:	68ba      	ldr	r2, [r7, #8]
 800bde6:	8912      	ldrh	r2, [r2, #8]
 800bde8:	4413      	add	r3, r2
 800bdea:	3b01      	subs	r3, #1
 800bdec:	68ba      	ldr	r2, [r7, #8]
 800bdee:	8912      	ldrh	r2, [r2, #8]
 800bdf0:	fbb3 f3f2 	udiv	r3, r3, r2
 800bdf4:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800bdf6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800bdf8:	8b7b      	ldrh	r3, [r7, #26]
 800bdfa:	429a      	cmp	r2, r3
 800bdfc:	d90b      	bls.n	800be16 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800bdfe:	8b7b      	ldrh	r3, [r7, #26]
 800be00:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800be02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800be04:	68ba      	ldr	r2, [r7, #8]
 800be06:	8912      	ldrh	r2, [r2, #8]
 800be08:	fb02 f203 	mul.w	r2, r2, r3
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	611a      	str	r2, [r3, #16]
 800be10:	e001      	b.n	800be16 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800be12:	2301      	movs	r3, #1
 800be14:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	78db      	ldrb	r3, [r3, #3]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d006      	beq.n	800be2c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800be1e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800be20:	68ba      	ldr	r2, [r7, #8]
 800be22:	8912      	ldrh	r2, [r2, #8]
 800be24:	fb02 f203 	mul.w	r2, r2, r3
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	691b      	ldr	r3, [r3, #16]
 800be30:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800be34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800be36:	04d9      	lsls	r1, r3, #19
 800be38:	4b68      	ldr	r3, [pc, #416]	; (800bfdc <USB_HC_StartXfer+0x280>)
 800be3a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800be3c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	7a9b      	ldrb	r3, [r3, #10]
 800be42:	075b      	lsls	r3, r3, #29
 800be44:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800be48:	69f9      	ldr	r1, [r7, #28]
 800be4a:	0148      	lsls	r0, r1, #5
 800be4c:	6a39      	ldr	r1, [r7, #32]
 800be4e:	4401      	add	r1, r0
 800be50:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800be54:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800be56:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800be58:	79fb      	ldrb	r3, [r7, #7]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d009      	beq.n	800be72 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800be5e:	68bb      	ldr	r3, [r7, #8]
 800be60:	68d9      	ldr	r1, [r3, #12]
 800be62:	69fb      	ldr	r3, [r7, #28]
 800be64:	015a      	lsls	r2, r3, #5
 800be66:	6a3b      	ldr	r3, [r7, #32]
 800be68:	4413      	add	r3, r2
 800be6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be6e:	460a      	mov	r2, r1
 800be70:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800be72:	6a3b      	ldr	r3, [r7, #32]
 800be74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be78:	689b      	ldr	r3, [r3, #8]
 800be7a:	f003 0301 	and.w	r3, r3, #1
 800be7e:	2b00      	cmp	r3, #0
 800be80:	bf0c      	ite	eq
 800be82:	2301      	moveq	r3, #1
 800be84:	2300      	movne	r3, #0
 800be86:	b2db      	uxtb	r3, r3
 800be88:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800be8a:	69fb      	ldr	r3, [r7, #28]
 800be8c:	015a      	lsls	r2, r3, #5
 800be8e:	6a3b      	ldr	r3, [r7, #32]
 800be90:	4413      	add	r3, r2
 800be92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	69fa      	ldr	r2, [r7, #28]
 800be9a:	0151      	lsls	r1, r2, #5
 800be9c:	6a3a      	ldr	r2, [r7, #32]
 800be9e:	440a      	add	r2, r1
 800bea0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bea4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bea8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800beaa:	69fb      	ldr	r3, [r7, #28]
 800beac:	015a      	lsls	r2, r3, #5
 800beae:	6a3b      	ldr	r3, [r7, #32]
 800beb0:	4413      	add	r3, r2
 800beb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800beb6:	681a      	ldr	r2, [r3, #0]
 800beb8:	7e7b      	ldrb	r3, [r7, #25]
 800beba:	075b      	lsls	r3, r3, #29
 800bebc:	69f9      	ldr	r1, [r7, #28]
 800bebe:	0148      	lsls	r0, r1, #5
 800bec0:	6a39      	ldr	r1, [r7, #32]
 800bec2:	4401      	add	r1, r0
 800bec4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800bec8:	4313      	orrs	r3, r2
 800beca:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800becc:	69fb      	ldr	r3, [r7, #28]
 800bece:	015a      	lsls	r2, r3, #5
 800bed0:	6a3b      	ldr	r3, [r7, #32]
 800bed2:	4413      	add	r3, r2
 800bed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	4a41      	ldr	r2, [pc, #260]	; (800bfe0 <USB_HC_StartXfer+0x284>)
 800bedc:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800bede:	4b40      	ldr	r3, [pc, #256]	; (800bfe0 <USB_HC_StartXfer+0x284>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bee6:	4a3e      	ldr	r2, [pc, #248]	; (800bfe0 <USB_HC_StartXfer+0x284>)
 800bee8:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	78db      	ldrb	r3, [r3, #3]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d006      	beq.n	800bf00 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800bef2:	4b3b      	ldr	r3, [pc, #236]	; (800bfe0 <USB_HC_StartXfer+0x284>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800befa:	4a39      	ldr	r2, [pc, #228]	; (800bfe0 <USB_HC_StartXfer+0x284>)
 800befc:	6013      	str	r3, [r2, #0]
 800befe:	e005      	b.n	800bf0c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800bf00:	4b37      	ldr	r3, [pc, #220]	; (800bfe0 <USB_HC_StartXfer+0x284>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bf08:	4a35      	ldr	r2, [pc, #212]	; (800bfe0 <USB_HC_StartXfer+0x284>)
 800bf0a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800bf0c:	4b34      	ldr	r3, [pc, #208]	; (800bfe0 <USB_HC_StartXfer+0x284>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bf14:	4a32      	ldr	r2, [pc, #200]	; (800bfe0 <USB_HC_StartXfer+0x284>)
 800bf16:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800bf18:	69fb      	ldr	r3, [r7, #28]
 800bf1a:	015a      	lsls	r2, r3, #5
 800bf1c:	6a3b      	ldr	r3, [r7, #32]
 800bf1e:	4413      	add	r3, r2
 800bf20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf24:	461a      	mov	r2, r3
 800bf26:	4b2e      	ldr	r3, [pc, #184]	; (800bfe0 <USB_HC_StartXfer+0x284>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 800bf2c:	79fb      	ldrb	r3, [r7, #7]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d14e      	bne.n	800bfd0 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	78db      	ldrb	r3, [r3, #3]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d14a      	bne.n	800bfd0 <USB_HC_StartXfer+0x274>
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	691b      	ldr	r3, [r3, #16]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d046      	beq.n	800bfd0 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	79db      	ldrb	r3, [r3, #7]
 800bf46:	2b03      	cmp	r3, #3
 800bf48:	d830      	bhi.n	800bfac <USB_HC_StartXfer+0x250>
 800bf4a:	a201      	add	r2, pc, #4	; (adr r2, 800bf50 <USB_HC_StartXfer+0x1f4>)
 800bf4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf50:	0800bf61 	.word	0x0800bf61
 800bf54:	0800bf85 	.word	0x0800bf85
 800bf58:	0800bf61 	.word	0x0800bf61
 800bf5c:	0800bf85 	.word	0x0800bf85
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	691b      	ldr	r3, [r3, #16]
 800bf64:	3303      	adds	r3, #3
 800bf66:	089b      	lsrs	r3, r3, #2
 800bf68:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800bf6a:	8afa      	ldrh	r2, [r7, #22]
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf70:	b29b      	uxth	r3, r3
 800bf72:	429a      	cmp	r2, r3
 800bf74:	d91c      	bls.n	800bfb0 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	699b      	ldr	r3, [r3, #24]
 800bf7a:	f043 0220 	orr.w	r2, r3, #32
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	619a      	str	r2, [r3, #24]
          }
          break;
 800bf82:	e015      	b.n	800bfb0 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	691b      	ldr	r3, [r3, #16]
 800bf88:	3303      	adds	r3, #3
 800bf8a:	089b      	lsrs	r3, r3, #2
 800bf8c:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800bf8e:	8afa      	ldrh	r2, [r7, #22]
 800bf90:	6a3b      	ldr	r3, [r7, #32]
 800bf92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf96:	691b      	ldr	r3, [r3, #16]
 800bf98:	b29b      	uxth	r3, r3
 800bf9a:	429a      	cmp	r2, r3
 800bf9c:	d90a      	bls.n	800bfb4 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	699b      	ldr	r3, [r3, #24]
 800bfa2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	619a      	str	r2, [r3, #24]
          }
          break;
 800bfaa:	e003      	b.n	800bfb4 <USB_HC_StartXfer+0x258>

        default:
          break;
 800bfac:	bf00      	nop
 800bfae:	e002      	b.n	800bfb6 <USB_HC_StartXfer+0x25a>
          break;
 800bfb0:	bf00      	nop
 800bfb2:	e000      	b.n	800bfb6 <USB_HC_StartXfer+0x25a>
          break;
 800bfb4:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	68d9      	ldr	r1, [r3, #12]
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	785a      	ldrb	r2, [r3, #1]
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	691b      	ldr	r3, [r3, #16]
 800bfc2:	b298      	uxth	r0, r3
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	9300      	str	r3, [sp, #0]
 800bfc8:	4603      	mov	r3, r0
 800bfca:	68f8      	ldr	r0, [r7, #12]
 800bfcc:	f7ff fb92 	bl	800b6f4 <USB_WritePacket>
    }
  }

  return HAL_OK;
 800bfd0:	2300      	movs	r3, #0
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3728      	adds	r7, #40	; 0x28
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
 800bfda:	bf00      	nop
 800bfdc:	1ff80000 	.word	0x1ff80000
 800bfe0:	2000222c 	.word	0x2000222c

0800bfe4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b085      	sub	sp, #20
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bff6:	695b      	ldr	r3, [r3, #20]
 800bff8:	b29b      	uxth	r3, r3
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3714      	adds	r7, #20
 800bffe:	46bd      	mov	sp, r7
 800c000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c004:	4770      	bx	lr

0800c006 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800c006:	b480      	push	{r7}
 800c008:	b087      	sub	sp, #28
 800c00a:	af00      	add	r7, sp, #0
 800c00c:	6078      	str	r0, [r7, #4]
 800c00e:	460b      	mov	r3, r1
 800c010:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800c016:	78fb      	ldrb	r3, [r7, #3]
 800c018:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800c01a:	2300      	movs	r3, #0
 800c01c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	015a      	lsls	r2, r3, #5
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	4413      	add	r3, r2
 800c026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	0c9b      	lsrs	r3, r3, #18
 800c02e:	f003 0303 	and.w	r3, r3, #3
 800c032:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d002      	beq.n	800c040 <USB_HC_Halt+0x3a>
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	2b02      	cmp	r3, #2
 800c03e:	d16c      	bne.n	800c11a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	015a      	lsls	r2, r3, #5
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	4413      	add	r3, r2
 800c048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	68fa      	ldr	r2, [r7, #12]
 800c050:	0151      	lsls	r1, r2, #5
 800c052:	693a      	ldr	r2, [r7, #16]
 800c054:	440a      	add	r2, r1
 800c056:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c05a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c05e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c064:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d143      	bne.n	800c0f4 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	015a      	lsls	r2, r3, #5
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	4413      	add	r3, r2
 800c074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	68fa      	ldr	r2, [r7, #12]
 800c07c:	0151      	lsls	r1, r2, #5
 800c07e:	693a      	ldr	r2, [r7, #16]
 800c080:	440a      	add	r2, r1
 800c082:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c086:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c08a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	015a      	lsls	r2, r3, #5
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	4413      	add	r3, r2
 800c094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	68fa      	ldr	r2, [r7, #12]
 800c09c:	0151      	lsls	r1, r2, #5
 800c09e:	693a      	ldr	r2, [r7, #16]
 800c0a0:	440a      	add	r2, r1
 800c0a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c0a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c0aa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	015a      	lsls	r2, r3, #5
 800c0b0:	693b      	ldr	r3, [r7, #16]
 800c0b2:	4413      	add	r3, r2
 800c0b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	68fa      	ldr	r2, [r7, #12]
 800c0bc:	0151      	lsls	r1, r2, #5
 800c0be:	693a      	ldr	r2, [r7, #16]
 800c0c0:	440a      	add	r2, r1
 800c0c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c0c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c0ca:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	3301      	adds	r3, #1
 800c0d0:	617b      	str	r3, [r7, #20]
 800c0d2:	697b      	ldr	r3, [r7, #20]
 800c0d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c0d8:	d81d      	bhi.n	800c116 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	015a      	lsls	r2, r3, #5
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	4413      	add	r3, r2
 800c0e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c0ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c0f0:	d0ec      	beq.n	800c0cc <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c0f2:	e080      	b.n	800c1f6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	015a      	lsls	r2, r3, #5
 800c0f8:	693b      	ldr	r3, [r7, #16]
 800c0fa:	4413      	add	r3, r2
 800c0fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	68fa      	ldr	r2, [r7, #12]
 800c104:	0151      	lsls	r1, r2, #5
 800c106:	693a      	ldr	r2, [r7, #16]
 800c108:	440a      	add	r2, r1
 800c10a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c10e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c112:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c114:	e06f      	b.n	800c1f6 <USB_HC_Halt+0x1f0>
          break;
 800c116:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c118:	e06d      	b.n	800c1f6 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	015a      	lsls	r2, r3, #5
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	4413      	add	r3, r2
 800c122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	68fa      	ldr	r2, [r7, #12]
 800c12a:	0151      	lsls	r1, r2, #5
 800c12c:	693a      	ldr	r2, [r7, #16]
 800c12e:	440a      	add	r2, r1
 800c130:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c134:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c138:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800c13a:	693b      	ldr	r3, [r7, #16]
 800c13c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c140:	691b      	ldr	r3, [r3, #16]
 800c142:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c146:	2b00      	cmp	r3, #0
 800c148:	d143      	bne.n	800c1d2 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	015a      	lsls	r2, r3, #5
 800c14e:	693b      	ldr	r3, [r7, #16]
 800c150:	4413      	add	r3, r2
 800c152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	68fa      	ldr	r2, [r7, #12]
 800c15a:	0151      	lsls	r1, r2, #5
 800c15c:	693a      	ldr	r2, [r7, #16]
 800c15e:	440a      	add	r2, r1
 800c160:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c164:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c168:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	015a      	lsls	r2, r3, #5
 800c16e:	693b      	ldr	r3, [r7, #16]
 800c170:	4413      	add	r3, r2
 800c172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	68fa      	ldr	r2, [r7, #12]
 800c17a:	0151      	lsls	r1, r2, #5
 800c17c:	693a      	ldr	r2, [r7, #16]
 800c17e:	440a      	add	r2, r1
 800c180:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c184:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c188:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	015a      	lsls	r2, r3, #5
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	4413      	add	r3, r2
 800c192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	68fa      	ldr	r2, [r7, #12]
 800c19a:	0151      	lsls	r1, r2, #5
 800c19c:	693a      	ldr	r2, [r7, #16]
 800c19e:	440a      	add	r2, r1
 800c1a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c1a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c1a8:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	3301      	adds	r3, #1
 800c1ae:	617b      	str	r3, [r7, #20]
 800c1b0:	697b      	ldr	r3, [r7, #20]
 800c1b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c1b6:	d81d      	bhi.n	800c1f4 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	015a      	lsls	r2, r3, #5
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	4413      	add	r3, r2
 800c1c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c1ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c1ce:	d0ec      	beq.n	800c1aa <USB_HC_Halt+0x1a4>
 800c1d0:	e011      	b.n	800c1f6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	015a      	lsls	r2, r3, #5
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	4413      	add	r3, r2
 800c1da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	68fa      	ldr	r2, [r7, #12]
 800c1e2:	0151      	lsls	r1, r2, #5
 800c1e4:	693a      	ldr	r2, [r7, #16]
 800c1e6:	440a      	add	r2, r1
 800c1e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c1ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c1f0:	6013      	str	r3, [r2, #0]
 800c1f2:	e000      	b.n	800c1f6 <USB_HC_Halt+0x1f0>
          break;
 800c1f4:	bf00      	nop
    }
  }

  return HAL_OK;
 800c1f6:	2300      	movs	r3, #0
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	371c      	adds	r7, #28
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c202:	4770      	bx	lr

0800c204 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800c204:	b480      	push	{r7}
 800c206:	b087      	sub	sp, #28
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
 800c20c:	460b      	mov	r3, r1
 800c20e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800c214:	78fb      	ldrb	r3, [r7, #3]
 800c216:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800c218:	2301      	movs	r3, #1
 800c21a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	04da      	lsls	r2, r3, #19
 800c220:	4b15      	ldr	r3, [pc, #84]	; (800c278 <USB_DoPing+0x74>)
 800c222:	4013      	ands	r3, r2
 800c224:	693a      	ldr	r2, [r7, #16]
 800c226:	0151      	lsls	r1, r2, #5
 800c228:	697a      	ldr	r2, [r7, #20]
 800c22a:	440a      	add	r2, r1
 800c22c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c230:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c234:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800c236:	693b      	ldr	r3, [r7, #16]
 800c238:	015a      	lsls	r2, r3, #5
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	4413      	add	r3, r2
 800c23e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c24c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c254:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	015a      	lsls	r2, r3, #5
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	4413      	add	r3, r2
 800c25e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c262:	461a      	mov	r2, r3
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800c268:	2300      	movs	r3, #0
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	371c      	adds	r7, #28
 800c26e:	46bd      	mov	sp, r7
 800c270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c274:	4770      	bx	lr
 800c276:	bf00      	nop
 800c278:	1ff80000 	.word	0x1ff80000

0800c27c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b086      	sub	sp, #24
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800c288:	2300      	movs	r3, #0
 800c28a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f7ff f9ae 	bl	800b5ee <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800c292:	2110      	movs	r1, #16
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f7ff f9e5 	bl	800b664 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f7ff fa08 	bl	800b6b0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	613b      	str	r3, [r7, #16]
 800c2a4:	e01f      	b.n	800c2e6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	015a      	lsls	r2, r3, #5
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	4413      	add	r3, r2
 800c2ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c2bc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c2c4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c2cc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	015a      	lsls	r2, r3, #5
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	4413      	add	r3, r2
 800c2d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c2da:	461a      	mov	r2, r3
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	613b      	str	r3, [r7, #16]
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	2b0f      	cmp	r3, #15
 800c2ea:	d9dc      	bls.n	800c2a6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	613b      	str	r3, [r7, #16]
 800c2f0:	e034      	b.n	800c35c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800c2f2:	693b      	ldr	r3, [r7, #16]
 800c2f4:	015a      	lsls	r2, r3, #5
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	4413      	add	r3, r2
 800c2fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c308:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c310:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c318:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	015a      	lsls	r2, r3, #5
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	4413      	add	r3, r2
 800c322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c326:	461a      	mov	r2, r3
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800c32c:	697b      	ldr	r3, [r7, #20]
 800c32e:	3301      	adds	r3, #1
 800c330:	617b      	str	r3, [r7, #20]
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c338:	d80c      	bhi.n	800c354 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	015a      	lsls	r2, r3, #5
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	4413      	add	r3, r2
 800c342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c34c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c350:	d0ec      	beq.n	800c32c <USB_StopHost+0xb0>
 800c352:	e000      	b.n	800c356 <USB_StopHost+0xda>
        break;
 800c354:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	3301      	adds	r3, #1
 800c35a:	613b      	str	r3, [r7, #16]
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	2b0f      	cmp	r3, #15
 800c360:	d9c7      	bls.n	800c2f2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c368:	461a      	mov	r2, r3
 800c36a:	f04f 33ff 	mov.w	r3, #4294967295
 800c36e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f04f 32ff 	mov.w	r2, #4294967295
 800c376:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f7ff f927 	bl	800b5cc <USB_EnableGlobalInt>

  return HAL_OK;
 800c37e:	2300      	movs	r3, #0
}
 800c380:	4618      	mov	r0, r3
 800c382:	3718      	adds	r7, #24
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}

0800c388 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800c38c:	4904      	ldr	r1, [pc, #16]	; (800c3a0 <MX_FATFS_Init+0x18>)
 800c38e:	4805      	ldr	r0, [pc, #20]	; (800c3a4 <MX_FATFS_Init+0x1c>)
 800c390:	f005 fd2a 	bl	8011de8 <FATFS_LinkDriver>
 800c394:	4603      	mov	r3, r0
 800c396:	461a      	mov	r2, r3
 800c398:	4b03      	ldr	r3, [pc, #12]	; (800c3a8 <MX_FATFS_Init+0x20>)
 800c39a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c39c:	bf00      	nop
 800c39e:	bd80      	pop	{r7, pc}
 800c3a0:	2000affc 	.word	0x2000affc
 800c3a4:	08012ae0 	.word	0x08012ae0
 800c3a8:	2000b460 	.word	0x2000b460

0800c3ac <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c3b0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr

0800c3bc <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b083      	sub	sp, #12
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800c3c6:	2300      	movs	r3, #0
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	370c      	adds	r7, #12
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d2:	4770      	bx	lr

0800c3d4 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b084      	sub	sp, #16
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	4603      	mov	r3, r0
 800c3dc:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800c3de:	2301      	movs	r3, #1
 800c3e0:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800c3e2:	79fb      	ldrb	r3, [r7, #7]
 800c3e4:	4619      	mov	r1, r3
 800c3e6:	4808      	ldr	r0, [pc, #32]	; (800c408 <USBH_status+0x34>)
 800c3e8:	f000 fe2f 	bl	800d04a <USBH_MSC_UnitIsReady>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d002      	beq.n	800c3f8 <USBH_status+0x24>
  {
    res = RES_OK;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	73fb      	strb	r3, [r7, #15]
 800c3f6:	e001      	b.n	800c3fc <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800c3fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3fe:	4618      	mov	r0, r3
 800c400:	3710      	adds	r7, #16
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}
 800c406:	bf00      	nop
 800c408:	2000b464 	.word	0x2000b464

0800c40c <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b094      	sub	sp, #80	; 0x50
 800c410:	af02      	add	r7, sp, #8
 800c412:	60b9      	str	r1, [r7, #8]
 800c414:	607a      	str	r2, [r7, #4]
 800c416:	603b      	str	r3, [r7, #0]
 800c418:	4603      	mov	r3, r0
 800c41a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c41c:	2301      	movs	r3, #1
 800c41e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800c422:	7bf9      	ldrb	r1, [r7, #15]
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	9300      	str	r3, [sp, #0]
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	687a      	ldr	r2, [r7, #4]
 800c42c:	4812      	ldr	r0, [pc, #72]	; (800c478 <USBH_read+0x6c>)
 800c42e:	f000 fe56 	bl	800d0de <USBH_MSC_Read>
 800c432:	4603      	mov	r3, r0
 800c434:	2b00      	cmp	r3, #0
 800c436:	d103      	bne.n	800c440 <USBH_read+0x34>
  {
    res = RES_OK;
 800c438:	2300      	movs	r3, #0
 800c43a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800c43e:	e015      	b.n	800c46c <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800c440:	f107 0210 	add.w	r2, r7, #16
 800c444:	7bfb      	ldrb	r3, [r7, #15]
 800c446:	4619      	mov	r1, r3
 800c448:	480b      	ldr	r0, [pc, #44]	; (800c478 <USBH_read+0x6c>)
 800c44a:	f000 fe24 	bl	800d096 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800c44e:	7f7b      	ldrb	r3, [r7, #29]
 800c450:	2b28      	cmp	r3, #40	; 0x28
 800c452:	d003      	beq.n	800c45c <USBH_read+0x50>
 800c454:	2b3a      	cmp	r3, #58	; 0x3a
 800c456:	d001      	beq.n	800c45c <USBH_read+0x50>
 800c458:	2b04      	cmp	r3, #4
 800c45a:	d103      	bne.n	800c464 <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800c45c:	2303      	movs	r3, #3
 800c45e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800c462:	e003      	b.n	800c46c <USBH_read+0x60>

    default:
      res = RES_ERROR;
 800c464:	2301      	movs	r3, #1
 800c466:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800c46a:	bf00      	nop
    }
  }

  return res;
 800c46c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800c470:	4618      	mov	r0, r3
 800c472:	3748      	adds	r7, #72	; 0x48
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}
 800c478:	2000b464 	.word	0x2000b464

0800c47c <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b094      	sub	sp, #80	; 0x50
 800c480:	af02      	add	r7, sp, #8
 800c482:	60b9      	str	r1, [r7, #8]
 800c484:	607a      	str	r2, [r7, #4]
 800c486:	603b      	str	r3, [r7, #0]
 800c488:	4603      	mov	r3, r0
 800c48a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c48c:	2301      	movs	r3, #1
 800c48e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800c492:	7bf9      	ldrb	r1, [r7, #15]
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	9300      	str	r3, [sp, #0]
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	687a      	ldr	r2, [r7, #4]
 800c49c:	4817      	ldr	r0, [pc, #92]	; (800c4fc <USBH_write+0x80>)
 800c49e:	f000 fe87 	bl	800d1b0 <USBH_MSC_Write>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d103      	bne.n	800c4b0 <USBH_write+0x34>
  {
    res = RES_OK;
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800c4ae:	e01f      	b.n	800c4f0 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800c4b0:	f107 0210 	add.w	r2, r7, #16
 800c4b4:	7bfb      	ldrb	r3, [r7, #15]
 800c4b6:	4619      	mov	r1, r3
 800c4b8:	4810      	ldr	r0, [pc, #64]	; (800c4fc <USBH_write+0x80>)
 800c4ba:	f000 fdec 	bl	800d096 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800c4be:	7f7b      	ldrb	r3, [r7, #29]
 800c4c0:	2b27      	cmp	r3, #39	; 0x27
 800c4c2:	d009      	beq.n	800c4d8 <USBH_write+0x5c>
 800c4c4:	2b27      	cmp	r3, #39	; 0x27
 800c4c6:	dc02      	bgt.n	800c4ce <USBH_write+0x52>
 800c4c8:	2b04      	cmp	r3, #4
 800c4ca:	d009      	beq.n	800c4e0 <USBH_write+0x64>
 800c4cc:	e00c      	b.n	800c4e8 <USBH_write+0x6c>
 800c4ce:	2b28      	cmp	r3, #40	; 0x28
 800c4d0:	d006      	beq.n	800c4e0 <USBH_write+0x64>
 800c4d2:	2b3a      	cmp	r3, #58	; 0x3a
 800c4d4:	d004      	beq.n	800c4e0 <USBH_write+0x64>
 800c4d6:	e007      	b.n	800c4e8 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800c4d8:	2302      	movs	r3, #2
 800c4da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800c4de:	e007      	b.n	800c4f0 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800c4e0:	2303      	movs	r3, #3
 800c4e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800c4e6:	e003      	b.n	800c4f0 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800c4ee:	bf00      	nop
    }
  }

  return res;
 800c4f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	3748      	adds	r7, #72	; 0x48
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}
 800c4fc:	2000b464 	.word	0x2000b464

0800c500 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b090      	sub	sp, #64	; 0x40
 800c504:	af00      	add	r7, sp, #0
 800c506:	4603      	mov	r3, r0
 800c508:	603a      	str	r2, [r7, #0]
 800c50a:	71fb      	strb	r3, [r7, #7]
 800c50c:	460b      	mov	r3, r1
 800c50e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c510:	2301      	movs	r3, #1
 800c512:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800c516:	79bb      	ldrb	r3, [r7, #6]
 800c518:	2b03      	cmp	r3, #3
 800c51a:	d852      	bhi.n	800c5c2 <USBH_ioctl+0xc2>
 800c51c:	a201      	add	r2, pc, #4	; (adr r2, 800c524 <USBH_ioctl+0x24>)
 800c51e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c522:	bf00      	nop
 800c524:	0800c535 	.word	0x0800c535
 800c528:	0800c53d 	.word	0x0800c53d
 800c52c:	0800c567 	.word	0x0800c567
 800c530:	0800c593 	.word	0x0800c593
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800c534:	2300      	movs	r3, #0
 800c536:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800c53a:	e045      	b.n	800c5c8 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800c53c:	f107 0208 	add.w	r2, r7, #8
 800c540:	79fb      	ldrb	r3, [r7, #7]
 800c542:	4619      	mov	r1, r3
 800c544:	4823      	ldr	r0, [pc, #140]	; (800c5d4 <USBH_ioctl+0xd4>)
 800c546:	f000 fda6 	bl	800d096 <USBH_MSC_GetLUNInfo>
 800c54a:	4603      	mov	r3, r0
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d106      	bne.n	800c55e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800c550:	68fa      	ldr	r2, [r7, #12]
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800c556:	2300      	movs	r3, #0
 800c558:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800c55c:	e034      	b.n	800c5c8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800c55e:	2301      	movs	r3, #1
 800c560:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800c564:	e030      	b.n	800c5c8 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800c566:	f107 0208 	add.w	r2, r7, #8
 800c56a:	79fb      	ldrb	r3, [r7, #7]
 800c56c:	4619      	mov	r1, r3
 800c56e:	4819      	ldr	r0, [pc, #100]	; (800c5d4 <USBH_ioctl+0xd4>)
 800c570:	f000 fd91 	bl	800d096 <USBH_MSC_GetLUNInfo>
 800c574:	4603      	mov	r3, r0
 800c576:	2b00      	cmp	r3, #0
 800c578:	d107      	bne.n	800c58a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800c57a:	8a3b      	ldrh	r3, [r7, #16]
 800c57c:	461a      	mov	r2, r3
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800c582:	2300      	movs	r3, #0
 800c584:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800c588:	e01e      	b.n	800c5c8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800c58a:	2301      	movs	r3, #1
 800c58c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800c590:	e01a      	b.n	800c5c8 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800c592:	f107 0208 	add.w	r2, r7, #8
 800c596:	79fb      	ldrb	r3, [r7, #7]
 800c598:	4619      	mov	r1, r3
 800c59a:	480e      	ldr	r0, [pc, #56]	; (800c5d4 <USBH_ioctl+0xd4>)
 800c59c:	f000 fd7b 	bl	800d096 <USBH_MSC_GetLUNInfo>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d109      	bne.n	800c5ba <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800c5a6:	8a3b      	ldrh	r3, [r7, #16]
 800c5a8:	0a5b      	lsrs	r3, r3, #9
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	461a      	mov	r2, r3
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800c5b8:	e006      	b.n	800c5c8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800c5c0:	e002      	b.n	800c5c8 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800c5c2:	2304      	movs	r3, #4
 800c5c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800c5c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3740      	adds	r7, #64	; 0x40
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}
 800c5d4:	2000b464 	.word	0x2000b464

0800c5d8 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800c5d8:	b590      	push	{r4, r7, lr}
 800c5da:	b089      	sub	sp, #36	; 0x24
 800c5dc:	af04      	add	r7, sp, #16
 800c5de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c5e6:	7919      	ldrb	r1, [r3, #4]
 800c5e8:	2350      	movs	r3, #80	; 0x50
 800c5ea:	2206      	movs	r2, #6
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f001 fc6d 	bl	800decc <USBH_FindInterface>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800c5f6:	7bfb      	ldrb	r3, [r7, #15]
 800c5f8:	2bff      	cmp	r3, #255	; 0xff
 800c5fa:	d002      	beq.n	800c602 <USBH_MSC_InterfaceInit+0x2a>
 800c5fc:	7bfb      	ldrb	r3, [r7, #15]
 800c5fe:	2b01      	cmp	r3, #1
 800c600:	d901      	bls.n	800c606 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c602:	2302      	movs	r3, #2
 800c604:	e0ef      	b.n	800c7e6 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 800c606:	7bfb      	ldrb	r3, [r7, #15]
 800c608:	4619      	mov	r1, r3
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f001 fc42 	bl	800de94 <USBH_SelectInterface>
 800c610:	4603      	mov	r3, r0
 800c612:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800c614:	7bbb      	ldrb	r3, [r7, #14]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d001      	beq.n	800c61e <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800c61a:	2302      	movs	r3, #2
 800c61c:	e0e3      	b.n	800c7e6 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800c624:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c628:	f006 f87c 	bl	8012724 <malloc>
 800c62c:	4603      	mov	r3, r0
 800c62e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c636:	69db      	ldr	r3, [r3, #28]
 800c638:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d101      	bne.n	800c644 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800c640:	2302      	movs	r3, #2
 800c642:	e0d0      	b.n	800c7e6 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800c644:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c648:	2100      	movs	r1, #0
 800c64a:	68b8      	ldr	r0, [r7, #8]
 800c64c:	f006 f89e 	bl	801278c <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800c650:	7bfb      	ldrb	r3, [r7, #15]
 800c652:	687a      	ldr	r2, [r7, #4]
 800c654:	211a      	movs	r1, #26
 800c656:	fb01 f303 	mul.w	r3, r1, r3
 800c65a:	4413      	add	r3, r2
 800c65c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c660:	781b      	ldrb	r3, [r3, #0]
 800c662:	b25b      	sxtb	r3, r3
 800c664:	2b00      	cmp	r3, #0
 800c666:	da16      	bge.n	800c696 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800c668:	7bfb      	ldrb	r3, [r7, #15]
 800c66a:	687a      	ldr	r2, [r7, #4]
 800c66c:	211a      	movs	r1, #26
 800c66e:	fb01 f303 	mul.w	r3, r1, r3
 800c672:	4413      	add	r3, r2
 800c674:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c678:	781a      	ldrb	r2, [r3, #0]
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c67e:	7bfb      	ldrb	r3, [r7, #15]
 800c680:	687a      	ldr	r2, [r7, #4]
 800c682:	211a      	movs	r1, #26
 800c684:	fb01 f303 	mul.w	r3, r1, r3
 800c688:	4413      	add	r3, r2
 800c68a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800c68e:	881a      	ldrh	r2, [r3, #0]
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	815a      	strh	r2, [r3, #10]
 800c694:	e015      	b.n	800c6c2 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800c696:	7bfb      	ldrb	r3, [r7, #15]
 800c698:	687a      	ldr	r2, [r7, #4]
 800c69a:	211a      	movs	r1, #26
 800c69c:	fb01 f303 	mul.w	r3, r1, r3
 800c6a0:	4413      	add	r3, r2
 800c6a2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c6a6:	781a      	ldrb	r2, [r3, #0]
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c6ac:	7bfb      	ldrb	r3, [r7, #15]
 800c6ae:	687a      	ldr	r2, [r7, #4]
 800c6b0:	211a      	movs	r1, #26
 800c6b2:	fb01 f303 	mul.w	r3, r1, r3
 800c6b6:	4413      	add	r3, r2
 800c6b8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800c6bc:	881a      	ldrh	r2, [r3, #0]
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800c6c2:	7bfb      	ldrb	r3, [r7, #15]
 800c6c4:	687a      	ldr	r2, [r7, #4]
 800c6c6:	211a      	movs	r1, #26
 800c6c8:	fb01 f303 	mul.w	r3, r1, r3
 800c6cc:	4413      	add	r3, r2
 800c6ce:	f203 3356 	addw	r3, r3, #854	; 0x356
 800c6d2:	781b      	ldrb	r3, [r3, #0]
 800c6d4:	b25b      	sxtb	r3, r3
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	da16      	bge.n	800c708 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800c6da:	7bfb      	ldrb	r3, [r7, #15]
 800c6dc:	687a      	ldr	r2, [r7, #4]
 800c6de:	211a      	movs	r1, #26
 800c6e0:	fb01 f303 	mul.w	r3, r1, r3
 800c6e4:	4413      	add	r3, r2
 800c6e6:	f203 3356 	addw	r3, r3, #854	; 0x356
 800c6ea:	781a      	ldrb	r2, [r3, #0]
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c6f0:	7bfb      	ldrb	r3, [r7, #15]
 800c6f2:	687a      	ldr	r2, [r7, #4]
 800c6f4:	211a      	movs	r1, #26
 800c6f6:	fb01 f303 	mul.w	r3, r1, r3
 800c6fa:	4413      	add	r3, r2
 800c6fc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800c700:	881a      	ldrh	r2, [r3, #0]
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	815a      	strh	r2, [r3, #10]
 800c706:	e015      	b.n	800c734 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800c708:	7bfb      	ldrb	r3, [r7, #15]
 800c70a:	687a      	ldr	r2, [r7, #4]
 800c70c:	211a      	movs	r1, #26
 800c70e:	fb01 f303 	mul.w	r3, r1, r3
 800c712:	4413      	add	r3, r2
 800c714:	f203 3356 	addw	r3, r3, #854	; 0x356
 800c718:	781a      	ldrb	r2, [r3, #0]
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c71e:	7bfb      	ldrb	r3, [r7, #15]
 800c720:	687a      	ldr	r2, [r7, #4]
 800c722:	211a      	movs	r1, #26
 800c724:	fb01 f303 	mul.w	r3, r1, r3
 800c728:	4413      	add	r3, r2
 800c72a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800c72e:	881a      	ldrh	r2, [r3, #0]
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	2200      	movs	r2, #0
 800c738:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	2200      	movs	r2, #0
 800c73e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	2200      	movs	r2, #0
 800c744:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	799b      	ldrb	r3, [r3, #6]
 800c74a:	4619      	mov	r1, r3
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f002 fde0 	bl	800f312 <USBH_AllocPipe>
 800c752:	4603      	mov	r3, r0
 800c754:	461a      	mov	r2, r3
 800c756:	68bb      	ldr	r3, [r7, #8]
 800c758:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	79db      	ldrb	r3, [r3, #7]
 800c75e:	4619      	mov	r1, r3
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	f002 fdd6 	bl	800f312 <USBH_AllocPipe>
 800c766:	4603      	mov	r3, r0
 800c768:	461a      	mov	r2, r3
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f000 fdc2 	bl	800d2f8 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	7959      	ldrb	r1, [r3, #5]
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	7998      	ldrb	r0, [r3, #6]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c788:	68ba      	ldr	r2, [r7, #8]
 800c78a:	8912      	ldrh	r2, [r2, #8]
 800c78c:	9202      	str	r2, [sp, #8]
 800c78e:	2202      	movs	r2, #2
 800c790:	9201      	str	r2, [sp, #4]
 800c792:	9300      	str	r3, [sp, #0]
 800c794:	4623      	mov	r3, r4
 800c796:	4602      	mov	r2, r0
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f002 fd8b 	bl	800f2b4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	7919      	ldrb	r1, [r3, #4]
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	79d8      	ldrb	r0, [r3, #7]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c7b2:	68ba      	ldr	r2, [r7, #8]
 800c7b4:	8952      	ldrh	r2, [r2, #10]
 800c7b6:	9202      	str	r2, [sp, #8]
 800c7b8:	2202      	movs	r2, #2
 800c7ba:	9201      	str	r2, [sp, #4]
 800c7bc:	9300      	str	r3, [sp, #0]
 800c7be:	4623      	mov	r3, r4
 800c7c0:	4602      	mov	r2, r0
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f002 fd76 	bl	800f2b4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	791b      	ldrb	r3, [r3, #4]
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	4619      	mov	r1, r3
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f005 fe79 	bl	80124c8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	795b      	ldrb	r3, [r3, #5]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	4619      	mov	r1, r3
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f005 fe72 	bl	80124c8 <USBH_LL_SetToggle>

  return USBH_OK;
 800c7e4:	2300      	movs	r3, #0
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3714      	adds	r7, #20
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd90      	pop	{r4, r7, pc}

0800c7ee <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800c7ee:	b580      	push	{r7, lr}
 800c7f0:	b084      	sub	sp, #16
 800c7f2:	af00      	add	r7, sp, #0
 800c7f4:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c7fc:	69db      	ldr	r3, [r3, #28]
 800c7fe:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	795b      	ldrb	r3, [r3, #5]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d00e      	beq.n	800c826 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	795b      	ldrb	r3, [r3, #5]
 800c80c:	4619      	mov	r1, r3
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f002 fd6f 	bl	800f2f2 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	795b      	ldrb	r3, [r3, #5]
 800c818:	4619      	mov	r1, r3
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f002 fd9a 	bl	800f354 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	2200      	movs	r2, #0
 800c824:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	791b      	ldrb	r3, [r3, #4]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d00e      	beq.n	800c84c <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	791b      	ldrb	r3, [r3, #4]
 800c832:	4619      	mov	r1, r3
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f002 fd5c 	bl	800f2f2 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	791b      	ldrb	r3, [r3, #4]
 800c83e:	4619      	mov	r1, r3
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	f002 fd87 	bl	800f354 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	2200      	movs	r2, #0
 800c84a:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c852:	69db      	ldr	r3, [r3, #28]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d00b      	beq.n	800c870 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c85e:	69db      	ldr	r3, [r3, #28]
 800c860:	4618      	mov	r0, r3
 800c862:	f005 ff67 	bl	8012734 <free>
    phost->pActiveClass->pData = 0U;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c86c:	2200      	movs	r2, #0
 800c86e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800c870:	2300      	movs	r3, #0
}
 800c872:	4618      	mov	r0, r3
 800c874:	3710      	adds	r7, #16
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}

0800c87a <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800c87a:	b580      	push	{r7, lr}
 800c87c:	b084      	sub	sp, #16
 800c87e:	af00      	add	r7, sp, #0
 800c880:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c888:	69db      	ldr	r3, [r3, #28]
 800c88a:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800c88c:	2301      	movs	r3, #1
 800c88e:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	7b9b      	ldrb	r3, [r3, #14]
 800c894:	2b02      	cmp	r3, #2
 800c896:	d004      	beq.n	800c8a2 <USBH_MSC_ClassRequest+0x28>
 800c898:	2b03      	cmp	r3, #3
 800c89a:	d03e      	beq.n	800c91a <USBH_MSC_ClassRequest+0xa0>
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d000      	beq.n	800c8a2 <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 800c8a0:	e04a      	b.n	800c938 <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	4619      	mov	r1, r3
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f000 fd08 	bl	800d2bc <USBH_MSC_BOT_REQ_GetMaxLUN>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 800c8b0:	7bfb      	ldrb	r3, [r7, #15]
 800c8b2:	2b03      	cmp	r3, #3
 800c8b4:	d104      	bne.n	800c8c0 <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 800c8c0:	7bfb      	ldrb	r3, [r7, #15]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d135      	bne.n	800c932 <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	781b      	ldrb	r3, [r3, #0]
 800c8ca:	2b02      	cmp	r3, #2
 800c8cc:	d804      	bhi.n	800c8d8 <USBH_MSC_ClassRequest+0x5e>
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	781b      	ldrb	r3, [r3, #0]
 800c8d2:	3301      	adds	r3, #1
 800c8d4:	b2da      	uxtb	r2, r3
 800c8d6:	e000      	b.n	800c8da <USBH_MSC_ClassRequest+0x60>
 800c8d8:	2202      	movs	r2, #2
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800c8de:	2300      	movs	r3, #0
 800c8e0:	73bb      	strb	r3, [r7, #14]
 800c8e2:	e014      	b.n	800c90e <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800c8e4:	7bbb      	ldrb	r3, [r7, #14]
 800c8e6:	68ba      	ldr	r2, [r7, #8]
 800c8e8:	2134      	movs	r1, #52	; 0x34
 800c8ea:	fb01 f303 	mul.w	r3, r1, r3
 800c8ee:	4413      	add	r3, r2
 800c8f0:	3392      	adds	r3, #146	; 0x92
 800c8f2:	2202      	movs	r2, #2
 800c8f4:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800c8f6:	7bbb      	ldrb	r3, [r7, #14]
 800c8f8:	68ba      	ldr	r2, [r7, #8]
 800c8fa:	2134      	movs	r1, #52	; 0x34
 800c8fc:	fb01 f303 	mul.w	r3, r1, r3
 800c900:	4413      	add	r3, r2
 800c902:	33c1      	adds	r3, #193	; 0xc1
 800c904:	2200      	movs	r2, #0
 800c906:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800c908:	7bbb      	ldrb	r3, [r7, #14]
 800c90a:	3301      	adds	r3, #1
 800c90c:	73bb      	strb	r3, [r7, #14]
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	7bba      	ldrb	r2, [r7, #14]
 800c914:	429a      	cmp	r2, r3
 800c916:	d3e5      	bcc.n	800c8e4 <USBH_MSC_ClassRequest+0x6a>
      break;
 800c918:	e00b      	b.n	800c932 <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800c91a:	2100      	movs	r1, #0
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f002 f896 	bl	800ea4e <USBH_ClrFeature>
 800c922:	4603      	mov	r3, r0
 800c924:	2b00      	cmp	r3, #0
 800c926:	d106      	bne.n	800c936 <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	7bda      	ldrb	r2, [r3, #15]
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	739a      	strb	r2, [r3, #14]
      break;
 800c930:	e001      	b.n	800c936 <USBH_MSC_ClassRequest+0xbc>
      break;
 800c932:	bf00      	nop
 800c934:	e000      	b.n	800c938 <USBH_MSC_ClassRequest+0xbe>
      break;
 800c936:	bf00      	nop
  }

  return status;
 800c938:	7bfb      	ldrb	r3, [r7, #15]
}
 800c93a:	4618      	mov	r0, r3
 800c93c:	3710      	adds	r7, #16
 800c93e:	46bd      	mov	sp, r7
 800c940:	bd80      	pop	{r7, pc}
	...

0800c944 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b086      	sub	sp, #24
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c952:	69db      	ldr	r3, [r3, #28]
 800c954:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800c956:	2301      	movs	r3, #1
 800c958:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800c95a:	2301      	movs	r3, #1
 800c95c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800c95e:	2301      	movs	r3, #1
 800c960:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800c962:	693b      	ldr	r3, [r7, #16]
 800c964:	7b1b      	ldrb	r3, [r3, #12]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d003      	beq.n	800c972 <USBH_MSC_Process+0x2e>
 800c96a:	2b01      	cmp	r3, #1
 800c96c:	f000 8271 	beq.w	800ce52 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800c970:	e272      	b.n	800ce58 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800c978:	693b      	ldr	r3, [r7, #16]
 800c97a:	781b      	ldrb	r3, [r3, #0]
 800c97c:	b29b      	uxth	r3, r3
 800c97e:	429a      	cmp	r2, r3
 800c980:	f080 824f 	bcs.w	800ce22 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c98a:	4619      	mov	r1, r3
 800c98c:	693a      	ldr	r2, [r7, #16]
 800c98e:	2334      	movs	r3, #52	; 0x34
 800c990:	fb03 f301 	mul.w	r3, r3, r1
 800c994:	4413      	add	r3, r2
 800c996:	3391      	adds	r3, #145	; 0x91
 800c998:	2201      	movs	r2, #1
 800c99a:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c9a2:	4619      	mov	r1, r3
 800c9a4:	693a      	ldr	r2, [r7, #16]
 800c9a6:	2334      	movs	r3, #52	; 0x34
 800c9a8:	fb03 f301 	mul.w	r3, r3, r1
 800c9ac:	4413      	add	r3, r2
 800c9ae:	3390      	adds	r3, #144	; 0x90
 800c9b0:	781b      	ldrb	r3, [r3, #0]
 800c9b2:	2b08      	cmp	r3, #8
 800c9b4:	f200 8243 	bhi.w	800ce3e <USBH_MSC_Process+0x4fa>
 800c9b8:	a201      	add	r2, pc, #4	; (adr r2, 800c9c0 <USBH_MSC_Process+0x7c>)
 800c9ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9be:	bf00      	nop
 800c9c0:	0800c9e5 	.word	0x0800c9e5
 800c9c4:	0800ce3f 	.word	0x0800ce3f
 800c9c8:	0800caad 	.word	0x0800caad
 800c9cc:	0800cc31 	.word	0x0800cc31
 800c9d0:	0800ca0b 	.word	0x0800ca0b
 800c9d4:	0800ccfd 	.word	0x0800ccfd
 800c9d8:	0800ce3f 	.word	0x0800ce3f
 800c9dc:	0800ce3f 	.word	0x0800ce3f
 800c9e0:	0800ce11 	.word	0x0800ce11
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800c9e4:	693b      	ldr	r3, [r7, #16]
 800c9e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c9ea:	4619      	mov	r1, r3
 800c9ec:	693a      	ldr	r2, [r7, #16]
 800c9ee:	2334      	movs	r3, #52	; 0x34
 800c9f0:	fb03 f301 	mul.w	r3, r3, r1
 800c9f4:	4413      	add	r3, r2
 800c9f6:	3390      	adds	r3, #144	; 0x90
 800c9f8:	2204      	movs	r2, #4
 800c9fa:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800ca02:	693b      	ldr	r3, [r7, #16]
 800ca04:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800ca08:	e222      	b.n	800ce50 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800ca0a:	693b      	ldr	r3, [r7, #16]
 800ca0c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ca10:	b2d9      	uxtb	r1, r3
 800ca12:	693b      	ldr	r3, [r7, #16]
 800ca14:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ca18:	461a      	mov	r2, r3
 800ca1a:	2334      	movs	r3, #52	; 0x34
 800ca1c:	fb03 f302 	mul.w	r3, r3, r2
 800ca20:	3398      	adds	r3, #152	; 0x98
 800ca22:	693a      	ldr	r2, [r7, #16]
 800ca24:	4413      	add	r3, r2
 800ca26:	3307      	adds	r3, #7
 800ca28:	461a      	mov	r2, r3
 800ca2a:	6878      	ldr	r0, [r7, #4]
 800ca2c:	f000 ff86 	bl	800d93c <USBH_MSC_SCSI_Inquiry>
 800ca30:	4603      	mov	r3, r0
 800ca32:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800ca34:	7bfb      	ldrb	r3, [r7, #15]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d10b      	bne.n	800ca52 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ca40:	4619      	mov	r1, r3
 800ca42:	693a      	ldr	r2, [r7, #16]
 800ca44:	2334      	movs	r3, #52	; 0x34
 800ca46:	fb03 f301 	mul.w	r3, r3, r1
 800ca4a:	4413      	add	r3, r2
 800ca4c:	3390      	adds	r3, #144	; 0x90
 800ca4e:	2202      	movs	r2, #2
 800ca50:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800ca52:	7bfb      	ldrb	r3, [r7, #15]
 800ca54:	2b02      	cmp	r3, #2
 800ca56:	d10c      	bne.n	800ca72 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800ca58:	693b      	ldr	r3, [r7, #16]
 800ca5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ca5e:	4619      	mov	r1, r3
 800ca60:	693a      	ldr	r2, [r7, #16]
 800ca62:	2334      	movs	r3, #52	; 0x34
 800ca64:	fb03 f301 	mul.w	r3, r3, r1
 800ca68:	4413      	add	r3, r2
 800ca6a:	3390      	adds	r3, #144	; 0x90
 800ca6c:	2205      	movs	r2, #5
 800ca6e:	701a      	strb	r2, [r3, #0]
            break;
 800ca70:	e1e7      	b.n	800ce42 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800ca72:	7bfb      	ldrb	r3, [r7, #15]
 800ca74:	2b04      	cmp	r3, #4
 800ca76:	f040 81e4 	bne.w	800ce42 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800ca7a:	693b      	ldr	r3, [r7, #16]
 800ca7c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ca80:	4619      	mov	r1, r3
 800ca82:	693a      	ldr	r2, [r7, #16]
 800ca84:	2334      	movs	r3, #52	; 0x34
 800ca86:	fb03 f301 	mul.w	r3, r3, r1
 800ca8a:	4413      	add	r3, r2
 800ca8c:	3390      	adds	r3, #144	; 0x90
 800ca8e:	2201      	movs	r2, #1
 800ca90:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800ca92:	693b      	ldr	r3, [r7, #16]
 800ca94:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ca98:	4619      	mov	r1, r3
 800ca9a:	693a      	ldr	r2, [r7, #16]
 800ca9c:	2334      	movs	r3, #52	; 0x34
 800ca9e:	fb03 f301 	mul.w	r3, r3, r1
 800caa2:	4413      	add	r3, r2
 800caa4:	3391      	adds	r3, #145	; 0x91
 800caa6:	2202      	movs	r2, #2
 800caa8:	701a      	strb	r2, [r3, #0]
            break;
 800caaa:	e1ca      	b.n	800ce42 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800caac:	693b      	ldr	r3, [r7, #16]
 800caae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cab2:	b2db      	uxtb	r3, r3
 800cab4:	4619      	mov	r1, r3
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f000 fe82 	bl	800d7c0 <USBH_MSC_SCSI_TestUnitReady>
 800cabc:	4603      	mov	r3, r0
 800cabe:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800cac0:	7bbb      	ldrb	r3, [r7, #14]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d149      	bne.n	800cb5a <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800cac6:	693b      	ldr	r3, [r7, #16]
 800cac8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cacc:	4619      	mov	r1, r3
 800cace:	693a      	ldr	r2, [r7, #16]
 800cad0:	2334      	movs	r3, #52	; 0x34
 800cad2:	fb03 f301 	mul.w	r3, r3, r1
 800cad6:	4413      	add	r3, r2
 800cad8:	3392      	adds	r3, #146	; 0x92
 800cada:	781b      	ldrb	r3, [r3, #0]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d00c      	beq.n	800cafa <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800cae0:	693b      	ldr	r3, [r7, #16]
 800cae2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cae6:	4619      	mov	r1, r3
 800cae8:	693a      	ldr	r2, [r7, #16]
 800caea:	2334      	movs	r3, #52	; 0x34
 800caec:	fb03 f301 	mul.w	r3, r3, r1
 800caf0:	4413      	add	r3, r2
 800caf2:	33c1      	adds	r3, #193	; 0xc1
 800caf4:	2201      	movs	r2, #1
 800caf6:	701a      	strb	r2, [r3, #0]
 800caf8:	e00b      	b.n	800cb12 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800cafa:	693b      	ldr	r3, [r7, #16]
 800cafc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cb00:	4619      	mov	r1, r3
 800cb02:	693a      	ldr	r2, [r7, #16]
 800cb04:	2334      	movs	r3, #52	; 0x34
 800cb06:	fb03 f301 	mul.w	r3, r3, r1
 800cb0a:	4413      	add	r3, r2
 800cb0c:	33c1      	adds	r3, #193	; 0xc1
 800cb0e:	2200      	movs	r2, #0
 800cb10:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cb18:	4619      	mov	r1, r3
 800cb1a:	693a      	ldr	r2, [r7, #16]
 800cb1c:	2334      	movs	r3, #52	; 0x34
 800cb1e:	fb03 f301 	mul.w	r3, r3, r1
 800cb22:	4413      	add	r3, r2
 800cb24:	3390      	adds	r3, #144	; 0x90
 800cb26:	2203      	movs	r2, #3
 800cb28:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800cb2a:	693b      	ldr	r3, [r7, #16]
 800cb2c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cb30:	4619      	mov	r1, r3
 800cb32:	693a      	ldr	r2, [r7, #16]
 800cb34:	2334      	movs	r3, #52	; 0x34
 800cb36:	fb03 f301 	mul.w	r3, r3, r1
 800cb3a:	4413      	add	r3, r2
 800cb3c:	3391      	adds	r3, #145	; 0x91
 800cb3e:	2200      	movs	r2, #0
 800cb40:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cb48:	4619      	mov	r1, r3
 800cb4a:	693a      	ldr	r2, [r7, #16]
 800cb4c:	2334      	movs	r3, #52	; 0x34
 800cb4e:	fb03 f301 	mul.w	r3, r3, r1
 800cb52:	4413      	add	r3, r2
 800cb54:	3392      	adds	r3, #146	; 0x92
 800cb56:	2200      	movs	r2, #0
 800cb58:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800cb5a:	7bbb      	ldrb	r3, [r7, #14]
 800cb5c:	2b02      	cmp	r3, #2
 800cb5e:	d14a      	bne.n	800cbf6 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800cb60:	693b      	ldr	r3, [r7, #16]
 800cb62:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cb66:	4619      	mov	r1, r3
 800cb68:	693a      	ldr	r2, [r7, #16]
 800cb6a:	2334      	movs	r3, #52	; 0x34
 800cb6c:	fb03 f301 	mul.w	r3, r3, r1
 800cb70:	4413      	add	r3, r2
 800cb72:	3392      	adds	r3, #146	; 0x92
 800cb74:	781b      	ldrb	r3, [r3, #0]
 800cb76:	2b02      	cmp	r3, #2
 800cb78:	d00c      	beq.n	800cb94 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800cb7a:	693b      	ldr	r3, [r7, #16]
 800cb7c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cb80:	4619      	mov	r1, r3
 800cb82:	693a      	ldr	r2, [r7, #16]
 800cb84:	2334      	movs	r3, #52	; 0x34
 800cb86:	fb03 f301 	mul.w	r3, r3, r1
 800cb8a:	4413      	add	r3, r2
 800cb8c:	33c1      	adds	r3, #193	; 0xc1
 800cb8e:	2201      	movs	r2, #1
 800cb90:	701a      	strb	r2, [r3, #0]
 800cb92:	e00b      	b.n	800cbac <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800cb94:	693b      	ldr	r3, [r7, #16]
 800cb96:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cb9a:	4619      	mov	r1, r3
 800cb9c:	693a      	ldr	r2, [r7, #16]
 800cb9e:	2334      	movs	r3, #52	; 0x34
 800cba0:	fb03 f301 	mul.w	r3, r3, r1
 800cba4:	4413      	add	r3, r2
 800cba6:	33c1      	adds	r3, #193	; 0xc1
 800cba8:	2200      	movs	r2, #0
 800cbaa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800cbac:	693b      	ldr	r3, [r7, #16]
 800cbae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cbb2:	4619      	mov	r1, r3
 800cbb4:	693a      	ldr	r2, [r7, #16]
 800cbb6:	2334      	movs	r3, #52	; 0x34
 800cbb8:	fb03 f301 	mul.w	r3, r3, r1
 800cbbc:	4413      	add	r3, r2
 800cbbe:	3390      	adds	r3, #144	; 0x90
 800cbc0:	2205      	movs	r2, #5
 800cbc2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800cbc4:	693b      	ldr	r3, [r7, #16]
 800cbc6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cbca:	4619      	mov	r1, r3
 800cbcc:	693a      	ldr	r2, [r7, #16]
 800cbce:	2334      	movs	r3, #52	; 0x34
 800cbd0:	fb03 f301 	mul.w	r3, r3, r1
 800cbd4:	4413      	add	r3, r2
 800cbd6:	3391      	adds	r3, #145	; 0x91
 800cbd8:	2201      	movs	r2, #1
 800cbda:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800cbdc:	693b      	ldr	r3, [r7, #16]
 800cbde:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cbe2:	4619      	mov	r1, r3
 800cbe4:	693a      	ldr	r2, [r7, #16]
 800cbe6:	2334      	movs	r3, #52	; 0x34
 800cbe8:	fb03 f301 	mul.w	r3, r3, r1
 800cbec:	4413      	add	r3, r2
 800cbee:	3392      	adds	r3, #146	; 0x92
 800cbf0:	2202      	movs	r2, #2
 800cbf2:	701a      	strb	r2, [r3, #0]
            break;
 800cbf4:	e127      	b.n	800ce46 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800cbf6:	7bbb      	ldrb	r3, [r7, #14]
 800cbf8:	2b04      	cmp	r3, #4
 800cbfa:	f040 8124 	bne.w	800ce46 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800cbfe:	693b      	ldr	r3, [r7, #16]
 800cc00:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cc04:	4619      	mov	r1, r3
 800cc06:	693a      	ldr	r2, [r7, #16]
 800cc08:	2334      	movs	r3, #52	; 0x34
 800cc0a:	fb03 f301 	mul.w	r3, r3, r1
 800cc0e:	4413      	add	r3, r2
 800cc10:	3390      	adds	r3, #144	; 0x90
 800cc12:	2201      	movs	r2, #1
 800cc14:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800cc16:	693b      	ldr	r3, [r7, #16]
 800cc18:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cc1c:	4619      	mov	r1, r3
 800cc1e:	693a      	ldr	r2, [r7, #16]
 800cc20:	2334      	movs	r3, #52	; 0x34
 800cc22:	fb03 f301 	mul.w	r3, r3, r1
 800cc26:	4413      	add	r3, r2
 800cc28:	3391      	adds	r3, #145	; 0x91
 800cc2a:	2202      	movs	r2, #2
 800cc2c:	701a      	strb	r2, [r3, #0]
            break;
 800cc2e:	e10a      	b.n	800ce46 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cc36:	b2d9      	uxtb	r1, r3
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cc3e:	461a      	mov	r2, r3
 800cc40:	2334      	movs	r3, #52	; 0x34
 800cc42:	fb03 f302 	mul.w	r3, r3, r2
 800cc46:	3390      	adds	r3, #144	; 0x90
 800cc48:	693a      	ldr	r2, [r7, #16]
 800cc4a:	4413      	add	r3, r2
 800cc4c:	3304      	adds	r3, #4
 800cc4e:	461a      	mov	r2, r3
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f000 fdf8 	bl	800d846 <USBH_MSC_SCSI_ReadCapacity>
 800cc56:	4603      	mov	r3, r0
 800cc58:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800cc5a:	7bfb      	ldrb	r3, [r7, #15]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d120      	bne.n	800cca2 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800cc60:	693b      	ldr	r3, [r7, #16]
 800cc62:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cc66:	4619      	mov	r1, r3
 800cc68:	693a      	ldr	r2, [r7, #16]
 800cc6a:	2334      	movs	r3, #52	; 0x34
 800cc6c:	fb03 f301 	mul.w	r3, r3, r1
 800cc70:	4413      	add	r3, r2
 800cc72:	3390      	adds	r3, #144	; 0x90
 800cc74:	2201      	movs	r2, #1
 800cc76:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800cc78:	693b      	ldr	r3, [r7, #16]
 800cc7a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cc7e:	4619      	mov	r1, r3
 800cc80:	693a      	ldr	r2, [r7, #16]
 800cc82:	2334      	movs	r3, #52	; 0x34
 800cc84:	fb03 f301 	mul.w	r3, r3, r1
 800cc88:	4413      	add	r3, r2
 800cc8a:	3391      	adds	r3, #145	; 0x91
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800cc90:	693b      	ldr	r3, [r7, #16]
 800cc92:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cc96:	3301      	adds	r3, #1
 800cc98:	b29a      	uxth	r2, r3
 800cc9a:	693b      	ldr	r3, [r7, #16]
 800cc9c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800cca0:	e0d3      	b.n	800ce4a <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800cca2:	7bfb      	ldrb	r3, [r7, #15]
 800cca4:	2b02      	cmp	r3, #2
 800cca6:	d10c      	bne.n	800ccc2 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800cca8:	693b      	ldr	r3, [r7, #16]
 800ccaa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ccae:	4619      	mov	r1, r3
 800ccb0:	693a      	ldr	r2, [r7, #16]
 800ccb2:	2334      	movs	r3, #52	; 0x34
 800ccb4:	fb03 f301 	mul.w	r3, r3, r1
 800ccb8:	4413      	add	r3, r2
 800ccba:	3390      	adds	r3, #144	; 0x90
 800ccbc:	2205      	movs	r2, #5
 800ccbe:	701a      	strb	r2, [r3, #0]
            break;
 800ccc0:	e0c3      	b.n	800ce4a <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800ccc2:	7bfb      	ldrb	r3, [r7, #15]
 800ccc4:	2b04      	cmp	r3, #4
 800ccc6:	f040 80c0 	bne.w	800ce4a <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800ccca:	693b      	ldr	r3, [r7, #16]
 800cccc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ccd0:	4619      	mov	r1, r3
 800ccd2:	693a      	ldr	r2, [r7, #16]
 800ccd4:	2334      	movs	r3, #52	; 0x34
 800ccd6:	fb03 f301 	mul.w	r3, r3, r1
 800ccda:	4413      	add	r3, r2
 800ccdc:	3390      	adds	r3, #144	; 0x90
 800ccde:	2201      	movs	r2, #1
 800cce0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800cce2:	693b      	ldr	r3, [r7, #16]
 800cce4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cce8:	4619      	mov	r1, r3
 800ccea:	693a      	ldr	r2, [r7, #16]
 800ccec:	2334      	movs	r3, #52	; 0x34
 800ccee:	fb03 f301 	mul.w	r3, r3, r1
 800ccf2:	4413      	add	r3, r2
 800ccf4:	3391      	adds	r3, #145	; 0x91
 800ccf6:	2202      	movs	r2, #2
 800ccf8:	701a      	strb	r2, [r3, #0]
            break;
 800ccfa:	e0a6      	b.n	800ce4a <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800ccfc:	693b      	ldr	r3, [r7, #16]
 800ccfe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cd02:	b2d9      	uxtb	r1, r3
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cd0a:	461a      	mov	r2, r3
 800cd0c:	2334      	movs	r3, #52	; 0x34
 800cd0e:	fb03 f302 	mul.w	r3, r3, r2
 800cd12:	3398      	adds	r3, #152	; 0x98
 800cd14:	693a      	ldr	r2, [r7, #16]
 800cd16:	4413      	add	r3, r2
 800cd18:	3304      	adds	r3, #4
 800cd1a:	461a      	mov	r2, r3
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f000 feb2 	bl	800da86 <USBH_MSC_SCSI_RequestSense>
 800cd22:	4603      	mov	r3, r0
 800cd24:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800cd26:	7bfb      	ldrb	r3, [r7, #15]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d145      	bne.n	800cdb8 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800cd2c:	693b      	ldr	r3, [r7, #16]
 800cd2e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cd32:	4619      	mov	r1, r3
 800cd34:	693a      	ldr	r2, [r7, #16]
 800cd36:	2334      	movs	r3, #52	; 0x34
 800cd38:	fb03 f301 	mul.w	r3, r3, r1
 800cd3c:	4413      	add	r3, r2
 800cd3e:	339c      	adds	r3, #156	; 0x9c
 800cd40:	781b      	ldrb	r3, [r3, #0]
 800cd42:	2b06      	cmp	r3, #6
 800cd44:	d00c      	beq.n	800cd60 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800cd46:	693b      	ldr	r3, [r7, #16]
 800cd48:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cd4c:	4619      	mov	r1, r3
 800cd4e:	693a      	ldr	r2, [r7, #16]
 800cd50:	2334      	movs	r3, #52	; 0x34
 800cd52:	fb03 f301 	mul.w	r3, r3, r1
 800cd56:	4413      	add	r3, r2
 800cd58:	339c      	adds	r3, #156	; 0x9c
 800cd5a:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800cd5c:	2b02      	cmp	r3, #2
 800cd5e:	d117      	bne.n	800cd90 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800cd66:	693b      	ldr	r3, [r7, #16]
 800cd68:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800cd6c:	1ad3      	subs	r3, r2, r3
 800cd6e:	f242 720f 	movw	r2, #9999	; 0x270f
 800cd72:	4293      	cmp	r3, r2
 800cd74:	d80c      	bhi.n	800cd90 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800cd76:	693b      	ldr	r3, [r7, #16]
 800cd78:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cd7c:	4619      	mov	r1, r3
 800cd7e:	693a      	ldr	r2, [r7, #16]
 800cd80:	2334      	movs	r3, #52	; 0x34
 800cd82:	fb03 f301 	mul.w	r3, r3, r1
 800cd86:	4413      	add	r3, r2
 800cd88:	3390      	adds	r3, #144	; 0x90
 800cd8a:	2202      	movs	r2, #2
 800cd8c:	701a      	strb	r2, [r3, #0]
                  break;
 800cd8e:	e05f      	b.n	800ce50 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800cd90:	693b      	ldr	r3, [r7, #16]
 800cd92:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cd96:	4619      	mov	r1, r3
 800cd98:	693a      	ldr	r2, [r7, #16]
 800cd9a:	2334      	movs	r3, #52	; 0x34
 800cd9c:	fb03 f301 	mul.w	r3, r3, r1
 800cda0:	4413      	add	r3, r2
 800cda2:	3390      	adds	r3, #144	; 0x90
 800cda4:	2201      	movs	r2, #1
 800cda6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800cda8:	693b      	ldr	r3, [r7, #16]
 800cdaa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cdae:	3301      	adds	r3, #1
 800cdb0:	b29a      	uxth	r2, r3
 800cdb2:	693b      	ldr	r3, [r7, #16]
 800cdb4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800cdb8:	7bfb      	ldrb	r3, [r7, #15]
 800cdba:	2b02      	cmp	r3, #2
 800cdbc:	d10c      	bne.n	800cdd8 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800cdbe:	693b      	ldr	r3, [r7, #16]
 800cdc0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cdc4:	4619      	mov	r1, r3
 800cdc6:	693a      	ldr	r2, [r7, #16]
 800cdc8:	2334      	movs	r3, #52	; 0x34
 800cdca:	fb03 f301 	mul.w	r3, r3, r1
 800cdce:	4413      	add	r3, r2
 800cdd0:	3390      	adds	r3, #144	; 0x90
 800cdd2:	2208      	movs	r2, #8
 800cdd4:	701a      	strb	r2, [r3, #0]
            break;
 800cdd6:	e03a      	b.n	800ce4e <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800cdd8:	7bfb      	ldrb	r3, [r7, #15]
 800cdda:	2b04      	cmp	r3, #4
 800cddc:	d137      	bne.n	800ce4e <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800cdde:	693b      	ldr	r3, [r7, #16]
 800cde0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cde4:	4619      	mov	r1, r3
 800cde6:	693a      	ldr	r2, [r7, #16]
 800cde8:	2334      	movs	r3, #52	; 0x34
 800cdea:	fb03 f301 	mul.w	r3, r3, r1
 800cdee:	4413      	add	r3, r2
 800cdf0:	3390      	adds	r3, #144	; 0x90
 800cdf2:	2201      	movs	r2, #1
 800cdf4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800cdf6:	693b      	ldr	r3, [r7, #16]
 800cdf8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800cdfc:	4619      	mov	r1, r3
 800cdfe:	693a      	ldr	r2, [r7, #16]
 800ce00:	2334      	movs	r3, #52	; 0x34
 800ce02:	fb03 f301 	mul.w	r3, r3, r1
 800ce06:	4413      	add	r3, r2
 800ce08:	3391      	adds	r3, #145	; 0x91
 800ce0a:	2202      	movs	r2, #2
 800ce0c:	701a      	strb	r2, [r3, #0]
            break;
 800ce0e:	e01e      	b.n	800ce4e <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800ce10:	693b      	ldr	r3, [r7, #16]
 800ce12:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ce16:	3301      	adds	r3, #1
 800ce18:	b29a      	uxth	r2, r3
 800ce1a:	693b      	ldr	r3, [r7, #16]
 800ce1c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800ce20:	e016      	b.n	800ce50 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800ce22:	693b      	ldr	r3, [r7, #16]
 800ce24:	2200      	movs	r2, #0
 800ce26:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800ce2a:	693b      	ldr	r3, [r7, #16]
 800ce2c:	2201      	movs	r2, #1
 800ce2e:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ce36:	2102      	movs	r1, #2
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	4798      	blx	r3
      break;
 800ce3c:	e00c      	b.n	800ce58 <USBH_MSC_Process+0x514>
            break;
 800ce3e:	bf00      	nop
 800ce40:	e00a      	b.n	800ce58 <USBH_MSC_Process+0x514>
            break;
 800ce42:	bf00      	nop
 800ce44:	e008      	b.n	800ce58 <USBH_MSC_Process+0x514>
            break;
 800ce46:	bf00      	nop
 800ce48:	e006      	b.n	800ce58 <USBH_MSC_Process+0x514>
            break;
 800ce4a:	bf00      	nop
 800ce4c:	e004      	b.n	800ce58 <USBH_MSC_Process+0x514>
            break;
 800ce4e:	bf00      	nop
      break;
 800ce50:	e002      	b.n	800ce58 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800ce52:	2300      	movs	r3, #0
 800ce54:	75fb      	strb	r3, [r7, #23]
      break;
 800ce56:	bf00      	nop
  }
  return error;
 800ce58:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	3718      	adds	r7, #24
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}
 800ce62:	bf00      	nop

0800ce64 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800ce64:	b480      	push	{r7}
 800ce66:	b083      	sub	sp, #12
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800ce6c:	2300      	movs	r3, #0
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	370c      	adds	r7, #12
 800ce72:	46bd      	mov	sp, r7
 800ce74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce78:	4770      	bx	lr

0800ce7a <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800ce7a:	b580      	push	{r7, lr}
 800ce7c:	b088      	sub	sp, #32
 800ce7e:	af02      	add	r7, sp, #8
 800ce80:	6078      	str	r0, [r7, #4]
 800ce82:	460b      	mov	r3, r1
 800ce84:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ce8c:	69db      	ldr	r3, [r3, #28]
 800ce8e:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800ce90:	2301      	movs	r3, #1
 800ce92:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800ce94:	2301      	movs	r3, #1
 800ce96:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800ce98:	78fb      	ldrb	r3, [r7, #3]
 800ce9a:	693a      	ldr	r2, [r7, #16]
 800ce9c:	2134      	movs	r1, #52	; 0x34
 800ce9e:	fb01 f303 	mul.w	r3, r1, r3
 800cea2:	4413      	add	r3, r2
 800cea4:	3390      	adds	r3, #144	; 0x90
 800cea6:	781b      	ldrb	r3, [r3, #0]
 800cea8:	2b06      	cmp	r3, #6
 800ceaa:	d004      	beq.n	800ceb6 <USBH_MSC_RdWrProcess+0x3c>
 800ceac:	2b07      	cmp	r3, #7
 800ceae:	d037      	beq.n	800cf20 <USBH_MSC_RdWrProcess+0xa6>
 800ceb0:	2b05      	cmp	r3, #5
 800ceb2:	d06a      	beq.n	800cf8a <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
      break;

    default:
      break;
 800ceb4:	e0a6      	b.n	800d004 <USBH_MSC_RdWrProcess+0x18a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800ceb6:	78f9      	ldrb	r1, [r7, #3]
 800ceb8:	2300      	movs	r3, #0
 800ceba:	9300      	str	r3, [sp, #0]
 800cebc:	2300      	movs	r3, #0
 800cebe:	2200      	movs	r2, #0
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f000 fec4 	bl	800dc4e <USBH_MSC_SCSI_Read>
 800cec6:	4603      	mov	r3, r0
 800cec8:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800ceca:	7bfb      	ldrb	r3, [r7, #15]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d10b      	bne.n	800cee8 <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800ced0:	78fb      	ldrb	r3, [r7, #3]
 800ced2:	693a      	ldr	r2, [r7, #16]
 800ced4:	2134      	movs	r1, #52	; 0x34
 800ced6:	fb01 f303 	mul.w	r3, r1, r3
 800ceda:	4413      	add	r3, r2
 800cedc:	3390      	adds	r3, #144	; 0x90
 800cede:	2201      	movs	r2, #1
 800cee0:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800cee2:	2300      	movs	r3, #0
 800cee4:	75fb      	strb	r3, [r7, #23]
      break;
 800cee6:	e088      	b.n	800cffa <USBH_MSC_RdWrProcess+0x180>
      else if (scsi_status == USBH_FAIL)
 800cee8:	7bfb      	ldrb	r3, [r7, #15]
 800ceea:	2b02      	cmp	r3, #2
 800ceec:	d109      	bne.n	800cf02 <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800ceee:	78fb      	ldrb	r3, [r7, #3]
 800cef0:	693a      	ldr	r2, [r7, #16]
 800cef2:	2134      	movs	r1, #52	; 0x34
 800cef4:	fb01 f303 	mul.w	r3, r1, r3
 800cef8:	4413      	add	r3, r2
 800cefa:	3390      	adds	r3, #144	; 0x90
 800cefc:	2205      	movs	r2, #5
 800cefe:	701a      	strb	r2, [r3, #0]
      break;
 800cf00:	e07b      	b.n	800cffa <USBH_MSC_RdWrProcess+0x180>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800cf02:	7bfb      	ldrb	r3, [r7, #15]
 800cf04:	2b04      	cmp	r3, #4
 800cf06:	d178      	bne.n	800cffa <USBH_MSC_RdWrProcess+0x180>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800cf08:	78fb      	ldrb	r3, [r7, #3]
 800cf0a:	693a      	ldr	r2, [r7, #16]
 800cf0c:	2134      	movs	r1, #52	; 0x34
 800cf0e:	fb01 f303 	mul.w	r3, r1, r3
 800cf12:	4413      	add	r3, r2
 800cf14:	3390      	adds	r3, #144	; 0x90
 800cf16:	2208      	movs	r2, #8
 800cf18:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800cf1a:	2302      	movs	r3, #2
 800cf1c:	75fb      	strb	r3, [r7, #23]
      break;
 800cf1e:	e06c      	b.n	800cffa <USBH_MSC_RdWrProcess+0x180>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800cf20:	78f9      	ldrb	r1, [r7, #3]
 800cf22:	2300      	movs	r3, #0
 800cf24:	9300      	str	r3, [sp, #0]
 800cf26:	2300      	movs	r3, #0
 800cf28:	2200      	movs	r2, #0
 800cf2a:	6878      	ldr	r0, [r7, #4]
 800cf2c:	f000 fe24 	bl	800db78 <USBH_MSC_SCSI_Write>
 800cf30:	4603      	mov	r3, r0
 800cf32:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800cf34:	7bfb      	ldrb	r3, [r7, #15]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d10b      	bne.n	800cf52 <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800cf3a:	78fb      	ldrb	r3, [r7, #3]
 800cf3c:	693a      	ldr	r2, [r7, #16]
 800cf3e:	2134      	movs	r1, #52	; 0x34
 800cf40:	fb01 f303 	mul.w	r3, r1, r3
 800cf44:	4413      	add	r3, r2
 800cf46:	3390      	adds	r3, #144	; 0x90
 800cf48:	2201      	movs	r2, #1
 800cf4a:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	75fb      	strb	r3, [r7, #23]
      break;
 800cf50:	e055      	b.n	800cffe <USBH_MSC_RdWrProcess+0x184>
      else if (scsi_status == USBH_FAIL)
 800cf52:	7bfb      	ldrb	r3, [r7, #15]
 800cf54:	2b02      	cmp	r3, #2
 800cf56:	d109      	bne.n	800cf6c <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800cf58:	78fb      	ldrb	r3, [r7, #3]
 800cf5a:	693a      	ldr	r2, [r7, #16]
 800cf5c:	2134      	movs	r1, #52	; 0x34
 800cf5e:	fb01 f303 	mul.w	r3, r1, r3
 800cf62:	4413      	add	r3, r2
 800cf64:	3390      	adds	r3, #144	; 0x90
 800cf66:	2205      	movs	r2, #5
 800cf68:	701a      	strb	r2, [r3, #0]
      break;
 800cf6a:	e048      	b.n	800cffe <USBH_MSC_RdWrProcess+0x184>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800cf6c:	7bfb      	ldrb	r3, [r7, #15]
 800cf6e:	2b04      	cmp	r3, #4
 800cf70:	d145      	bne.n	800cffe <USBH_MSC_RdWrProcess+0x184>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800cf72:	78fb      	ldrb	r3, [r7, #3]
 800cf74:	693a      	ldr	r2, [r7, #16]
 800cf76:	2134      	movs	r1, #52	; 0x34
 800cf78:	fb01 f303 	mul.w	r3, r1, r3
 800cf7c:	4413      	add	r3, r2
 800cf7e:	3390      	adds	r3, #144	; 0x90
 800cf80:	2208      	movs	r2, #8
 800cf82:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800cf84:	2302      	movs	r3, #2
 800cf86:	75fb      	strb	r3, [r7, #23]
      break;
 800cf88:	e039      	b.n	800cffe <USBH_MSC_RdWrProcess+0x184>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800cf8a:	78fb      	ldrb	r3, [r7, #3]
 800cf8c:	2234      	movs	r2, #52	; 0x34
 800cf8e:	fb02 f303 	mul.w	r3, r2, r3
 800cf92:	3398      	adds	r3, #152	; 0x98
 800cf94:	693a      	ldr	r2, [r7, #16]
 800cf96:	4413      	add	r3, r2
 800cf98:	1d1a      	adds	r2, r3, #4
 800cf9a:	78fb      	ldrb	r3, [r7, #3]
 800cf9c:	4619      	mov	r1, r3
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	f000 fd71 	bl	800da86 <USBH_MSC_SCSI_RequestSense>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800cfa8:	7bfb      	ldrb	r3, [r7, #15]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d113      	bne.n	800cfd6 <USBH_MSC_RdWrProcess+0x15c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800cfae:	78fb      	ldrb	r3, [r7, #3]
 800cfb0:	693a      	ldr	r2, [r7, #16]
 800cfb2:	2134      	movs	r1, #52	; 0x34
 800cfb4:	fb01 f303 	mul.w	r3, r1, r3
 800cfb8:	4413      	add	r3, r2
 800cfba:	3390      	adds	r3, #144	; 0x90
 800cfbc:	2201      	movs	r2, #1
 800cfbe:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800cfc0:	78fb      	ldrb	r3, [r7, #3]
 800cfc2:	693a      	ldr	r2, [r7, #16]
 800cfc4:	2134      	movs	r1, #52	; 0x34
 800cfc6:	fb01 f303 	mul.w	r3, r1, r3
 800cfca:	4413      	add	r3, r2
 800cfcc:	3391      	adds	r3, #145	; 0x91
 800cfce:	2202      	movs	r2, #2
 800cfd0:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 800cfd2:	2302      	movs	r3, #2
 800cfd4:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 800cfd6:	7bfb      	ldrb	r3, [r7, #15]
 800cfd8:	2b02      	cmp	r3, #2
 800cfda:	d012      	beq.n	800d002 <USBH_MSC_RdWrProcess+0x188>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800cfdc:	7bfb      	ldrb	r3, [r7, #15]
 800cfde:	2b04      	cmp	r3, #4
 800cfe0:	d10f      	bne.n	800d002 <USBH_MSC_RdWrProcess+0x188>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800cfe2:	78fb      	ldrb	r3, [r7, #3]
 800cfe4:	693a      	ldr	r2, [r7, #16]
 800cfe6:	2134      	movs	r1, #52	; 0x34
 800cfe8:	fb01 f303 	mul.w	r3, r1, r3
 800cfec:	4413      	add	r3, r2
 800cfee:	3390      	adds	r3, #144	; 0x90
 800cff0:	2208      	movs	r2, #8
 800cff2:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800cff4:	2302      	movs	r3, #2
 800cff6:	75fb      	strb	r3, [r7, #23]
      break;
 800cff8:	e003      	b.n	800d002 <USBH_MSC_RdWrProcess+0x188>
      break;
 800cffa:	bf00      	nop
 800cffc:	e002      	b.n	800d004 <USBH_MSC_RdWrProcess+0x18a>
      break;
 800cffe:	bf00      	nop
 800d000:	e000      	b.n	800d004 <USBH_MSC_RdWrProcess+0x18a>
      break;
 800d002:	bf00      	nop

  }
  return error;
 800d004:	7dfb      	ldrb	r3, [r7, #23]
}
 800d006:	4618      	mov	r0, r3
 800d008:	3718      	adds	r7, #24
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}

0800d00e <USBH_MSC_IsReady>:
  *         The function check if the MSC function is ready
  * @param  phost: Host handle
  * @retval USBH Status
  */
uint8_t  USBH_MSC_IsReady(USBH_HandleTypeDef *phost)
{
 800d00e:	b480      	push	{r7}
 800d010:	b085      	sub	sp, #20
 800d012:	af00      	add	r7, sp, #0
 800d014:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d01c:	69db      	ldr	r3, [r3, #28]
 800d01e:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->state == MSC_IDLE))
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	781b      	ldrb	r3, [r3, #0]
 800d024:	b2db      	uxtb	r3, r3
 800d026:	2b0b      	cmp	r3, #11
 800d028:	d106      	bne.n	800d038 <USBH_MSC_IsReady+0x2a>
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	7b1b      	ldrb	r3, [r3, #12]
 800d02e:	2b01      	cmp	r3, #1
 800d030:	d102      	bne.n	800d038 <USBH_MSC_IsReady+0x2a>
  {
    res = 1U;
 800d032:	2301      	movs	r3, #1
 800d034:	73fb      	strb	r3, [r7, #15]
 800d036:	e001      	b.n	800d03c <USBH_MSC_IsReady+0x2e>
  }
  else
  {
    res = 0U;
 800d038:	2300      	movs	r3, #0
 800d03a:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800d03c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3714      	adds	r7, #20
 800d042:	46bd      	mov	sp, r7
 800d044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d048:	4770      	bx	lr

0800d04a <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800d04a:	b480      	push	{r7}
 800d04c:	b085      	sub	sp, #20
 800d04e:	af00      	add	r7, sp, #0
 800d050:	6078      	str	r0, [r7, #4]
 800d052:	460b      	mov	r3, r1
 800d054:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d05c:	69db      	ldr	r3, [r3, #28]
 800d05e:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	781b      	ldrb	r3, [r3, #0]
 800d064:	b2db      	uxtb	r3, r3
 800d066:	2b0b      	cmp	r3, #11
 800d068:	d10c      	bne.n	800d084 <USBH_MSC_UnitIsReady+0x3a>
 800d06a:	78fb      	ldrb	r3, [r7, #3]
 800d06c:	68ba      	ldr	r2, [r7, #8]
 800d06e:	2134      	movs	r1, #52	; 0x34
 800d070:	fb01 f303 	mul.w	r3, r1, r3
 800d074:	4413      	add	r3, r2
 800d076:	3391      	adds	r3, #145	; 0x91
 800d078:	781b      	ldrb	r3, [r3, #0]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d102      	bne.n	800d084 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800d07e:	2301      	movs	r3, #1
 800d080:	73fb      	strb	r3, [r7, #15]
 800d082:	e001      	b.n	800d088 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800d084:	2300      	movs	r3, #0
 800d086:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800d088:	7bfb      	ldrb	r3, [r7, #15]
}
 800d08a:	4618      	mov	r0, r3
 800d08c:	3714      	adds	r7, #20
 800d08e:	46bd      	mov	sp, r7
 800d090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d094:	4770      	bx	lr

0800d096 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800d096:	b580      	push	{r7, lr}
 800d098:	b086      	sub	sp, #24
 800d09a:	af00      	add	r7, sp, #0
 800d09c:	60f8      	str	r0, [r7, #12]
 800d09e:	460b      	mov	r3, r1
 800d0a0:	607a      	str	r2, [r7, #4]
 800d0a2:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d0aa:	69db      	ldr	r3, [r3, #28]
 800d0ac:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	781b      	ldrb	r3, [r3, #0]
 800d0b2:	b2db      	uxtb	r3, r3
 800d0b4:	2b0b      	cmp	r3, #11
 800d0b6:	d10d      	bne.n	800d0d4 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800d0b8:	7afb      	ldrb	r3, [r7, #11]
 800d0ba:	2234      	movs	r2, #52	; 0x34
 800d0bc:	fb02 f303 	mul.w	r3, r2, r3
 800d0c0:	3390      	adds	r3, #144	; 0x90
 800d0c2:	697a      	ldr	r2, [r7, #20]
 800d0c4:	4413      	add	r3, r2
 800d0c6:	2234      	movs	r2, #52	; 0x34
 800d0c8:	4619      	mov	r1, r3
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f005 fb3a 	bl	8012744 <memcpy>
    return USBH_OK;
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	e000      	b.n	800d0d6 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800d0d4:	2302      	movs	r3, #2
  }
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	3718      	adds	r7, #24
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}

0800d0de <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800d0de:	b580      	push	{r7, lr}
 800d0e0:	b088      	sub	sp, #32
 800d0e2:	af02      	add	r7, sp, #8
 800d0e4:	60f8      	str	r0, [r7, #12]
 800d0e6:	607a      	str	r2, [r7, #4]
 800d0e8:	603b      	str	r3, [r7, #0]
 800d0ea:	460b      	mov	r3, r1
 800d0ec:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d0f4:	69db      	ldr	r3, [r3, #28]
 800d0f6:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800d0fe:	b2db      	uxtb	r3, r3
 800d100:	2b00      	cmp	r3, #0
 800d102:	d00e      	beq.n	800d122 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800d10a:	2b0b      	cmp	r3, #11
 800d10c:	d109      	bne.n	800d122 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800d10e:	7afb      	ldrb	r3, [r7, #11]
 800d110:	697a      	ldr	r2, [r7, #20]
 800d112:	2134      	movs	r1, #52	; 0x34
 800d114:	fb01 f303 	mul.w	r3, r1, r3
 800d118:	4413      	add	r3, r2
 800d11a:	3390      	adds	r3, #144	; 0x90
 800d11c:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800d11e:	2b01      	cmp	r3, #1
 800d120:	d001      	beq.n	800d126 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800d122:	2302      	movs	r3, #2
 800d124:	e040      	b.n	800d1a8 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	2206      	movs	r2, #6
 800d12a:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800d12c:	7afb      	ldrb	r3, [r7, #11]
 800d12e:	697a      	ldr	r2, [r7, #20]
 800d130:	2134      	movs	r1, #52	; 0x34
 800d132:	fb01 f303 	mul.w	r3, r1, r3
 800d136:	4413      	add	r3, r2
 800d138:	3390      	adds	r3, #144	; 0x90
 800d13a:	2206      	movs	r2, #6
 800d13c:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800d13e:	7afb      	ldrb	r3, [r7, #11]
 800d140:	b29a      	uxth	r2, r3
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800d148:	7af9      	ldrb	r1, [r7, #11]
 800d14a:	6a3b      	ldr	r3, [r7, #32]
 800d14c:	9300      	str	r3, [sp, #0]
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	687a      	ldr	r2, [r7, #4]
 800d152:	68f8      	ldr	r0, [r7, #12]
 800d154:	f000 fd7b 	bl	800dc4e <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d15e:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800d160:	e016      	b.n	800d190 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800d168:	693b      	ldr	r3, [r7, #16]
 800d16a:	1ad2      	subs	r2, r2, r3
 800d16c:	6a3b      	ldr	r3, [r7, #32]
 800d16e:	f242 7110 	movw	r1, #10000	; 0x2710
 800d172:	fb01 f303 	mul.w	r3, r1, r3
 800d176:	429a      	cmp	r2, r3
 800d178:	d805      	bhi.n	800d186 <USBH_MSC_Read+0xa8>
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800d180:	b2db      	uxtb	r3, r3
 800d182:	2b00      	cmp	r3, #0
 800d184:	d104      	bne.n	800d190 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800d186:	697b      	ldr	r3, [r7, #20]
 800d188:	2201      	movs	r2, #1
 800d18a:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800d18c:	2302      	movs	r3, #2
 800d18e:	e00b      	b.n	800d1a8 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800d190:	7afb      	ldrb	r3, [r7, #11]
 800d192:	4619      	mov	r1, r3
 800d194:	68f8      	ldr	r0, [r7, #12]
 800d196:	f7ff fe70 	bl	800ce7a <USBH_MSC_RdWrProcess>
 800d19a:	4603      	mov	r3, r0
 800d19c:	2b01      	cmp	r3, #1
 800d19e:	d0e0      	beq.n	800d162 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800d1a0:	697b      	ldr	r3, [r7, #20]
 800d1a2:	2201      	movs	r2, #1
 800d1a4:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800d1a6:	2300      	movs	r3, #0
}
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	3718      	adds	r7, #24
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	bd80      	pop	{r7, pc}

0800d1b0 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b088      	sub	sp, #32
 800d1b4:	af02      	add	r7, sp, #8
 800d1b6:	60f8      	str	r0, [r7, #12]
 800d1b8:	607a      	str	r2, [r7, #4]
 800d1ba:	603b      	str	r3, [r7, #0]
 800d1bc:	460b      	mov	r3, r1
 800d1be:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d1c6:	69db      	ldr	r3, [r3, #28]
 800d1c8:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800d1d0:	b2db      	uxtb	r3, r3
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d00e      	beq.n	800d1f4 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	781b      	ldrb	r3, [r3, #0]
 800d1da:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800d1dc:	2b0b      	cmp	r3, #11
 800d1de:	d109      	bne.n	800d1f4 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800d1e0:	7afb      	ldrb	r3, [r7, #11]
 800d1e2:	697a      	ldr	r2, [r7, #20]
 800d1e4:	2134      	movs	r1, #52	; 0x34
 800d1e6:	fb01 f303 	mul.w	r3, r1, r3
 800d1ea:	4413      	add	r3, r2
 800d1ec:	3390      	adds	r3, #144	; 0x90
 800d1ee:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800d1f0:	2b01      	cmp	r3, #1
 800d1f2:	d001      	beq.n	800d1f8 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800d1f4:	2302      	movs	r3, #2
 800d1f6:	e040      	b.n	800d27a <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800d1f8:	697b      	ldr	r3, [r7, #20]
 800d1fa:	2207      	movs	r2, #7
 800d1fc:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800d1fe:	7afb      	ldrb	r3, [r7, #11]
 800d200:	697a      	ldr	r2, [r7, #20]
 800d202:	2134      	movs	r1, #52	; 0x34
 800d204:	fb01 f303 	mul.w	r3, r1, r3
 800d208:	4413      	add	r3, r2
 800d20a:	3390      	adds	r3, #144	; 0x90
 800d20c:	2207      	movs	r2, #7
 800d20e:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800d210:	7afb      	ldrb	r3, [r7, #11]
 800d212:	b29a      	uxth	r2, r3
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800d21a:	7af9      	ldrb	r1, [r7, #11]
 800d21c:	6a3b      	ldr	r3, [r7, #32]
 800d21e:	9300      	str	r3, [sp, #0]
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	687a      	ldr	r2, [r7, #4]
 800d224:	68f8      	ldr	r0, [r7, #12]
 800d226:	f000 fca7 	bl	800db78 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d230:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800d232:	e016      	b.n	800d262 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800d23a:	693b      	ldr	r3, [r7, #16]
 800d23c:	1ad2      	subs	r2, r2, r3
 800d23e:	6a3b      	ldr	r3, [r7, #32]
 800d240:	f242 7110 	movw	r1, #10000	; 0x2710
 800d244:	fb01 f303 	mul.w	r3, r1, r3
 800d248:	429a      	cmp	r2, r3
 800d24a:	d805      	bhi.n	800d258 <USBH_MSC_Write+0xa8>
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800d252:	b2db      	uxtb	r3, r3
 800d254:	2b00      	cmp	r3, #0
 800d256:	d104      	bne.n	800d262 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	2201      	movs	r2, #1
 800d25c:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800d25e:	2302      	movs	r3, #2
 800d260:	e00b      	b.n	800d27a <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800d262:	7afb      	ldrb	r3, [r7, #11]
 800d264:	4619      	mov	r1, r3
 800d266:	68f8      	ldr	r0, [r7, #12]
 800d268:	f7ff fe07 	bl	800ce7a <USBH_MSC_RdWrProcess>
 800d26c:	4603      	mov	r3, r0
 800d26e:	2b01      	cmp	r3, #1
 800d270:	d0e0      	beq.n	800d234 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800d272:	697b      	ldr	r3, [r7, #20]
 800d274:	2201      	movs	r2, #1
 800d276:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800d278:	2300      	movs	r3, #0
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	3718      	adds	r7, #24
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}

0800d282 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800d282:	b580      	push	{r7, lr}
 800d284:	b082      	sub	sp, #8
 800d286:	af00      	add	r7, sp, #0
 800d288:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	2221      	movs	r2, #33	; 0x21
 800d28e:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	22ff      	movs	r2, #255	; 0xff
 800d294:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2200      	movs	r2, #0
 800d29a:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2200      	movs	r2, #0
 800d2a0:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	2100      	movs	r1, #0
 800d2ac:	6878      	ldr	r0, [r7, #4]
 800d2ae:	f001 fdae 	bl	800ee0e <USBH_CtlReq>
 800d2b2:	4603      	mov	r3, r0
}
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	3708      	adds	r7, #8
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}

0800d2bc <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b082      	sub	sp, #8
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
 800d2c4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	22a1      	movs	r2, #161	; 0xa1
 800d2ca:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	22fe      	movs	r2, #254	; 0xfe
 800d2d0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	2201      	movs	r2, #1
 800d2e2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800d2e4:	2201      	movs	r2, #1
 800d2e6:	6839      	ldr	r1, [r7, #0]
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	f001 fd90 	bl	800ee0e <USBH_CtlReq>
 800d2ee:	4603      	mov	r3, r0
}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	3708      	adds	r7, #8
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}

0800d2f8 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800d2f8:	b480      	push	{r7}
 800d2fa:	b085      	sub	sp, #20
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d306:	69db      	ldr	r3, [r3, #28]
 800d308:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	4a09      	ldr	r2, [pc, #36]	; (800d334 <USBH_MSC_BOT_Init+0x3c>)
 800d30e:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	4a09      	ldr	r2, [pc, #36]	; (800d338 <USBH_MSC_BOT_Init+0x40>)
 800d314:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	2201      	movs	r2, #1
 800d31a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	2201      	movs	r2, #1
 800d322:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800d326:	2300      	movs	r3, #0
}
 800d328:	4618      	mov	r0, r3
 800d32a:	3714      	adds	r7, #20
 800d32c:	46bd      	mov	sp, r7
 800d32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d332:	4770      	bx	lr
 800d334:	43425355 	.word	0x43425355
 800d338:	20304050 	.word	0x20304050

0800d33c <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b088      	sub	sp, #32
 800d340:	af02      	add	r7, sp, #8
 800d342:	6078      	str	r0, [r7, #4]
 800d344:	460b      	mov	r3, r1
 800d346:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800d348:	2301      	movs	r3, #1
 800d34a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800d34c:	2301      	movs	r3, #1
 800d34e:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800d350:	2301      	movs	r3, #1
 800d352:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d354:	2300      	movs	r3, #0
 800d356:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d35e:	69db      	ldr	r3, [r3, #28]
 800d360:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800d362:	2300      	movs	r3, #0
 800d364:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800d366:	693b      	ldr	r3, [r7, #16]
 800d368:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d36c:	3b01      	subs	r3, #1
 800d36e:	2b0a      	cmp	r3, #10
 800d370:	f200 81a1 	bhi.w	800d6b6 <USBH_MSC_BOT_Process+0x37a>
 800d374:	a201      	add	r2, pc, #4	; (adr r2, 800d37c <USBH_MSC_BOT_Process+0x40>)
 800d376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d37a:	bf00      	nop
 800d37c:	0800d3a9 	.word	0x0800d3a9
 800d380:	0800d3d3 	.word	0x0800d3d3
 800d384:	0800d43d 	.word	0x0800d43d
 800d388:	0800d45b 	.word	0x0800d45b
 800d38c:	0800d4df 	.word	0x0800d4df
 800d390:	0800d503 	.word	0x0800d503
 800d394:	0800d59d 	.word	0x0800d59d
 800d398:	0800d5b9 	.word	0x0800d5b9
 800d39c:	0800d60b 	.word	0x0800d60b
 800d3a0:	0800d63b 	.word	0x0800d63b
 800d3a4:	0800d69d 	.word	0x0800d69d
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800d3a8:	693b      	ldr	r3, [r7, #16]
 800d3aa:	78fa      	ldrb	r2, [r7, #3]
 800d3ac:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	2202      	movs	r2, #2
 800d3b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	795a      	ldrb	r2, [r3, #5]
 800d3c2:	2301      	movs	r3, #1
 800d3c4:	9300      	str	r3, [sp, #0]
 800d3c6:	4613      	mov	r3, r2
 800d3c8:	221f      	movs	r2, #31
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f001 ff2f 	bl	800f22e <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800d3d0:	e180      	b.n	800d6d4 <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800d3d2:	693b      	ldr	r3, [r7, #16]
 800d3d4:	795b      	ldrb	r3, [r3, #5]
 800d3d6:	4619      	mov	r1, r3
 800d3d8:	6878      	ldr	r0, [r7, #4]
 800d3da:	f005 f84b 	bl	8012474 <USBH_LL_GetURBState>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800d3e2:	7d3b      	ldrb	r3, [r7, #20]
 800d3e4:	2b01      	cmp	r3, #1
 800d3e6:	d118      	bne.n	800d41a <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800d3e8:	693b      	ldr	r3, [r7, #16]
 800d3ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d00f      	beq.n	800d410 <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800d3f0:	693b      	ldr	r3, [r7, #16]
 800d3f2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800d3f6:	b25b      	sxtb	r3, r3
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	da04      	bge.n	800d406 <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800d3fc:	693b      	ldr	r3, [r7, #16]
 800d3fe:	2203      	movs	r2, #3
 800d400:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d404:	e159      	b.n	800d6ba <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800d406:	693b      	ldr	r3, [r7, #16]
 800d408:	2205      	movs	r2, #5
 800d40a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800d40e:	e154      	b.n	800d6ba <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800d410:	693b      	ldr	r3, [r7, #16]
 800d412:	2207      	movs	r2, #7
 800d414:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800d418:	e14f      	b.n	800d6ba <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d41a:	7d3b      	ldrb	r3, [r7, #20]
 800d41c:	2b02      	cmp	r3, #2
 800d41e:	d104      	bne.n	800d42a <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d420:	693b      	ldr	r3, [r7, #16]
 800d422:	2201      	movs	r2, #1
 800d424:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800d428:	e147      	b.n	800d6ba <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 800d42a:	7d3b      	ldrb	r3, [r7, #20]
 800d42c:	2b05      	cmp	r3, #5
 800d42e:	f040 8144 	bne.w	800d6ba <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800d432:	693b      	ldr	r3, [r7, #16]
 800d434:	220a      	movs	r2, #10
 800d436:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800d43a:	e13e      	b.n	800d6ba <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800d43c:	693b      	ldr	r3, [r7, #16]
 800d43e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800d442:	693b      	ldr	r3, [r7, #16]
 800d444:	895a      	ldrh	r2, [r3, #10]
 800d446:	693b      	ldr	r3, [r7, #16]
 800d448:	791b      	ldrb	r3, [r3, #4]
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	f001 ff14 	bl	800f278 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800d450:	693b      	ldr	r3, [r7, #16]
 800d452:	2204      	movs	r2, #4
 800d454:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800d458:	e13c      	b.n	800d6d4 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800d45a:	693b      	ldr	r3, [r7, #16]
 800d45c:	791b      	ldrb	r3, [r3, #4]
 800d45e:	4619      	mov	r1, r3
 800d460:	6878      	ldr	r0, [r7, #4]
 800d462:	f005 f807 	bl	8012474 <USBH_LL_GetURBState>
 800d466:	4603      	mov	r3, r0
 800d468:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800d46a:	7d3b      	ldrb	r3, [r7, #20]
 800d46c:	2b01      	cmp	r3, #1
 800d46e:	d12d      	bne.n	800d4cc <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800d470:	693b      	ldr	r3, [r7, #16]
 800d472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d474:	693a      	ldr	r2, [r7, #16]
 800d476:	8952      	ldrh	r2, [r2, #10]
 800d478:	4293      	cmp	r3, r2
 800d47a:	d910      	bls.n	800d49e <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800d47c:	693b      	ldr	r3, [r7, #16]
 800d47e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d482:	693a      	ldr	r2, [r7, #16]
 800d484:	8952      	ldrh	r2, [r2, #10]
 800d486:	441a      	add	r2, r3
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800d48e:	693b      	ldr	r3, [r7, #16]
 800d490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d492:	693a      	ldr	r2, [r7, #16]
 800d494:	8952      	ldrh	r2, [r2, #10]
 800d496:	1a9a      	subs	r2, r3, r2
 800d498:	693b      	ldr	r3, [r7, #16]
 800d49a:	65da      	str	r2, [r3, #92]	; 0x5c
 800d49c:	e002      	b.n	800d4a4 <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800d49e:	693b      	ldr	r3, [r7, #16]
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800d4a4:	693b      	ldr	r3, [r7, #16]
 800d4a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d00a      	beq.n	800d4c2 <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800d4ac:	693b      	ldr	r3, [r7, #16]
 800d4ae:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800d4b2:	693b      	ldr	r3, [r7, #16]
 800d4b4:	895a      	ldrh	r2, [r3, #10]
 800d4b6:	693b      	ldr	r3, [r7, #16]
 800d4b8:	791b      	ldrb	r3, [r3, #4]
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	f001 fedc 	bl	800f278 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800d4c0:	e0fd      	b.n	800d6be <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800d4c2:	693b      	ldr	r3, [r7, #16]
 800d4c4:	2207      	movs	r2, #7
 800d4c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800d4ca:	e0f8      	b.n	800d6be <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 800d4cc:	7d3b      	ldrb	r3, [r7, #20]
 800d4ce:	2b05      	cmp	r3, #5
 800d4d0:	f040 80f5 	bne.w	800d6be <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800d4d4:	693b      	ldr	r3, [r7, #16]
 800d4d6:	2209      	movs	r2, #9
 800d4d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800d4dc:	e0ef      	b.n	800d6be <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800d4de:	693b      	ldr	r3, [r7, #16]
 800d4e0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800d4e4:	693b      	ldr	r3, [r7, #16]
 800d4e6:	891a      	ldrh	r2, [r3, #8]
 800d4e8:	693b      	ldr	r3, [r7, #16]
 800d4ea:	7958      	ldrb	r0, [r3, #5]
 800d4ec:	2301      	movs	r3, #1
 800d4ee:	9300      	str	r3, [sp, #0]
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	f001 fe9b 	bl	800f22e <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800d4f8:	693b      	ldr	r3, [r7, #16]
 800d4fa:	2206      	movs	r2, #6
 800d4fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800d500:	e0e8      	b.n	800d6d4 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	795b      	ldrb	r3, [r3, #5]
 800d506:	4619      	mov	r1, r3
 800d508:	6878      	ldr	r0, [r7, #4]
 800d50a:	f004 ffb3 	bl	8012474 <USBH_LL_GetURBState>
 800d50e:	4603      	mov	r3, r0
 800d510:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800d512:	7d3b      	ldrb	r3, [r7, #20]
 800d514:	2b01      	cmp	r3, #1
 800d516:	d130      	bne.n	800d57a <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800d518:	693b      	ldr	r3, [r7, #16]
 800d51a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d51c:	693a      	ldr	r2, [r7, #16]
 800d51e:	8912      	ldrh	r2, [r2, #8]
 800d520:	4293      	cmp	r3, r2
 800d522:	d910      	bls.n	800d546 <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800d524:	693b      	ldr	r3, [r7, #16]
 800d526:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d52a:	693a      	ldr	r2, [r7, #16]
 800d52c:	8912      	ldrh	r2, [r2, #8]
 800d52e:	441a      	add	r2, r3
 800d530:	693b      	ldr	r3, [r7, #16]
 800d532:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800d536:	693b      	ldr	r3, [r7, #16]
 800d538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d53a:	693a      	ldr	r2, [r7, #16]
 800d53c:	8912      	ldrh	r2, [r2, #8]
 800d53e:	1a9a      	subs	r2, r3, r2
 800d540:	693b      	ldr	r3, [r7, #16]
 800d542:	65da      	str	r2, [r3, #92]	; 0x5c
 800d544:	e002      	b.n	800d54c <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800d546:	693b      	ldr	r3, [r7, #16]
 800d548:	2200      	movs	r2, #0
 800d54a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800d54c:	693b      	ldr	r3, [r7, #16]
 800d54e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d550:	2b00      	cmp	r3, #0
 800d552:	d00d      	beq.n	800d570 <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800d554:	693b      	ldr	r3, [r7, #16]
 800d556:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800d55a:	693b      	ldr	r3, [r7, #16]
 800d55c:	891a      	ldrh	r2, [r3, #8]
 800d55e:	693b      	ldr	r3, [r7, #16]
 800d560:	7958      	ldrb	r0, [r3, #5]
 800d562:	2301      	movs	r3, #1
 800d564:	9300      	str	r3, [sp, #0]
 800d566:	4603      	mov	r3, r0
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f001 fe60 	bl	800f22e <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800d56e:	e0a8      	b.n	800d6c2 <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800d570:	693b      	ldr	r3, [r7, #16]
 800d572:	2207      	movs	r2, #7
 800d574:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800d578:	e0a3      	b.n	800d6c2 <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d57a:	7d3b      	ldrb	r3, [r7, #20]
 800d57c:	2b02      	cmp	r3, #2
 800d57e:	d104      	bne.n	800d58a <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800d580:	693b      	ldr	r3, [r7, #16]
 800d582:	2205      	movs	r2, #5
 800d584:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800d588:	e09b      	b.n	800d6c2 <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 800d58a:	7d3b      	ldrb	r3, [r7, #20]
 800d58c:	2b05      	cmp	r3, #5
 800d58e:	f040 8098 	bne.w	800d6c2 <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800d592:	693b      	ldr	r3, [r7, #16]
 800d594:	220a      	movs	r2, #10
 800d596:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800d59a:	e092      	b.n	800d6c2 <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800d59c:	693b      	ldr	r3, [r7, #16]
 800d59e:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800d5a2:	693b      	ldr	r3, [r7, #16]
 800d5a4:	791b      	ldrb	r3, [r3, #4]
 800d5a6:	220d      	movs	r2, #13
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	f001 fe65 	bl	800f278 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800d5ae:	693b      	ldr	r3, [r7, #16]
 800d5b0:	2208      	movs	r2, #8
 800d5b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800d5b6:	e08d      	b.n	800d6d4 <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800d5b8:	693b      	ldr	r3, [r7, #16]
 800d5ba:	791b      	ldrb	r3, [r3, #4]
 800d5bc:	4619      	mov	r1, r3
 800d5be:	6878      	ldr	r0, [r7, #4]
 800d5c0:	f004 ff58 	bl	8012474 <USBH_LL_GetURBState>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800d5c8:	7d3b      	ldrb	r3, [r7, #20]
 800d5ca:	2b01      	cmp	r3, #1
 800d5cc:	d115      	bne.n	800d5fa <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d5ce:	693b      	ldr	r3, [r7, #16]
 800d5d0:	2201      	movs	r2, #1
 800d5d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800d5d6:	693b      	ldr	r3, [r7, #16]
 800d5d8:	2201      	movs	r2, #1
 800d5da:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	f000 f8aa 	bl	800d738 <USBH_MSC_DecodeCSW>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800d5e8:	7d7b      	ldrb	r3, [r7, #21]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d102      	bne.n	800d5f4 <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800d5f2:	e068      	b.n	800d6c6 <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 800d5f4:	2302      	movs	r3, #2
 800d5f6:	75fb      	strb	r3, [r7, #23]
      break;
 800d5f8:	e065      	b.n	800d6c6 <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 800d5fa:	7d3b      	ldrb	r3, [r7, #20]
 800d5fc:	2b05      	cmp	r3, #5
 800d5fe:	d162      	bne.n	800d6c6 <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800d600:	693b      	ldr	r3, [r7, #16]
 800d602:	2209      	movs	r2, #9
 800d604:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800d608:	e05d      	b.n	800d6c6 <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800d60a:	78fb      	ldrb	r3, [r7, #3]
 800d60c:	2200      	movs	r2, #0
 800d60e:	4619      	mov	r1, r3
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	f000 f865 	bl	800d6e0 <USBH_MSC_BOT_Abort>
 800d616:	4603      	mov	r3, r0
 800d618:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800d61a:	7dbb      	ldrb	r3, [r7, #22]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d104      	bne.n	800d62a <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800d620:	693b      	ldr	r3, [r7, #16]
 800d622:	2207      	movs	r2, #7
 800d624:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800d628:	e04f      	b.n	800d6ca <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 800d62a:	7dbb      	ldrb	r3, [r7, #22]
 800d62c:	2b04      	cmp	r3, #4
 800d62e:	d14c      	bne.n	800d6ca <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800d630:	693b      	ldr	r3, [r7, #16]
 800d632:	220b      	movs	r2, #11
 800d634:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800d638:	e047      	b.n	800d6ca <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800d63a:	78fb      	ldrb	r3, [r7, #3]
 800d63c:	2201      	movs	r2, #1
 800d63e:	4619      	mov	r1, r3
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f000 f84d 	bl	800d6e0 <USBH_MSC_BOT_Abort>
 800d646:	4603      	mov	r3, r0
 800d648:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800d64a:	7dbb      	ldrb	r3, [r7, #22]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d11d      	bne.n	800d68c <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800d650:	693b      	ldr	r3, [r7, #16]
 800d652:	795b      	ldrb	r3, [r3, #5]
 800d654:	4619      	mov	r1, r3
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f004 ff69 	bl	801252e <USBH_LL_GetToggle>
 800d65c:	4603      	mov	r3, r0
 800d65e:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800d660:	693b      	ldr	r3, [r7, #16]
 800d662:	7959      	ldrb	r1, [r3, #5]
 800d664:	7bfb      	ldrb	r3, [r7, #15]
 800d666:	f1c3 0301 	rsb	r3, r3, #1
 800d66a:	b2db      	uxtb	r3, r3
 800d66c:	461a      	mov	r2, r3
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	f004 ff2a 	bl	80124c8 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800d674:	693b      	ldr	r3, [r7, #16]
 800d676:	791b      	ldrb	r3, [r3, #4]
 800d678:	2200      	movs	r2, #0
 800d67a:	4619      	mov	r1, r3
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f004 ff23 	bl	80124c8 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800d682:	693b      	ldr	r3, [r7, #16]
 800d684:	2209      	movs	r2, #9
 800d686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800d68a:	e020      	b.n	800d6ce <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 800d68c:	7dbb      	ldrb	r3, [r7, #22]
 800d68e:	2b04      	cmp	r3, #4
 800d690:	d11d      	bne.n	800d6ce <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800d692:	693b      	ldr	r3, [r7, #16]
 800d694:	220b      	movs	r2, #11
 800d696:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800d69a:	e018      	b.n	800d6ce <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f7ff fdf0 	bl	800d282 <USBH_MSC_BOT_REQ_Reset>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800d6a6:	7dfb      	ldrb	r3, [r7, #23]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d112      	bne.n	800d6d2 <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d6ac:	693b      	ldr	r3, [r7, #16]
 800d6ae:	2201      	movs	r2, #1
 800d6b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800d6b4:	e00d      	b.n	800d6d2 <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 800d6b6:	bf00      	nop
 800d6b8:	e00c      	b.n	800d6d4 <USBH_MSC_BOT_Process+0x398>
      break;
 800d6ba:	bf00      	nop
 800d6bc:	e00a      	b.n	800d6d4 <USBH_MSC_BOT_Process+0x398>
      break;
 800d6be:	bf00      	nop
 800d6c0:	e008      	b.n	800d6d4 <USBH_MSC_BOT_Process+0x398>
      break;
 800d6c2:	bf00      	nop
 800d6c4:	e006      	b.n	800d6d4 <USBH_MSC_BOT_Process+0x398>
      break;
 800d6c6:	bf00      	nop
 800d6c8:	e004      	b.n	800d6d4 <USBH_MSC_BOT_Process+0x398>
      break;
 800d6ca:	bf00      	nop
 800d6cc:	e002      	b.n	800d6d4 <USBH_MSC_BOT_Process+0x398>
      break;
 800d6ce:	bf00      	nop
 800d6d0:	e000      	b.n	800d6d4 <USBH_MSC_BOT_Process+0x398>
      break;
 800d6d2:	bf00      	nop
  }
  return status;
 800d6d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	3718      	adds	r7, #24
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}
 800d6de:	bf00      	nop

0800d6e0 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b084      	sub	sp, #16
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
 800d6e8:	460b      	mov	r3, r1
 800d6ea:	70fb      	strb	r3, [r7, #3]
 800d6ec:	4613      	mov	r3, r2
 800d6ee:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800d6f0:	2302      	movs	r3, #2
 800d6f2:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d6fa:	69db      	ldr	r3, [r3, #28]
 800d6fc:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800d6fe:	78bb      	ldrb	r3, [r7, #2]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d002      	beq.n	800d70a <USBH_MSC_BOT_Abort+0x2a>
 800d704:	2b01      	cmp	r3, #1
 800d706:	d009      	beq.n	800d71c <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800d708:	e011      	b.n	800d72e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	79db      	ldrb	r3, [r3, #7]
 800d70e:	4619      	mov	r1, r3
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f001 f99c 	bl	800ea4e <USBH_ClrFeature>
 800d716:	4603      	mov	r3, r0
 800d718:	73fb      	strb	r3, [r7, #15]
      break;
 800d71a:	e008      	b.n	800d72e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	799b      	ldrb	r3, [r3, #6]
 800d720:	4619      	mov	r1, r3
 800d722:	6878      	ldr	r0, [r7, #4]
 800d724:	f001 f993 	bl	800ea4e <USBH_ClrFeature>
 800d728:	4603      	mov	r3, r0
 800d72a:	73fb      	strb	r3, [r7, #15]
      break;
 800d72c:	bf00      	nop
  }
  return status;
 800d72e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d730:	4618      	mov	r0, r3
 800d732:	3710      	adds	r7, #16
 800d734:	46bd      	mov	sp, r7
 800d736:	bd80      	pop	{r7, pc}

0800d738 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b084      	sub	sp, #16
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d746:	69db      	ldr	r3, [r3, #28]
 800d748:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800d74a:	2301      	movs	r3, #1
 800d74c:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	791b      	ldrb	r3, [r3, #4]
 800d752:	4619      	mov	r1, r3
 800d754:	6878      	ldr	r0, [r7, #4]
 800d756:	f004 fdfb 	bl	8012350 <USBH_LL_GetLastXferSize>
 800d75a:	4603      	mov	r3, r0
 800d75c:	2b0d      	cmp	r3, #13
 800d75e:	d002      	beq.n	800d766 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800d760:	2302      	movs	r3, #2
 800d762:	73fb      	strb	r3, [r7, #15]
 800d764:	e024      	b.n	800d7b0 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d76a:	4a14      	ldr	r2, [pc, #80]	; (800d7bc <USBH_MSC_DecodeCSW+0x84>)
 800d76c:	4293      	cmp	r3, r2
 800d76e:	d11d      	bne.n	800d7ac <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d778:	429a      	cmp	r2, r3
 800d77a:	d119      	bne.n	800d7b0 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800d77c:	68bb      	ldr	r3, [r7, #8]
 800d77e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d782:	2b00      	cmp	r3, #0
 800d784:	d102      	bne.n	800d78c <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800d786:	2300      	movs	r3, #0
 800d788:	73fb      	strb	r3, [r7, #15]
 800d78a:	e011      	b.n	800d7b0 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800d78c:	68bb      	ldr	r3, [r7, #8]
 800d78e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d792:	2b01      	cmp	r3, #1
 800d794:	d102      	bne.n	800d79c <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800d796:	2301      	movs	r3, #1
 800d798:	73fb      	strb	r3, [r7, #15]
 800d79a:	e009      	b.n	800d7b0 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800d79c:	68bb      	ldr	r3, [r7, #8]
 800d79e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d7a2:	2b02      	cmp	r3, #2
 800d7a4:	d104      	bne.n	800d7b0 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800d7a6:	2302      	movs	r3, #2
 800d7a8:	73fb      	strb	r3, [r7, #15]
 800d7aa:	e001      	b.n	800d7b0 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800d7ac:	2302      	movs	r3, #2
 800d7ae:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800d7b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3710      	adds	r7, #16
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}
 800d7ba:	bf00      	nop
 800d7bc:	53425355 	.word	0x53425355

0800d7c0 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b084      	sub	sp, #16
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
 800d7c8:	460b      	mov	r3, r1
 800d7ca:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800d7cc:	2302      	movs	r3, #2
 800d7ce:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d7d6:	69db      	ldr	r3, [r3, #28]
 800d7d8:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d7e0:	2b01      	cmp	r3, #1
 800d7e2:	d002      	beq.n	800d7ea <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800d7e4:	2b02      	cmp	r3, #2
 800d7e6:	d021      	beq.n	800d82c <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800d7e8:	e028      	b.n	800d83c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	220a      	movs	r2, #10
 800d7fc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800d800:	68bb      	ldr	r3, [r7, #8]
 800d802:	3363      	adds	r3, #99	; 0x63
 800d804:	2210      	movs	r2, #16
 800d806:	2100      	movs	r1, #0
 800d808:	4618      	mov	r0, r3
 800d80a:	f004 ffbf 	bl	801278c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800d80e:	68bb      	ldr	r3, [r7, #8]
 800d810:	2200      	movs	r2, #0
 800d812:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	2201      	movs	r2, #1
 800d81a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	2202      	movs	r2, #2
 800d822:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800d826:	2301      	movs	r3, #1
 800d828:	73fb      	strb	r3, [r7, #15]
      break;
 800d82a:	e007      	b.n	800d83c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800d82c:	78fb      	ldrb	r3, [r7, #3]
 800d82e:	4619      	mov	r1, r3
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f7ff fd83 	bl	800d33c <USBH_MSC_BOT_Process>
 800d836:	4603      	mov	r3, r0
 800d838:	73fb      	strb	r3, [r7, #15]
      break;
 800d83a:	bf00      	nop
  }

  return error;
 800d83c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d83e:	4618      	mov	r0, r3
 800d840:	3710      	adds	r7, #16
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}

0800d846 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800d846:	b580      	push	{r7, lr}
 800d848:	b086      	sub	sp, #24
 800d84a:	af00      	add	r7, sp, #0
 800d84c:	60f8      	str	r0, [r7, #12]
 800d84e:	460b      	mov	r3, r1
 800d850:	607a      	str	r2, [r7, #4]
 800d852:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800d854:	2301      	movs	r3, #1
 800d856:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d85e:	69db      	ldr	r3, [r3, #28]
 800d860:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800d862:	693b      	ldr	r3, [r7, #16]
 800d864:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d868:	2b01      	cmp	r3, #1
 800d86a:	d002      	beq.n	800d872 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800d86c:	2b02      	cmp	r3, #2
 800d86e:	d027      	beq.n	800d8c0 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800d870:	e05f      	b.n	800d932 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800d872:	693b      	ldr	r3, [r7, #16]
 800d874:	2208      	movs	r2, #8
 800d876:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800d878:	693b      	ldr	r3, [r7, #16]
 800d87a:	2280      	movs	r2, #128	; 0x80
 800d87c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800d880:	693b      	ldr	r3, [r7, #16]
 800d882:	220a      	movs	r2, #10
 800d884:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800d888:	693b      	ldr	r3, [r7, #16]
 800d88a:	3363      	adds	r3, #99	; 0x63
 800d88c:	2210      	movs	r2, #16
 800d88e:	2100      	movs	r1, #0
 800d890:	4618      	mov	r0, r3
 800d892:	f004 ff7b 	bl	801278c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800d896:	693b      	ldr	r3, [r7, #16]
 800d898:	2225      	movs	r2, #37	; 0x25
 800d89a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d89e:	693b      	ldr	r3, [r7, #16]
 800d8a0:	2201      	movs	r2, #1
 800d8a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	2202      	movs	r2, #2
 800d8aa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800d8ae:	693b      	ldr	r3, [r7, #16]
 800d8b0:	f103 0210 	add.w	r2, r3, #16
 800d8b4:	693b      	ldr	r3, [r7, #16]
 800d8b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	75fb      	strb	r3, [r7, #23]
      break;
 800d8be:	e038      	b.n	800d932 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800d8c0:	7afb      	ldrb	r3, [r7, #11]
 800d8c2:	4619      	mov	r1, r3
 800d8c4:	68f8      	ldr	r0, [r7, #12]
 800d8c6:	f7ff fd39 	bl	800d33c <USBH_MSC_BOT_Process>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800d8ce:	7dfb      	ldrb	r3, [r7, #23]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d12d      	bne.n	800d930 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800d8d4:	693b      	ldr	r3, [r7, #16]
 800d8d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8da:	3303      	adds	r3, #3
 800d8dc:	781b      	ldrb	r3, [r3, #0]
 800d8de:	461a      	mov	r2, r3
 800d8e0:	693b      	ldr	r3, [r7, #16]
 800d8e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8e6:	3302      	adds	r3, #2
 800d8e8:	781b      	ldrb	r3, [r3, #0]
 800d8ea:	021b      	lsls	r3, r3, #8
 800d8ec:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800d8ee:	693b      	ldr	r3, [r7, #16]
 800d8f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8f4:	3301      	adds	r3, #1
 800d8f6:	781b      	ldrb	r3, [r3, #0]
 800d8f8:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800d8fa:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800d8fc:	693b      	ldr	r3, [r7, #16]
 800d8fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d902:	781b      	ldrb	r3, [r3, #0]
 800d904:	061b      	lsls	r3, r3, #24
 800d906:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800d90c:	693b      	ldr	r3, [r7, #16]
 800d90e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d912:	3307      	adds	r3, #7
 800d914:	781b      	ldrb	r3, [r3, #0]
 800d916:	b29a      	uxth	r2, r3
 800d918:	693b      	ldr	r3, [r7, #16]
 800d91a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d91e:	3306      	adds	r3, #6
 800d920:	781b      	ldrb	r3, [r3, #0]
 800d922:	b29b      	uxth	r3, r3
 800d924:	021b      	lsls	r3, r3, #8
 800d926:	b29b      	uxth	r3, r3
 800d928:	4313      	orrs	r3, r2
 800d92a:	b29a      	uxth	r2, r3
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	809a      	strh	r2, [r3, #4]
      break;
 800d930:	bf00      	nop
  }

  return error;
 800d932:	7dfb      	ldrb	r3, [r7, #23]
}
 800d934:	4618      	mov	r0, r3
 800d936:	3718      	adds	r7, #24
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}

0800d93c <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b086      	sub	sp, #24
 800d940:	af00      	add	r7, sp, #0
 800d942:	60f8      	str	r0, [r7, #12]
 800d944:	460b      	mov	r3, r1
 800d946:	607a      	str	r2, [r7, #4]
 800d948:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800d94a:	2302      	movs	r3, #2
 800d94c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d954:	69db      	ldr	r3, [r3, #28]
 800d956:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800d958:	693b      	ldr	r3, [r7, #16]
 800d95a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d95e:	2b01      	cmp	r3, #1
 800d960:	d002      	beq.n	800d968 <USBH_MSC_SCSI_Inquiry+0x2c>
 800d962:	2b02      	cmp	r3, #2
 800d964:	d03d      	beq.n	800d9e2 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800d966:	e089      	b.n	800da7c <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800d968:	693b      	ldr	r3, [r7, #16]
 800d96a:	2224      	movs	r2, #36	; 0x24
 800d96c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800d96e:	693b      	ldr	r3, [r7, #16]
 800d970:	2280      	movs	r2, #128	; 0x80
 800d972:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800d976:	693b      	ldr	r3, [r7, #16]
 800d978:	220a      	movs	r2, #10
 800d97a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800d97e:	693b      	ldr	r3, [r7, #16]
 800d980:	3363      	adds	r3, #99	; 0x63
 800d982:	220a      	movs	r2, #10
 800d984:	2100      	movs	r1, #0
 800d986:	4618      	mov	r0, r3
 800d988:	f004 ff00 	bl	801278c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800d98c:	693b      	ldr	r3, [r7, #16]
 800d98e:	2212      	movs	r2, #18
 800d990:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800d994:	7afb      	ldrb	r3, [r7, #11]
 800d996:	015b      	lsls	r3, r3, #5
 800d998:	b2da      	uxtb	r2, r3
 800d99a:	693b      	ldr	r3, [r7, #16]
 800d99c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800d9a0:	693b      	ldr	r3, [r7, #16]
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800d9a8:	693b      	ldr	r3, [r7, #16]
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800d9b0:	693b      	ldr	r3, [r7, #16]
 800d9b2:	2224      	movs	r2, #36	; 0x24
 800d9b4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d9c0:	693b      	ldr	r3, [r7, #16]
 800d9c2:	2201      	movs	r2, #1
 800d9c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800d9c8:	693b      	ldr	r3, [r7, #16]
 800d9ca:	2202      	movs	r2, #2
 800d9cc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800d9d0:	693b      	ldr	r3, [r7, #16]
 800d9d2:	f103 0210 	add.w	r2, r3, #16
 800d9d6:	693b      	ldr	r3, [r7, #16]
 800d9d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800d9dc:	2301      	movs	r3, #1
 800d9de:	75fb      	strb	r3, [r7, #23]
      break;
 800d9e0:	e04c      	b.n	800da7c <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800d9e2:	7afb      	ldrb	r3, [r7, #11]
 800d9e4:	4619      	mov	r1, r3
 800d9e6:	68f8      	ldr	r0, [r7, #12]
 800d9e8:	f7ff fca8 	bl	800d33c <USBH_MSC_BOT_Process>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800d9f0:	7dfb      	ldrb	r3, [r7, #23]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d141      	bne.n	800da7a <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800d9f6:	2222      	movs	r2, #34	; 0x22
 800d9f8:	2100      	movs	r1, #0
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f004 fec6 	bl	801278c <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800da00:	693b      	ldr	r3, [r7, #16]
 800da02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da06:	781b      	ldrb	r3, [r3, #0]
 800da08:	f003 031f 	and.w	r3, r3, #31
 800da0c:	b2da      	uxtb	r2, r3
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800da12:	693b      	ldr	r3, [r7, #16]
 800da14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da18:	781b      	ldrb	r3, [r3, #0]
 800da1a:	095b      	lsrs	r3, r3, #5
 800da1c:	b2da      	uxtb	r2, r3
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800da22:	693b      	ldr	r3, [r7, #16]
 800da24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da28:	3301      	adds	r3, #1
 800da2a:	781b      	ldrb	r3, [r3, #0]
 800da2c:	b25b      	sxtb	r3, r3
 800da2e:	2b00      	cmp	r3, #0
 800da30:	da03      	bge.n	800da3a <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	2201      	movs	r2, #1
 800da36:	709a      	strb	r2, [r3, #2]
 800da38:	e002      	b.n	800da40 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	2200      	movs	r2, #0
 800da3e:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	1cd8      	adds	r0, r3, #3
 800da44:	693b      	ldr	r3, [r7, #16]
 800da46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da4a:	3308      	adds	r3, #8
 800da4c:	2208      	movs	r2, #8
 800da4e:	4619      	mov	r1, r3
 800da50:	f004 fe78 	bl	8012744 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f103 000c 	add.w	r0, r3, #12
 800da5a:	693b      	ldr	r3, [r7, #16]
 800da5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da60:	3310      	adds	r3, #16
 800da62:	2210      	movs	r2, #16
 800da64:	4619      	mov	r1, r3
 800da66:	f004 fe6d 	bl	8012744 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	331d      	adds	r3, #29
 800da6e:	693a      	ldr	r2, [r7, #16]
 800da70:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800da74:	3220      	adds	r2, #32
 800da76:	6812      	ldr	r2, [r2, #0]
 800da78:	601a      	str	r2, [r3, #0]
      break;
 800da7a:	bf00      	nop
  }

  return error;
 800da7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800da7e:	4618      	mov	r0, r3
 800da80:	3718      	adds	r7, #24
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}

0800da86 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800da86:	b580      	push	{r7, lr}
 800da88:	b086      	sub	sp, #24
 800da8a:	af00      	add	r7, sp, #0
 800da8c:	60f8      	str	r0, [r7, #12]
 800da8e:	460b      	mov	r3, r1
 800da90:	607a      	str	r2, [r7, #4]
 800da92:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800da94:	2302      	movs	r3, #2
 800da96:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800da9e:	69db      	ldr	r3, [r3, #28]
 800daa0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800daa2:	693b      	ldr	r3, [r7, #16]
 800daa4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800daa8:	2b01      	cmp	r3, #1
 800daaa:	d002      	beq.n	800dab2 <USBH_MSC_SCSI_RequestSense+0x2c>
 800daac:	2b02      	cmp	r3, #2
 800daae:	d03d      	beq.n	800db2c <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800dab0:	e05d      	b.n	800db6e <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800dab2:	693b      	ldr	r3, [r7, #16]
 800dab4:	220e      	movs	r2, #14
 800dab6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800dab8:	693b      	ldr	r3, [r7, #16]
 800daba:	2280      	movs	r2, #128	; 0x80
 800dabc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800dac0:	693b      	ldr	r3, [r7, #16]
 800dac2:	220a      	movs	r2, #10
 800dac4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800dac8:	693b      	ldr	r3, [r7, #16]
 800daca:	3363      	adds	r3, #99	; 0x63
 800dacc:	2210      	movs	r2, #16
 800dace:	2100      	movs	r1, #0
 800dad0:	4618      	mov	r0, r3
 800dad2:	f004 fe5b 	bl	801278c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800dad6:	693b      	ldr	r3, [r7, #16]
 800dad8:	2203      	movs	r2, #3
 800dada:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800dade:	7afb      	ldrb	r3, [r7, #11]
 800dae0:	015b      	lsls	r3, r3, #5
 800dae2:	b2da      	uxtb	r2, r3
 800dae4:	693b      	ldr	r3, [r7, #16]
 800dae6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800daea:	693b      	ldr	r3, [r7, #16]
 800daec:	2200      	movs	r2, #0
 800daee:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800daf2:	693b      	ldr	r3, [r7, #16]
 800daf4:	2200      	movs	r2, #0
 800daf6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800dafa:	693b      	ldr	r3, [r7, #16]
 800dafc:	220e      	movs	r2, #14
 800dafe:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800db02:	693b      	ldr	r3, [r7, #16]
 800db04:	2200      	movs	r2, #0
 800db06:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800db0a:	693b      	ldr	r3, [r7, #16]
 800db0c:	2201      	movs	r2, #1
 800db0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800db12:	693b      	ldr	r3, [r7, #16]
 800db14:	2202      	movs	r2, #2
 800db16:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800db1a:	693b      	ldr	r3, [r7, #16]
 800db1c:	f103 0210 	add.w	r2, r3, #16
 800db20:	693b      	ldr	r3, [r7, #16]
 800db22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800db26:	2301      	movs	r3, #1
 800db28:	75fb      	strb	r3, [r7, #23]
      break;
 800db2a:	e020      	b.n	800db6e <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800db2c:	7afb      	ldrb	r3, [r7, #11]
 800db2e:	4619      	mov	r1, r3
 800db30:	68f8      	ldr	r0, [r7, #12]
 800db32:	f7ff fc03 	bl	800d33c <USBH_MSC_BOT_Process>
 800db36:	4603      	mov	r3, r0
 800db38:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800db3a:	7dfb      	ldrb	r3, [r7, #23]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d115      	bne.n	800db6c <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800db40:	693b      	ldr	r3, [r7, #16]
 800db42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db46:	3302      	adds	r3, #2
 800db48:	781b      	ldrb	r3, [r3, #0]
 800db4a:	f003 030f 	and.w	r3, r3, #15
 800db4e:	b2da      	uxtb	r2, r3
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800db54:	693b      	ldr	r3, [r7, #16]
 800db56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db5a:	7b1a      	ldrb	r2, [r3, #12]
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800db60:	693b      	ldr	r3, [r7, #16]
 800db62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db66:	7b5a      	ldrb	r2, [r3, #13]
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	709a      	strb	r2, [r3, #2]
      break;
 800db6c:	bf00      	nop
  }

  return error;
 800db6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800db70:	4618      	mov	r0, r3
 800db72:	3718      	adds	r7, #24
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}

0800db78 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b086      	sub	sp, #24
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	60f8      	str	r0, [r7, #12]
 800db80:	607a      	str	r2, [r7, #4]
 800db82:	603b      	str	r3, [r7, #0]
 800db84:	460b      	mov	r3, r1
 800db86:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800db88:	2302      	movs	r3, #2
 800db8a:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800db92:	69db      	ldr	r3, [r3, #28]
 800db94:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800db96:	693b      	ldr	r3, [r7, #16]
 800db98:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800db9c:	2b01      	cmp	r3, #1
 800db9e:	d002      	beq.n	800dba6 <USBH_MSC_SCSI_Write+0x2e>
 800dba0:	2b02      	cmp	r3, #2
 800dba2:	d047      	beq.n	800dc34 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800dba4:	e04e      	b.n	800dc44 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800dba6:	693b      	ldr	r3, [r7, #16]
 800dba8:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800dbac:	461a      	mov	r2, r3
 800dbae:	6a3b      	ldr	r3, [r7, #32]
 800dbb0:	fb03 f202 	mul.w	r2, r3, r2
 800dbb4:	693b      	ldr	r3, [r7, #16]
 800dbb6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	2200      	movs	r2, #0
 800dbbc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800dbc0:	693b      	ldr	r3, [r7, #16]
 800dbc2:	220a      	movs	r2, #10
 800dbc4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800dbc8:	693b      	ldr	r3, [r7, #16]
 800dbca:	3363      	adds	r3, #99	; 0x63
 800dbcc:	2210      	movs	r2, #16
 800dbce:	2100      	movs	r1, #0
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f004 fddb 	bl	801278c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800dbd6:	693b      	ldr	r3, [r7, #16]
 800dbd8:	222a      	movs	r2, #42	; 0x2a
 800dbda:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800dbde:	79fa      	ldrb	r2, [r7, #7]
 800dbe0:	693b      	ldr	r3, [r7, #16]
 800dbe2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800dbe6:	79ba      	ldrb	r2, [r7, #6]
 800dbe8:	693b      	ldr	r3, [r7, #16]
 800dbea:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800dbee:	797a      	ldrb	r2, [r7, #5]
 800dbf0:	693b      	ldr	r3, [r7, #16]
 800dbf2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800dbf6:	1d3b      	adds	r3, r7, #4
 800dbf8:	781a      	ldrb	r2, [r3, #0]
 800dbfa:	693b      	ldr	r3, [r7, #16]
 800dbfc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800dc00:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800dc04:	693b      	ldr	r3, [r7, #16]
 800dc06:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800dc0a:	f107 0320 	add.w	r3, r7, #32
 800dc0e:	781a      	ldrb	r2, [r3, #0]
 800dc10:	693b      	ldr	r3, [r7, #16]
 800dc12:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800dc16:	693b      	ldr	r3, [r7, #16]
 800dc18:	2201      	movs	r2, #1
 800dc1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800dc1e:	693b      	ldr	r3, [r7, #16]
 800dc20:	2202      	movs	r2, #2
 800dc22:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800dc26:	693b      	ldr	r3, [r7, #16]
 800dc28:	683a      	ldr	r2, [r7, #0]
 800dc2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800dc2e:	2301      	movs	r3, #1
 800dc30:	75fb      	strb	r3, [r7, #23]
      break;
 800dc32:	e007      	b.n	800dc44 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800dc34:	7afb      	ldrb	r3, [r7, #11]
 800dc36:	4619      	mov	r1, r3
 800dc38:	68f8      	ldr	r0, [r7, #12]
 800dc3a:	f7ff fb7f 	bl	800d33c <USBH_MSC_BOT_Process>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	75fb      	strb	r3, [r7, #23]
      break;
 800dc42:	bf00      	nop
  }

  return error;
 800dc44:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc46:	4618      	mov	r0, r3
 800dc48:	3718      	adds	r7, #24
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd80      	pop	{r7, pc}

0800dc4e <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800dc4e:	b580      	push	{r7, lr}
 800dc50:	b086      	sub	sp, #24
 800dc52:	af00      	add	r7, sp, #0
 800dc54:	60f8      	str	r0, [r7, #12]
 800dc56:	607a      	str	r2, [r7, #4]
 800dc58:	603b      	str	r3, [r7, #0]
 800dc5a:	460b      	mov	r3, r1
 800dc5c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800dc5e:	2302      	movs	r3, #2
 800dc60:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dc68:	69db      	ldr	r3, [r3, #28]
 800dc6a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800dc6c:	693b      	ldr	r3, [r7, #16]
 800dc6e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800dc72:	2b01      	cmp	r3, #1
 800dc74:	d002      	beq.n	800dc7c <USBH_MSC_SCSI_Read+0x2e>
 800dc76:	2b02      	cmp	r3, #2
 800dc78:	d047      	beq.n	800dd0a <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800dc7a:	e04e      	b.n	800dd1a <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800dc82:	461a      	mov	r2, r3
 800dc84:	6a3b      	ldr	r3, [r7, #32]
 800dc86:	fb03 f202 	mul.w	r2, r3, r2
 800dc8a:	693b      	ldr	r3, [r7, #16]
 800dc8c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800dc8e:	693b      	ldr	r3, [r7, #16]
 800dc90:	2280      	movs	r2, #128	; 0x80
 800dc92:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800dc96:	693b      	ldr	r3, [r7, #16]
 800dc98:	220a      	movs	r2, #10
 800dc9a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800dc9e:	693b      	ldr	r3, [r7, #16]
 800dca0:	3363      	adds	r3, #99	; 0x63
 800dca2:	2210      	movs	r2, #16
 800dca4:	2100      	movs	r1, #0
 800dca6:	4618      	mov	r0, r3
 800dca8:	f004 fd70 	bl	801278c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800dcac:	693b      	ldr	r3, [r7, #16]
 800dcae:	2228      	movs	r2, #40	; 0x28
 800dcb0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800dcb4:	79fa      	ldrb	r2, [r7, #7]
 800dcb6:	693b      	ldr	r3, [r7, #16]
 800dcb8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800dcbc:	79ba      	ldrb	r2, [r7, #6]
 800dcbe:	693b      	ldr	r3, [r7, #16]
 800dcc0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800dcc4:	797a      	ldrb	r2, [r7, #5]
 800dcc6:	693b      	ldr	r3, [r7, #16]
 800dcc8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800dccc:	1d3b      	adds	r3, r7, #4
 800dcce:	781a      	ldrb	r2, [r3, #0]
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800dcd6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800dcda:	693b      	ldr	r3, [r7, #16]
 800dcdc:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800dce0:	f107 0320 	add.w	r3, r7, #32
 800dce4:	781a      	ldrb	r2, [r3, #0]
 800dce6:	693b      	ldr	r3, [r7, #16]
 800dce8:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800dcec:	693b      	ldr	r3, [r7, #16]
 800dcee:	2201      	movs	r2, #1
 800dcf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800dcf4:	693b      	ldr	r3, [r7, #16]
 800dcf6:	2202      	movs	r2, #2
 800dcf8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800dcfc:	693b      	ldr	r3, [r7, #16]
 800dcfe:	683a      	ldr	r2, [r7, #0]
 800dd00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800dd04:	2301      	movs	r3, #1
 800dd06:	75fb      	strb	r3, [r7, #23]
      break;
 800dd08:	e007      	b.n	800dd1a <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800dd0a:	7afb      	ldrb	r3, [r7, #11]
 800dd0c:	4619      	mov	r1, r3
 800dd0e:	68f8      	ldr	r0, [r7, #12]
 800dd10:	f7ff fb14 	bl	800d33c <USBH_MSC_BOT_Process>
 800dd14:	4603      	mov	r3, r0
 800dd16:	75fb      	strb	r3, [r7, #23]
      break;
 800dd18:	bf00      	nop
  }

  return error;
 800dd1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	3718      	adds	r7, #24
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bd80      	pop	{r7, pc}

0800dd24 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b084      	sub	sp, #16
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	60f8      	str	r0, [r7, #12]
 800dd2c:	60b9      	str	r1, [r7, #8]
 800dd2e:	4613      	mov	r3, r2
 800dd30:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d101      	bne.n	800dd3c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800dd38:	2302      	movs	r3, #2
 800dd3a:	e029      	b.n	800dd90 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	79fa      	ldrb	r2, [r7, #7]
 800dd40:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	2200      	movs	r2, #0
 800dd48:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	2200      	movs	r2, #0
 800dd50:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800dd54:	68f8      	ldr	r0, [r7, #12]
 800dd56:	f000 f81f 	bl	800dd98 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	2200      	movs	r2, #0
 800dd66:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	2200      	movs	r2, #0
 800dd76:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d003      	beq.n	800dd88 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	68ba      	ldr	r2, [r7, #8]
 800dd84:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800dd88:	68f8      	ldr	r0, [r7, #12]
 800dd8a:	f004 fa25 	bl	80121d8 <USBH_LL_Init>

  return USBH_OK;
 800dd8e:	2300      	movs	r3, #0
}
 800dd90:	4618      	mov	r0, r3
 800dd92:	3710      	adds	r7, #16
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}

0800dd98 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800dd98:	b480      	push	{r7}
 800dd9a:	b085      	sub	sp, #20
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800dda0:	2300      	movs	r3, #0
 800dda2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800dda4:	2300      	movs	r3, #0
 800dda6:	60fb      	str	r3, [r7, #12]
 800dda8:	e009      	b.n	800ddbe <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800ddaa:	687a      	ldr	r2, [r7, #4]
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	33e0      	adds	r3, #224	; 0xe0
 800ddb0:	009b      	lsls	r3, r3, #2
 800ddb2:	4413      	add	r3, r2
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	3301      	adds	r3, #1
 800ddbc:	60fb      	str	r3, [r7, #12]
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	2b0e      	cmp	r3, #14
 800ddc2:	d9f2      	bls.n	800ddaa <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	60fb      	str	r3, [r7, #12]
 800ddc8:	e009      	b.n	800ddde <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800ddca:	687a      	ldr	r2, [r7, #4]
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	4413      	add	r3, r2
 800ddd0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	3301      	adds	r3, #1
 800dddc:	60fb      	str	r3, [r7, #12]
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dde4:	d3f1      	bcc.n	800ddca <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2200      	movs	r2, #0
 800ddea:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2200      	movs	r2, #0
 800ddf0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	2201      	movs	r2, #1
 800ddf6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2201      	movs	r2, #1
 800de04:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	2240      	movs	r2, #64	; 0x40
 800de0a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2200      	movs	r2, #0
 800de10:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	2200      	movs	r2, #0
 800de16:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	2201      	movs	r2, #1
 800de1e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	2200      	movs	r2, #0
 800de26:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	2200      	movs	r2, #0
 800de2e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800de32:	2300      	movs	r3, #0
}
 800de34:	4618      	mov	r0, r3
 800de36:	3714      	adds	r7, #20
 800de38:	46bd      	mov	sp, r7
 800de3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3e:	4770      	bx	lr

0800de40 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800de40:	b480      	push	{r7}
 800de42:	b085      	sub	sp, #20
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
 800de48:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800de4a:	2300      	movs	r3, #0
 800de4c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d016      	beq.n	800de82 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d10e      	bne.n	800de7c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800de64:	1c59      	adds	r1, r3, #1
 800de66:	687a      	ldr	r2, [r7, #4]
 800de68:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800de6c:	687a      	ldr	r2, [r7, #4]
 800de6e:	33de      	adds	r3, #222	; 0xde
 800de70:	6839      	ldr	r1, [r7, #0]
 800de72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800de76:	2300      	movs	r3, #0
 800de78:	73fb      	strb	r3, [r7, #15]
 800de7a:	e004      	b.n	800de86 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800de7c:	2302      	movs	r3, #2
 800de7e:	73fb      	strb	r3, [r7, #15]
 800de80:	e001      	b.n	800de86 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800de82:	2302      	movs	r3, #2
 800de84:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800de86:	7bfb      	ldrb	r3, [r7, #15]
}
 800de88:	4618      	mov	r0, r3
 800de8a:	3714      	adds	r7, #20
 800de8c:	46bd      	mov	sp, r7
 800de8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de92:	4770      	bx	lr

0800de94 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800de94:	b480      	push	{r7}
 800de96:	b085      	sub	sp, #20
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
 800de9c:	460b      	mov	r3, r1
 800de9e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800dea0:	2300      	movs	r3, #0
 800dea2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800deaa:	78fa      	ldrb	r2, [r7, #3]
 800deac:	429a      	cmp	r2, r3
 800deae:	d204      	bcs.n	800deba <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	78fa      	ldrb	r2, [r7, #3]
 800deb4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800deb8:	e001      	b.n	800debe <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800deba:	2302      	movs	r3, #2
 800debc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800debe:	7bfb      	ldrb	r3, [r7, #15]
}
 800dec0:	4618      	mov	r0, r3
 800dec2:	3714      	adds	r7, #20
 800dec4:	46bd      	mov	sp, r7
 800dec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deca:	4770      	bx	lr

0800decc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800decc:	b480      	push	{r7}
 800dece:	b087      	sub	sp, #28
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
 800ded4:	4608      	mov	r0, r1
 800ded6:	4611      	mov	r1, r2
 800ded8:	461a      	mov	r2, r3
 800deda:	4603      	mov	r3, r0
 800dedc:	70fb      	strb	r3, [r7, #3]
 800dede:	460b      	mov	r3, r1
 800dee0:	70bb      	strb	r3, [r7, #2]
 800dee2:	4613      	mov	r3, r2
 800dee4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800dee6:	2300      	movs	r3, #0
 800dee8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800deea:	2300      	movs	r3, #0
 800deec:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800def4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800def6:	e025      	b.n	800df44 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800def8:	7dfb      	ldrb	r3, [r7, #23]
 800defa:	221a      	movs	r2, #26
 800defc:	fb02 f303 	mul.w	r3, r2, r3
 800df00:	3308      	adds	r3, #8
 800df02:	68fa      	ldr	r2, [r7, #12]
 800df04:	4413      	add	r3, r2
 800df06:	3302      	adds	r3, #2
 800df08:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800df0a:	693b      	ldr	r3, [r7, #16]
 800df0c:	795b      	ldrb	r3, [r3, #5]
 800df0e:	78fa      	ldrb	r2, [r7, #3]
 800df10:	429a      	cmp	r2, r3
 800df12:	d002      	beq.n	800df1a <USBH_FindInterface+0x4e>
 800df14:	78fb      	ldrb	r3, [r7, #3]
 800df16:	2bff      	cmp	r3, #255	; 0xff
 800df18:	d111      	bne.n	800df3e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800df1a:	693b      	ldr	r3, [r7, #16]
 800df1c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800df1e:	78ba      	ldrb	r2, [r7, #2]
 800df20:	429a      	cmp	r2, r3
 800df22:	d002      	beq.n	800df2a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800df24:	78bb      	ldrb	r3, [r7, #2]
 800df26:	2bff      	cmp	r3, #255	; 0xff
 800df28:	d109      	bne.n	800df3e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800df2a:	693b      	ldr	r3, [r7, #16]
 800df2c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800df2e:	787a      	ldrb	r2, [r7, #1]
 800df30:	429a      	cmp	r2, r3
 800df32:	d002      	beq.n	800df3a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800df34:	787b      	ldrb	r3, [r7, #1]
 800df36:	2bff      	cmp	r3, #255	; 0xff
 800df38:	d101      	bne.n	800df3e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800df3a:	7dfb      	ldrb	r3, [r7, #23]
 800df3c:	e006      	b.n	800df4c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800df3e:	7dfb      	ldrb	r3, [r7, #23]
 800df40:	3301      	adds	r3, #1
 800df42:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800df44:	7dfb      	ldrb	r3, [r7, #23]
 800df46:	2b01      	cmp	r3, #1
 800df48:	d9d6      	bls.n	800def8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800df4a:	23ff      	movs	r3, #255	; 0xff
}
 800df4c:	4618      	mov	r0, r3
 800df4e:	371c      	adds	r7, #28
 800df50:	46bd      	mov	sp, r7
 800df52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df56:	4770      	bx	lr

0800df58 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b082      	sub	sp, #8
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800df60:	6878      	ldr	r0, [r7, #4]
 800df62:	f004 f97f 	bl	8012264 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800df66:	2101      	movs	r1, #1
 800df68:	6878      	ldr	r0, [r7, #4]
 800df6a:	f004 fa96 	bl	801249a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800df6e:	2300      	movs	r3, #0
}
 800df70:	4618      	mov	r0, r3
 800df72:	3708      	adds	r7, #8
 800df74:	46bd      	mov	sp, r7
 800df76:	bd80      	pop	{r7, pc}

0800df78 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b088      	sub	sp, #32
 800df7c:	af04      	add	r7, sp, #16
 800df7e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800df80:	2302      	movs	r3, #2
 800df82:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800df84:	2300      	movs	r3, #0
 800df86:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800df8e:	b2db      	uxtb	r3, r3
 800df90:	2b01      	cmp	r3, #1
 800df92:	d102      	bne.n	800df9a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	2203      	movs	r2, #3
 800df98:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	781b      	ldrb	r3, [r3, #0]
 800df9e:	b2db      	uxtb	r3, r3
 800dfa0:	2b0b      	cmp	r3, #11
 800dfa2:	f200 81b3 	bhi.w	800e30c <USBH_Process+0x394>
 800dfa6:	a201      	add	r2, pc, #4	; (adr r2, 800dfac <USBH_Process+0x34>)
 800dfa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfac:	0800dfdd 	.word	0x0800dfdd
 800dfb0:	0800e00f 	.word	0x0800e00f
 800dfb4:	0800e077 	.word	0x0800e077
 800dfb8:	0800e2a7 	.word	0x0800e2a7
 800dfbc:	0800e30d 	.word	0x0800e30d
 800dfc0:	0800e11b 	.word	0x0800e11b
 800dfc4:	0800e24d 	.word	0x0800e24d
 800dfc8:	0800e151 	.word	0x0800e151
 800dfcc:	0800e171 	.word	0x0800e171
 800dfd0:	0800e191 	.word	0x0800e191
 800dfd4:	0800e1bf 	.word	0x0800e1bf
 800dfd8:	0800e28f 	.word	0x0800e28f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800dfe2:	b2db      	uxtb	r3, r3
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	f000 8193 	beq.w	800e310 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	2201      	movs	r2, #1
 800dfee:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800dff0:	20c8      	movs	r0, #200	; 0xc8
 800dff2:	f004 facf 	bl	8012594 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800dff6:	6878      	ldr	r0, [r7, #4]
 800dff8:	f004 f98f 	bl	801231a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2200      	movs	r2, #0
 800e000:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2200      	movs	r2, #0
 800e008:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e00c:	e180      	b.n	800e310 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800e014:	2b01      	cmp	r3, #1
 800e016:	d107      	bne.n	800e028 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2200      	movs	r2, #0
 800e01c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2202      	movs	r2, #2
 800e024:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e026:	e182      	b.n	800e32e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e02e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e032:	d914      	bls.n	800e05e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e03a:	3301      	adds	r3, #1
 800e03c:	b2da      	uxtb	r2, r3
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e04a:	2b03      	cmp	r3, #3
 800e04c:	d903      	bls.n	800e056 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	220d      	movs	r2, #13
 800e052:	701a      	strb	r2, [r3, #0]
      break;
 800e054:	e16b      	b.n	800e32e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	2200      	movs	r2, #0
 800e05a:	701a      	strb	r2, [r3, #0]
      break;
 800e05c:	e167      	b.n	800e32e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e064:	f103 020a 	add.w	r2, r3, #10
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800e06e:	200a      	movs	r0, #10
 800e070:	f004 fa90 	bl	8012594 <USBH_Delay>
      break;
 800e074:	e15b      	b.n	800e32e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d005      	beq.n	800e08c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e086:	2104      	movs	r1, #4
 800e088:	6878      	ldr	r0, [r7, #4]
 800e08a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800e08c:	2064      	movs	r0, #100	; 0x64
 800e08e:	f004 fa81 	bl	8012594 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800e092:	6878      	ldr	r0, [r7, #4]
 800e094:	f004 f91c 	bl	80122d0 <USBH_LL_GetSpeed>
 800e098:	4603      	mov	r3, r0
 800e09a:	461a      	mov	r2, r3
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	2205      	movs	r2, #5
 800e0a6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800e0a8:	2100      	movs	r1, #0
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	f001 f931 	bl	800f312 <USBH_AllocPipe>
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	461a      	mov	r2, r3
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800e0b8:	2180      	movs	r1, #128	; 0x80
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	f001 f929 	bl	800f312 <USBH_AllocPipe>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	461a      	mov	r2, r3
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	7919      	ldrb	r1, [r3, #4]
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e0d8:	687a      	ldr	r2, [r7, #4]
 800e0da:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e0dc:	b292      	uxth	r2, r2
 800e0de:	9202      	str	r2, [sp, #8]
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	9201      	str	r2, [sp, #4]
 800e0e4:	9300      	str	r3, [sp, #0]
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	2280      	movs	r2, #128	; 0x80
 800e0ea:	6878      	ldr	r0, [r7, #4]
 800e0ec:	f001 f8e2 	bl	800f2b4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	7959      	ldrb	r1, [r3, #5]
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e100:	687a      	ldr	r2, [r7, #4]
 800e102:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e104:	b292      	uxth	r2, r2
 800e106:	9202      	str	r2, [sp, #8]
 800e108:	2200      	movs	r2, #0
 800e10a:	9201      	str	r2, [sp, #4]
 800e10c:	9300      	str	r3, [sp, #0]
 800e10e:	4603      	mov	r3, r0
 800e110:	2200      	movs	r2, #0
 800e112:	6878      	ldr	r0, [r7, #4]
 800e114:	f001 f8ce 	bl	800f2b4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e118:	e109      	b.n	800e32e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800e11a:	6878      	ldr	r0, [r7, #4]
 800e11c:	f000 f90c 	bl	800e338 <USBH_HandleEnum>
 800e120:	4603      	mov	r3, r0
 800e122:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800e124:	7bbb      	ldrb	r3, [r7, #14]
 800e126:	b2db      	uxtb	r3, r3
 800e128:	2b00      	cmp	r3, #0
 800e12a:	f040 80f3 	bne.w	800e314 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	2200      	movs	r2, #0
 800e132:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800e13c:	2b01      	cmp	r3, #1
 800e13e:	d103      	bne.n	800e148 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	2208      	movs	r2, #8
 800e144:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e146:	e0e5      	b.n	800e314 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2207      	movs	r2, #7
 800e14c:	701a      	strb	r2, [r3, #0]
      break;
 800e14e:	e0e1      	b.n	800e314 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e156:	2b00      	cmp	r3, #0
 800e158:	f000 80de 	beq.w	800e318 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e162:	2101      	movs	r1, #1
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2208      	movs	r2, #8
 800e16c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800e16e:	e0d3      	b.n	800e318 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800e176:	b29b      	uxth	r3, r3
 800e178:	4619      	mov	r1, r3
 800e17a:	6878      	ldr	r0, [r7, #4]
 800e17c:	f000 fc20 	bl	800e9c0 <USBH_SetCfg>
 800e180:	4603      	mov	r3, r0
 800e182:	2b00      	cmp	r3, #0
 800e184:	f040 80ca 	bne.w	800e31c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2209      	movs	r2, #9
 800e18c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e18e:	e0c5      	b.n	800e31c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800e196:	f003 0320 	and.w	r3, r3, #32
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d00b      	beq.n	800e1b6 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800e19e:	2101      	movs	r1, #1
 800e1a0:	6878      	ldr	r0, [r7, #4]
 800e1a2:	f000 fc30 	bl	800ea06 <USBH_SetFeature>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	f040 80b9 	bne.w	800e320 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	220a      	movs	r2, #10
 800e1b2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e1b4:	e0b4      	b.n	800e320 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	220a      	movs	r2, #10
 800e1ba:	701a      	strb	r2, [r3, #0]
      break;
 800e1bc:	e0b0      	b.n	800e320 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	f000 80ad 	beq.w	800e324 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	73fb      	strb	r3, [r7, #15]
 800e1d6:	e016      	b.n	800e206 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800e1d8:	7bfa      	ldrb	r2, [r7, #15]
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	32de      	adds	r2, #222	; 0xde
 800e1de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1e2:	791a      	ldrb	r2, [r3, #4]
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800e1ea:	429a      	cmp	r2, r3
 800e1ec:	d108      	bne.n	800e200 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800e1ee:	7bfa      	ldrb	r2, [r7, #15]
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	32de      	adds	r2, #222	; 0xde
 800e1f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800e1fe:	e005      	b.n	800e20c <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e200:	7bfb      	ldrb	r3, [r7, #15]
 800e202:	3301      	adds	r3, #1
 800e204:	73fb      	strb	r3, [r7, #15]
 800e206:	7bfb      	ldrb	r3, [r7, #15]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d0e5      	beq.n	800e1d8 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e212:	2b00      	cmp	r3, #0
 800e214:	d016      	beq.n	800e244 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e21c:	689b      	ldr	r3, [r3, #8]
 800e21e:	6878      	ldr	r0, [r7, #4]
 800e220:	4798      	blx	r3
 800e222:	4603      	mov	r3, r0
 800e224:	2b00      	cmp	r3, #0
 800e226:	d109      	bne.n	800e23c <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2206      	movs	r2, #6
 800e22c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e234:	2103      	movs	r1, #3
 800e236:	6878      	ldr	r0, [r7, #4]
 800e238:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e23a:	e073      	b.n	800e324 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	220d      	movs	r2, #13
 800e240:	701a      	strb	r2, [r3, #0]
      break;
 800e242:	e06f      	b.n	800e324 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	220d      	movs	r2, #13
 800e248:	701a      	strb	r2, [r3, #0]
      break;
 800e24a:	e06b      	b.n	800e324 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e252:	2b00      	cmp	r3, #0
 800e254:	d017      	beq.n	800e286 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e25c:	691b      	ldr	r3, [r3, #16]
 800e25e:	6878      	ldr	r0, [r7, #4]
 800e260:	4798      	blx	r3
 800e262:	4603      	mov	r3, r0
 800e264:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800e266:	7bbb      	ldrb	r3, [r7, #14]
 800e268:	b2db      	uxtb	r3, r3
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d103      	bne.n	800e276 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	220b      	movs	r2, #11
 800e272:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e274:	e058      	b.n	800e328 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800e276:	7bbb      	ldrb	r3, [r7, #14]
 800e278:	b2db      	uxtb	r3, r3
 800e27a:	2b02      	cmp	r3, #2
 800e27c:	d154      	bne.n	800e328 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	220d      	movs	r2, #13
 800e282:	701a      	strb	r2, [r3, #0]
      break;
 800e284:	e050      	b.n	800e328 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	220d      	movs	r2, #13
 800e28a:	701a      	strb	r2, [r3, #0]
      break;
 800e28c:	e04c      	b.n	800e328 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e294:	2b00      	cmp	r3, #0
 800e296:	d049      	beq.n	800e32c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e29e:	695b      	ldr	r3, [r3, #20]
 800e2a0:	6878      	ldr	r0, [r7, #4]
 800e2a2:	4798      	blx	r3
      }
      break;
 800e2a4:	e042      	b.n	800e32c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800e2ae:	6878      	ldr	r0, [r7, #4]
 800e2b0:	f7ff fd72 	bl	800dd98 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d009      	beq.n	800e2d2 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e2c4:	68db      	ldr	r3, [r3, #12]
 800e2c6:	6878      	ldr	r0, [r7, #4]
 800e2c8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d005      	beq.n	800e2e8 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e2e2:	2105      	movs	r1, #5
 800e2e4:	6878      	ldr	r0, [r7, #4]
 800e2e6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800e2ee:	b2db      	uxtb	r3, r3
 800e2f0:	2b01      	cmp	r3, #1
 800e2f2:	d107      	bne.n	800e304 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800e2fc:	6878      	ldr	r0, [r7, #4]
 800e2fe:	f7ff fe2b 	bl	800df58 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e302:	e014      	b.n	800e32e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800e304:	6878      	ldr	r0, [r7, #4]
 800e306:	f003 ffad 	bl	8012264 <USBH_LL_Start>
      break;
 800e30a:	e010      	b.n	800e32e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800e30c:	bf00      	nop
 800e30e:	e00e      	b.n	800e32e <USBH_Process+0x3b6>
      break;
 800e310:	bf00      	nop
 800e312:	e00c      	b.n	800e32e <USBH_Process+0x3b6>
      break;
 800e314:	bf00      	nop
 800e316:	e00a      	b.n	800e32e <USBH_Process+0x3b6>
    break;
 800e318:	bf00      	nop
 800e31a:	e008      	b.n	800e32e <USBH_Process+0x3b6>
      break;
 800e31c:	bf00      	nop
 800e31e:	e006      	b.n	800e32e <USBH_Process+0x3b6>
      break;
 800e320:	bf00      	nop
 800e322:	e004      	b.n	800e32e <USBH_Process+0x3b6>
      break;
 800e324:	bf00      	nop
 800e326:	e002      	b.n	800e32e <USBH_Process+0x3b6>
      break;
 800e328:	bf00      	nop
 800e32a:	e000      	b.n	800e32e <USBH_Process+0x3b6>
      break;
 800e32c:	bf00      	nop
  }
  return USBH_OK;
 800e32e:	2300      	movs	r3, #0
}
 800e330:	4618      	mov	r0, r3
 800e332:	3710      	adds	r7, #16
 800e334:	46bd      	mov	sp, r7
 800e336:	bd80      	pop	{r7, pc}

0800e338 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b088      	sub	sp, #32
 800e33c:	af04      	add	r7, sp, #16
 800e33e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800e340:	2301      	movs	r3, #1
 800e342:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800e344:	2301      	movs	r3, #1
 800e346:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	785b      	ldrb	r3, [r3, #1]
 800e34c:	2b07      	cmp	r3, #7
 800e34e:	f200 81c1 	bhi.w	800e6d4 <USBH_HandleEnum+0x39c>
 800e352:	a201      	add	r2, pc, #4	; (adr r2, 800e358 <USBH_HandleEnum+0x20>)
 800e354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e358:	0800e379 	.word	0x0800e379
 800e35c:	0800e437 	.word	0x0800e437
 800e360:	0800e4a1 	.word	0x0800e4a1
 800e364:	0800e52f 	.word	0x0800e52f
 800e368:	0800e599 	.word	0x0800e599
 800e36c:	0800e609 	.word	0x0800e609
 800e370:	0800e64f 	.word	0x0800e64f
 800e374:	0800e695 	.word	0x0800e695
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800e378:	2108      	movs	r1, #8
 800e37a:	6878      	ldr	r0, [r7, #4]
 800e37c:	f000 fa50 	bl	800e820 <USBH_Get_DevDesc>
 800e380:	4603      	mov	r3, r0
 800e382:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e384:	7bbb      	ldrb	r3, [r7, #14]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d130      	bne.n	800e3ec <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2201      	movs	r2, #1
 800e398:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	7919      	ldrb	r1, [r3, #4]
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e3aa:	687a      	ldr	r2, [r7, #4]
 800e3ac:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800e3ae:	b292      	uxth	r2, r2
 800e3b0:	9202      	str	r2, [sp, #8]
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	9201      	str	r2, [sp, #4]
 800e3b6:	9300      	str	r3, [sp, #0]
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	2280      	movs	r2, #128	; 0x80
 800e3bc:	6878      	ldr	r0, [r7, #4]
 800e3be:	f000 ff79 	bl	800f2b4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	7959      	ldrb	r1, [r3, #5]
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e3d2:	687a      	ldr	r2, [r7, #4]
 800e3d4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e3d6:	b292      	uxth	r2, r2
 800e3d8:	9202      	str	r2, [sp, #8]
 800e3da:	2200      	movs	r2, #0
 800e3dc:	9201      	str	r2, [sp, #4]
 800e3de:	9300      	str	r3, [sp, #0]
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	f000 ff65 	bl	800f2b4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800e3ea:	e175      	b.n	800e6d8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e3ec:	7bbb      	ldrb	r3, [r7, #14]
 800e3ee:	2b03      	cmp	r3, #3
 800e3f0:	f040 8172 	bne.w	800e6d8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e3fa:	3301      	adds	r3, #1
 800e3fc:	b2da      	uxtb	r2, r3
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e40a:	2b03      	cmp	r3, #3
 800e40c:	d903      	bls.n	800e416 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	220d      	movs	r2, #13
 800e412:	701a      	strb	r2, [r3, #0]
      break;
 800e414:	e160      	b.n	800e6d8 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	795b      	ldrb	r3, [r3, #5]
 800e41a:	4619      	mov	r1, r3
 800e41c:	6878      	ldr	r0, [r7, #4]
 800e41e:	f000 ff99 	bl	800f354 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	791b      	ldrb	r3, [r3, #4]
 800e426:	4619      	mov	r1, r3
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	f000 ff93 	bl	800f354 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	2200      	movs	r2, #0
 800e432:	701a      	strb	r2, [r3, #0]
      break;
 800e434:	e150      	b.n	800e6d8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800e436:	2112      	movs	r1, #18
 800e438:	6878      	ldr	r0, [r7, #4]
 800e43a:	f000 f9f1 	bl	800e820 <USBH_Get_DevDesc>
 800e43e:	4603      	mov	r3, r0
 800e440:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e442:	7bbb      	ldrb	r3, [r7, #14]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d103      	bne.n	800e450 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	2202      	movs	r2, #2
 800e44c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e44e:	e145      	b.n	800e6dc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e450:	7bbb      	ldrb	r3, [r7, #14]
 800e452:	2b03      	cmp	r3, #3
 800e454:	f040 8142 	bne.w	800e6dc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e45e:	3301      	adds	r3, #1
 800e460:	b2da      	uxtb	r2, r3
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e46e:	2b03      	cmp	r3, #3
 800e470:	d903      	bls.n	800e47a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	220d      	movs	r2, #13
 800e476:	701a      	strb	r2, [r3, #0]
      break;
 800e478:	e130      	b.n	800e6dc <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	795b      	ldrb	r3, [r3, #5]
 800e47e:	4619      	mov	r1, r3
 800e480:	6878      	ldr	r0, [r7, #4]
 800e482:	f000 ff67 	bl	800f354 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	791b      	ldrb	r3, [r3, #4]
 800e48a:	4619      	mov	r1, r3
 800e48c:	6878      	ldr	r0, [r7, #4]
 800e48e:	f000 ff61 	bl	800f354 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	2200      	movs	r2, #0
 800e496:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	2200      	movs	r2, #0
 800e49c:	701a      	strb	r2, [r3, #0]
      break;
 800e49e:	e11d      	b.n	800e6dc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800e4a0:	2101      	movs	r1, #1
 800e4a2:	6878      	ldr	r0, [r7, #4]
 800e4a4:	f000 fa68 	bl	800e978 <USBH_SetAddress>
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e4ac:	7bbb      	ldrb	r3, [r7, #14]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d132      	bne.n	800e518 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800e4b2:	2002      	movs	r0, #2
 800e4b4:	f004 f86e 	bl	8012594 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	2201      	movs	r2, #1
 800e4bc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2203      	movs	r2, #3
 800e4c4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	7919      	ldrb	r1, [r3, #4]
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e4d6:	687a      	ldr	r2, [r7, #4]
 800e4d8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800e4da:	b292      	uxth	r2, r2
 800e4dc:	9202      	str	r2, [sp, #8]
 800e4de:	2200      	movs	r2, #0
 800e4e0:	9201      	str	r2, [sp, #4]
 800e4e2:	9300      	str	r3, [sp, #0]
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	2280      	movs	r2, #128	; 0x80
 800e4e8:	6878      	ldr	r0, [r7, #4]
 800e4ea:	f000 fee3 	bl	800f2b4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	7959      	ldrb	r1, [r3, #5]
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e4fe:	687a      	ldr	r2, [r7, #4]
 800e500:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e502:	b292      	uxth	r2, r2
 800e504:	9202      	str	r2, [sp, #8]
 800e506:	2200      	movs	r2, #0
 800e508:	9201      	str	r2, [sp, #4]
 800e50a:	9300      	str	r3, [sp, #0]
 800e50c:	4603      	mov	r3, r0
 800e50e:	2200      	movs	r2, #0
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f000 fecf 	bl	800f2b4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800e516:	e0e3      	b.n	800e6e0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e518:	7bbb      	ldrb	r3, [r7, #14]
 800e51a:	2b03      	cmp	r3, #3
 800e51c:	f040 80e0 	bne.w	800e6e0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	220d      	movs	r2, #13
 800e524:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2200      	movs	r2, #0
 800e52a:	705a      	strb	r2, [r3, #1]
      break;
 800e52c:	e0d8      	b.n	800e6e0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800e52e:	2109      	movs	r1, #9
 800e530:	6878      	ldr	r0, [r7, #4]
 800e532:	f000 f99d 	bl	800e870 <USBH_Get_CfgDesc>
 800e536:	4603      	mov	r3, r0
 800e538:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e53a:	7bbb      	ldrb	r3, [r7, #14]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d103      	bne.n	800e548 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2204      	movs	r2, #4
 800e544:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e546:	e0cd      	b.n	800e6e4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e548:	7bbb      	ldrb	r3, [r7, #14]
 800e54a:	2b03      	cmp	r3, #3
 800e54c:	f040 80ca 	bne.w	800e6e4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e556:	3301      	adds	r3, #1
 800e558:	b2da      	uxtb	r2, r3
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e566:	2b03      	cmp	r3, #3
 800e568:	d903      	bls.n	800e572 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	220d      	movs	r2, #13
 800e56e:	701a      	strb	r2, [r3, #0]
      break;
 800e570:	e0b8      	b.n	800e6e4 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	795b      	ldrb	r3, [r3, #5]
 800e576:	4619      	mov	r1, r3
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f000 feeb 	bl	800f354 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	791b      	ldrb	r3, [r3, #4]
 800e582:	4619      	mov	r1, r3
 800e584:	6878      	ldr	r0, [r7, #4]
 800e586:	f000 fee5 	bl	800f354 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	2200      	movs	r2, #0
 800e58e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2200      	movs	r2, #0
 800e594:	701a      	strb	r2, [r3, #0]
      break;
 800e596:	e0a5      	b.n	800e6e4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800e59e:	4619      	mov	r1, r3
 800e5a0:	6878      	ldr	r0, [r7, #4]
 800e5a2:	f000 f965 	bl	800e870 <USBH_Get_CfgDesc>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e5aa:	7bbb      	ldrb	r3, [r7, #14]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d103      	bne.n	800e5b8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	2205      	movs	r2, #5
 800e5b4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e5b6:	e097      	b.n	800e6e8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e5b8:	7bbb      	ldrb	r3, [r7, #14]
 800e5ba:	2b03      	cmp	r3, #3
 800e5bc:	f040 8094 	bne.w	800e6e8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e5c6:	3301      	adds	r3, #1
 800e5c8:	b2da      	uxtb	r2, r3
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e5d6:	2b03      	cmp	r3, #3
 800e5d8:	d903      	bls.n	800e5e2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	220d      	movs	r2, #13
 800e5de:	701a      	strb	r2, [r3, #0]
      break;
 800e5e0:	e082      	b.n	800e6e8 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	795b      	ldrb	r3, [r3, #5]
 800e5e6:	4619      	mov	r1, r3
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f000 feb3 	bl	800f354 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	791b      	ldrb	r3, [r3, #4]
 800e5f2:	4619      	mov	r1, r3
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f000 fead 	bl	800f354 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2200      	movs	r2, #0
 800e604:	701a      	strb	r2, [r3, #0]
      break;
 800e606:	e06f      	b.n	800e6e8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d019      	beq.n	800e646 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800e61e:	23ff      	movs	r3, #255	; 0xff
 800e620:	6878      	ldr	r0, [r7, #4]
 800e622:	f000 f949 	bl	800e8b8 <USBH_Get_StringDesc>
 800e626:	4603      	mov	r3, r0
 800e628:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e62a:	7bbb      	ldrb	r3, [r7, #14]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d103      	bne.n	800e638 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2206      	movs	r2, #6
 800e634:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e636:	e059      	b.n	800e6ec <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e638:	7bbb      	ldrb	r3, [r7, #14]
 800e63a:	2b03      	cmp	r3, #3
 800e63c:	d156      	bne.n	800e6ec <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	2206      	movs	r2, #6
 800e642:	705a      	strb	r2, [r3, #1]
      break;
 800e644:	e052      	b.n	800e6ec <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2206      	movs	r2, #6
 800e64a:	705a      	strb	r2, [r3, #1]
      break;
 800e64c:	e04e      	b.n	800e6ec <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800e654:	2b00      	cmp	r3, #0
 800e656:	d019      	beq.n	800e68c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800e664:	23ff      	movs	r3, #255	; 0xff
 800e666:	6878      	ldr	r0, [r7, #4]
 800e668:	f000 f926 	bl	800e8b8 <USBH_Get_StringDesc>
 800e66c:	4603      	mov	r3, r0
 800e66e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e670:	7bbb      	ldrb	r3, [r7, #14]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d103      	bne.n	800e67e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	2207      	movs	r2, #7
 800e67a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e67c:	e038      	b.n	800e6f0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e67e:	7bbb      	ldrb	r3, [r7, #14]
 800e680:	2b03      	cmp	r3, #3
 800e682:	d135      	bne.n	800e6f0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2207      	movs	r2, #7
 800e688:	705a      	strb	r2, [r3, #1]
      break;
 800e68a:	e031      	b.n	800e6f0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	2207      	movs	r2, #7
 800e690:	705a      	strb	r2, [r3, #1]
      break;
 800e692:	e02d      	b.n	800e6f0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d017      	beq.n	800e6ce <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800e6aa:	23ff      	movs	r3, #255	; 0xff
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f000 f903 	bl	800e8b8 <USBH_Get_StringDesc>
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e6b6:	7bbb      	ldrb	r3, [r7, #14]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d102      	bne.n	800e6c2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800e6bc:	2300      	movs	r3, #0
 800e6be:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800e6c0:	e018      	b.n	800e6f4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e6c2:	7bbb      	ldrb	r3, [r7, #14]
 800e6c4:	2b03      	cmp	r3, #3
 800e6c6:	d115      	bne.n	800e6f4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	73fb      	strb	r3, [r7, #15]
      break;
 800e6cc:	e012      	b.n	800e6f4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	73fb      	strb	r3, [r7, #15]
      break;
 800e6d2:	e00f      	b.n	800e6f4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800e6d4:	bf00      	nop
 800e6d6:	e00e      	b.n	800e6f6 <USBH_HandleEnum+0x3be>
      break;
 800e6d8:	bf00      	nop
 800e6da:	e00c      	b.n	800e6f6 <USBH_HandleEnum+0x3be>
      break;
 800e6dc:	bf00      	nop
 800e6de:	e00a      	b.n	800e6f6 <USBH_HandleEnum+0x3be>
      break;
 800e6e0:	bf00      	nop
 800e6e2:	e008      	b.n	800e6f6 <USBH_HandleEnum+0x3be>
      break;
 800e6e4:	bf00      	nop
 800e6e6:	e006      	b.n	800e6f6 <USBH_HandleEnum+0x3be>
      break;
 800e6e8:	bf00      	nop
 800e6ea:	e004      	b.n	800e6f6 <USBH_HandleEnum+0x3be>
      break;
 800e6ec:	bf00      	nop
 800e6ee:	e002      	b.n	800e6f6 <USBH_HandleEnum+0x3be>
      break;
 800e6f0:	bf00      	nop
 800e6f2:	e000      	b.n	800e6f6 <USBH_HandleEnum+0x3be>
      break;
 800e6f4:	bf00      	nop
  }
  return Status;
 800e6f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	3710      	adds	r7, #16
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}

0800e700 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800e700:	b480      	push	{r7}
 800e702:	b083      	sub	sp, #12
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
 800e708:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	683a      	ldr	r2, [r7, #0]
 800e70e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800e712:	bf00      	nop
 800e714:	370c      	adds	r7, #12
 800e716:	46bd      	mov	sp, r7
 800e718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71c:	4770      	bx	lr

0800e71e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800e71e:	b580      	push	{r7, lr}
 800e720:	b082      	sub	sp, #8
 800e722:	af00      	add	r7, sp, #0
 800e724:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e72c:	1c5a      	adds	r2, r3, #1
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800e734:	6878      	ldr	r0, [r7, #4]
 800e736:	f000 f804 	bl	800e742 <USBH_HandleSof>
}
 800e73a:	bf00      	nop
 800e73c:	3708      	adds	r7, #8
 800e73e:	46bd      	mov	sp, r7
 800e740:	bd80      	pop	{r7, pc}

0800e742 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800e742:	b580      	push	{r7, lr}
 800e744:	b082      	sub	sp, #8
 800e746:	af00      	add	r7, sp, #0
 800e748:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	781b      	ldrb	r3, [r3, #0]
 800e74e:	b2db      	uxtb	r3, r3
 800e750:	2b0b      	cmp	r3, #11
 800e752:	d10a      	bne.n	800e76a <USBH_HandleSof+0x28>
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d005      	beq.n	800e76a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e764:	699b      	ldr	r3, [r3, #24]
 800e766:	6878      	ldr	r0, [r7, #4]
 800e768:	4798      	blx	r3
  }
}
 800e76a:	bf00      	nop
 800e76c:	3708      	adds	r7, #8
 800e76e:	46bd      	mov	sp, r7
 800e770:	bd80      	pop	{r7, pc}

0800e772 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800e772:	b480      	push	{r7}
 800e774:	b083      	sub	sp, #12
 800e776:	af00      	add	r7, sp, #0
 800e778:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	2201      	movs	r2, #1
 800e77e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800e782:	bf00      	nop
}
 800e784:	370c      	adds	r7, #12
 800e786:	46bd      	mov	sp, r7
 800e788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78c:	4770      	bx	lr

0800e78e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800e78e:	b480      	push	{r7}
 800e790:	b083      	sub	sp, #12
 800e792:	af00      	add	r7, sp, #0
 800e794:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	2200      	movs	r2, #0
 800e79a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800e79e:	bf00      	nop
}
 800e7a0:	370c      	adds	r7, #12
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a8:	4770      	bx	lr

0800e7aa <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800e7aa:	b480      	push	{r7}
 800e7ac:	b083      	sub	sp, #12
 800e7ae:	af00      	add	r7, sp, #0
 800e7b0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	2201      	movs	r2, #1
 800e7b6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	2200      	movs	r2, #0
 800e7be:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800e7ca:	2300      	movs	r3, #0
}
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	370c      	adds	r7, #12
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d6:	4770      	bx	lr

0800e7d8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b082      	sub	sp, #8
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	2201      	movs	r2, #1
 800e7e4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800e7f8:	6878      	ldr	r0, [r7, #4]
 800e7fa:	f003 fd4e 	bl	801229a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	791b      	ldrb	r3, [r3, #4]
 800e802:	4619      	mov	r1, r3
 800e804:	6878      	ldr	r0, [r7, #4]
 800e806:	f000 fda5 	bl	800f354 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	795b      	ldrb	r3, [r3, #5]
 800e80e:	4619      	mov	r1, r3
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	f000 fd9f 	bl	800f354 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800e816:	2300      	movs	r3, #0
}
 800e818:	4618      	mov	r0, r3
 800e81a:	3708      	adds	r7, #8
 800e81c:	46bd      	mov	sp, r7
 800e81e:	bd80      	pop	{r7, pc}

0800e820 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b086      	sub	sp, #24
 800e824:	af02      	add	r7, sp, #8
 800e826:	6078      	str	r0, [r7, #4]
 800e828:	460b      	mov	r3, r1
 800e82a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800e832:	78fb      	ldrb	r3, [r7, #3]
 800e834:	b29b      	uxth	r3, r3
 800e836:	9300      	str	r3, [sp, #0]
 800e838:	4613      	mov	r3, r2
 800e83a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e83e:	2100      	movs	r1, #0
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f000 f864 	bl	800e90e <USBH_GetDescriptor>
 800e846:	4603      	mov	r3, r0
 800e848:	73fb      	strb	r3, [r7, #15]
 800e84a:	7bfb      	ldrb	r3, [r7, #15]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d10a      	bne.n	800e866 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	f203 3026 	addw	r0, r3, #806	; 0x326
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e85c:	78fa      	ldrb	r2, [r7, #3]
 800e85e:	b292      	uxth	r2, r2
 800e860:	4619      	mov	r1, r3
 800e862:	f000 f918 	bl	800ea96 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800e866:	7bfb      	ldrb	r3, [r7, #15]
}
 800e868:	4618      	mov	r0, r3
 800e86a:	3710      	adds	r7, #16
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd80      	pop	{r7, pc}

0800e870 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800e870:	b580      	push	{r7, lr}
 800e872:	b086      	sub	sp, #24
 800e874:	af02      	add	r7, sp, #8
 800e876:	6078      	str	r0, [r7, #4]
 800e878:	460b      	mov	r3, r1
 800e87a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	331c      	adds	r3, #28
 800e880:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800e882:	887b      	ldrh	r3, [r7, #2]
 800e884:	9300      	str	r3, [sp, #0]
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e88c:	2100      	movs	r1, #0
 800e88e:	6878      	ldr	r0, [r7, #4]
 800e890:	f000 f83d 	bl	800e90e <USBH_GetDescriptor>
 800e894:	4603      	mov	r3, r0
 800e896:	72fb      	strb	r3, [r7, #11]
 800e898:	7afb      	ldrb	r3, [r7, #11]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d107      	bne.n	800e8ae <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800e8a4:	887a      	ldrh	r2, [r7, #2]
 800e8a6:	68f9      	ldr	r1, [r7, #12]
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	f000 f964 	bl	800eb76 <USBH_ParseCfgDesc>
  }

  return status;
 800e8ae:	7afb      	ldrb	r3, [r7, #11]
}
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	3710      	adds	r7, #16
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}

0800e8b8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b088      	sub	sp, #32
 800e8bc:	af02      	add	r7, sp, #8
 800e8be:	60f8      	str	r0, [r7, #12]
 800e8c0:	607a      	str	r2, [r7, #4]
 800e8c2:	461a      	mov	r2, r3
 800e8c4:	460b      	mov	r3, r1
 800e8c6:	72fb      	strb	r3, [r7, #11]
 800e8c8:	4613      	mov	r3, r2
 800e8ca:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800e8cc:	7afb      	ldrb	r3, [r7, #11]
 800e8ce:	b29b      	uxth	r3, r3
 800e8d0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800e8d4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800e8dc:	893b      	ldrh	r3, [r7, #8]
 800e8de:	9300      	str	r3, [sp, #0]
 800e8e0:	460b      	mov	r3, r1
 800e8e2:	2100      	movs	r1, #0
 800e8e4:	68f8      	ldr	r0, [r7, #12]
 800e8e6:	f000 f812 	bl	800e90e <USBH_GetDescriptor>
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	75fb      	strb	r3, [r7, #23]
 800e8ee:	7dfb      	ldrb	r3, [r7, #23]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d107      	bne.n	800e904 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e8fa:	893a      	ldrh	r2, [r7, #8]
 800e8fc:	6879      	ldr	r1, [r7, #4]
 800e8fe:	4618      	mov	r0, r3
 800e900:	f000 fa37 	bl	800ed72 <USBH_ParseStringDesc>
  }

  return status;
 800e904:	7dfb      	ldrb	r3, [r7, #23]
}
 800e906:	4618      	mov	r0, r3
 800e908:	3718      	adds	r7, #24
 800e90a:	46bd      	mov	sp, r7
 800e90c:	bd80      	pop	{r7, pc}

0800e90e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800e90e:	b580      	push	{r7, lr}
 800e910:	b084      	sub	sp, #16
 800e912:	af00      	add	r7, sp, #0
 800e914:	60f8      	str	r0, [r7, #12]
 800e916:	607b      	str	r3, [r7, #4]
 800e918:	460b      	mov	r3, r1
 800e91a:	72fb      	strb	r3, [r7, #11]
 800e91c:	4613      	mov	r3, r2
 800e91e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	789b      	ldrb	r3, [r3, #2]
 800e924:	2b01      	cmp	r3, #1
 800e926:	d11c      	bne.n	800e962 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800e928:	7afb      	ldrb	r3, [r7, #11]
 800e92a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e92e:	b2da      	uxtb	r2, r3
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	2206      	movs	r2, #6
 800e938:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	893a      	ldrh	r2, [r7, #8]
 800e93e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800e940:	893b      	ldrh	r3, [r7, #8]
 800e942:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e946:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e94a:	d104      	bne.n	800e956 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	f240 4209 	movw	r2, #1033	; 0x409
 800e952:	829a      	strh	r2, [r3, #20]
 800e954:	e002      	b.n	800e95c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	2200      	movs	r2, #0
 800e95a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	8b3a      	ldrh	r2, [r7, #24]
 800e960:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800e962:	8b3b      	ldrh	r3, [r7, #24]
 800e964:	461a      	mov	r2, r3
 800e966:	6879      	ldr	r1, [r7, #4]
 800e968:	68f8      	ldr	r0, [r7, #12]
 800e96a:	f000 fa50 	bl	800ee0e <USBH_CtlReq>
 800e96e:	4603      	mov	r3, r0
}
 800e970:	4618      	mov	r0, r3
 800e972:	3710      	adds	r7, #16
 800e974:	46bd      	mov	sp, r7
 800e976:	bd80      	pop	{r7, pc}

0800e978 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b082      	sub	sp, #8
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
 800e980:	460b      	mov	r3, r1
 800e982:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	789b      	ldrb	r3, [r3, #2]
 800e988:	2b01      	cmp	r3, #1
 800e98a:	d10f      	bne.n	800e9ac <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2200      	movs	r2, #0
 800e990:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2205      	movs	r2, #5
 800e996:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800e998:	78fb      	ldrb	r3, [r7, #3]
 800e99a:	b29a      	uxth	r2, r3
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	2100      	movs	r1, #0
 800e9b0:	6878      	ldr	r0, [r7, #4]
 800e9b2:	f000 fa2c 	bl	800ee0e <USBH_CtlReq>
 800e9b6:	4603      	mov	r3, r0
}
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	3708      	adds	r7, #8
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	bd80      	pop	{r7, pc}

0800e9c0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b082      	sub	sp, #8
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
 800e9c8:	460b      	mov	r3, r1
 800e9ca:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	789b      	ldrb	r3, [r3, #2]
 800e9d0:	2b01      	cmp	r3, #1
 800e9d2:	d10e      	bne.n	800e9f2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	2209      	movs	r2, #9
 800e9de:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	887a      	ldrh	r2, [r7, #2]
 800e9e4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	2100      	movs	r1, #0
 800e9f6:	6878      	ldr	r0, [r7, #4]
 800e9f8:	f000 fa09 	bl	800ee0e <USBH_CtlReq>
 800e9fc:	4603      	mov	r3, r0
}
 800e9fe:	4618      	mov	r0, r3
 800ea00:	3708      	adds	r7, #8
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}

0800ea06 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ea06:	b580      	push	{r7, lr}
 800ea08:	b082      	sub	sp, #8
 800ea0a:	af00      	add	r7, sp, #0
 800ea0c:	6078      	str	r0, [r7, #4]
 800ea0e:	460b      	mov	r3, r1
 800ea10:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	789b      	ldrb	r3, [r3, #2]
 800ea16:	2b01      	cmp	r3, #1
 800ea18:	d10f      	bne.n	800ea3a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	2203      	movs	r2, #3
 800ea24:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ea26:	78fb      	ldrb	r3, [r7, #3]
 800ea28:	b29a      	uxth	r2, r3
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	2200      	movs	r2, #0
 800ea32:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	2200      	movs	r2, #0
 800ea38:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	2100      	movs	r1, #0
 800ea3e:	6878      	ldr	r0, [r7, #4]
 800ea40:	f000 f9e5 	bl	800ee0e <USBH_CtlReq>
 800ea44:	4603      	mov	r3, r0
}
 800ea46:	4618      	mov	r0, r3
 800ea48:	3708      	adds	r7, #8
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}

0800ea4e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ea4e:	b580      	push	{r7, lr}
 800ea50:	b082      	sub	sp, #8
 800ea52:	af00      	add	r7, sp, #0
 800ea54:	6078      	str	r0, [r7, #4]
 800ea56:	460b      	mov	r3, r1
 800ea58:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	789b      	ldrb	r3, [r3, #2]
 800ea5e:	2b01      	cmp	r3, #1
 800ea60:	d10f      	bne.n	800ea82 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	2202      	movs	r2, #2
 800ea66:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	2201      	movs	r2, #1
 800ea6c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	2200      	movs	r2, #0
 800ea72:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ea74:	78fb      	ldrb	r3, [r7, #3]
 800ea76:	b29a      	uxth	r2, r3
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	2200      	movs	r2, #0
 800ea80:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800ea82:	2200      	movs	r2, #0
 800ea84:	2100      	movs	r1, #0
 800ea86:	6878      	ldr	r0, [r7, #4]
 800ea88:	f000 f9c1 	bl	800ee0e <USBH_CtlReq>
 800ea8c:	4603      	mov	r3, r0
}
 800ea8e:	4618      	mov	r0, r3
 800ea90:	3708      	adds	r7, #8
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bd80      	pop	{r7, pc}

0800ea96 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800ea96:	b480      	push	{r7}
 800ea98:	b085      	sub	sp, #20
 800ea9a:	af00      	add	r7, sp, #0
 800ea9c:	60f8      	str	r0, [r7, #12]
 800ea9e:	60b9      	str	r1, [r7, #8]
 800eaa0:	4613      	mov	r3, r2
 800eaa2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800eaa4:	68bb      	ldr	r3, [r7, #8]
 800eaa6:	781a      	ldrb	r2, [r3, #0]
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800eaac:	68bb      	ldr	r3, [r7, #8]
 800eaae:	785a      	ldrb	r2, [r3, #1]
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800eab4:	68bb      	ldr	r3, [r7, #8]
 800eab6:	3302      	adds	r3, #2
 800eab8:	781b      	ldrb	r3, [r3, #0]
 800eaba:	b29a      	uxth	r2, r3
 800eabc:	68bb      	ldr	r3, [r7, #8]
 800eabe:	3303      	adds	r3, #3
 800eac0:	781b      	ldrb	r3, [r3, #0]
 800eac2:	b29b      	uxth	r3, r3
 800eac4:	021b      	lsls	r3, r3, #8
 800eac6:	b29b      	uxth	r3, r3
 800eac8:	4313      	orrs	r3, r2
 800eaca:	b29a      	uxth	r2, r3
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800ead0:	68bb      	ldr	r3, [r7, #8]
 800ead2:	791a      	ldrb	r2, [r3, #4]
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	795a      	ldrb	r2, [r3, #5]
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800eae0:	68bb      	ldr	r3, [r7, #8]
 800eae2:	799a      	ldrb	r2, [r3, #6]
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800eae8:	68bb      	ldr	r3, [r7, #8]
 800eaea:	79da      	ldrb	r2, [r3, #7]
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800eaf0:	88fb      	ldrh	r3, [r7, #6]
 800eaf2:	2b08      	cmp	r3, #8
 800eaf4:	d939      	bls.n	800eb6a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800eaf6:	68bb      	ldr	r3, [r7, #8]
 800eaf8:	3308      	adds	r3, #8
 800eafa:	781b      	ldrb	r3, [r3, #0]
 800eafc:	b29a      	uxth	r2, r3
 800eafe:	68bb      	ldr	r3, [r7, #8]
 800eb00:	3309      	adds	r3, #9
 800eb02:	781b      	ldrb	r3, [r3, #0]
 800eb04:	b29b      	uxth	r3, r3
 800eb06:	021b      	lsls	r3, r3, #8
 800eb08:	b29b      	uxth	r3, r3
 800eb0a:	4313      	orrs	r3, r2
 800eb0c:	b29a      	uxth	r2, r3
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800eb12:	68bb      	ldr	r3, [r7, #8]
 800eb14:	330a      	adds	r3, #10
 800eb16:	781b      	ldrb	r3, [r3, #0]
 800eb18:	b29a      	uxth	r2, r3
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	330b      	adds	r3, #11
 800eb1e:	781b      	ldrb	r3, [r3, #0]
 800eb20:	b29b      	uxth	r3, r3
 800eb22:	021b      	lsls	r3, r3, #8
 800eb24:	b29b      	uxth	r3, r3
 800eb26:	4313      	orrs	r3, r2
 800eb28:	b29a      	uxth	r2, r3
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800eb2e:	68bb      	ldr	r3, [r7, #8]
 800eb30:	330c      	adds	r3, #12
 800eb32:	781b      	ldrb	r3, [r3, #0]
 800eb34:	b29a      	uxth	r2, r3
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	330d      	adds	r3, #13
 800eb3a:	781b      	ldrb	r3, [r3, #0]
 800eb3c:	b29b      	uxth	r3, r3
 800eb3e:	021b      	lsls	r3, r3, #8
 800eb40:	b29b      	uxth	r3, r3
 800eb42:	4313      	orrs	r3, r2
 800eb44:	b29a      	uxth	r2, r3
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800eb4a:	68bb      	ldr	r3, [r7, #8]
 800eb4c:	7b9a      	ldrb	r2, [r3, #14]
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800eb52:	68bb      	ldr	r3, [r7, #8]
 800eb54:	7bda      	ldrb	r2, [r3, #15]
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800eb5a:	68bb      	ldr	r3, [r7, #8]
 800eb5c:	7c1a      	ldrb	r2, [r3, #16]
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800eb62:	68bb      	ldr	r3, [r7, #8]
 800eb64:	7c5a      	ldrb	r2, [r3, #17]
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	745a      	strb	r2, [r3, #17]
  }
}
 800eb6a:	bf00      	nop
 800eb6c:	3714      	adds	r7, #20
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb74:	4770      	bx	lr

0800eb76 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800eb76:	b580      	push	{r7, lr}
 800eb78:	b08a      	sub	sp, #40	; 0x28
 800eb7a:	af00      	add	r7, sp, #0
 800eb7c:	60f8      	str	r0, [r7, #12]
 800eb7e:	60b9      	str	r1, [r7, #8]
 800eb80:	4613      	mov	r3, r2
 800eb82:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800eb84:	68bb      	ldr	r3, [r7, #8]
 800eb86:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800eb88:	2300      	movs	r3, #0
 800eb8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800eb8e:	2300      	movs	r3, #0
 800eb90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800eb94:	68bb      	ldr	r3, [r7, #8]
 800eb96:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800eb98:	68bb      	ldr	r3, [r7, #8]
 800eb9a:	781a      	ldrb	r2, [r3, #0]
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800eba0:	68bb      	ldr	r3, [r7, #8]
 800eba2:	785a      	ldrb	r2, [r3, #1]
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	3302      	adds	r3, #2
 800ebac:	781b      	ldrb	r3, [r3, #0]
 800ebae:	b29a      	uxth	r2, r3
 800ebb0:	68bb      	ldr	r3, [r7, #8]
 800ebb2:	3303      	adds	r3, #3
 800ebb4:	781b      	ldrb	r3, [r3, #0]
 800ebb6:	b29b      	uxth	r3, r3
 800ebb8:	021b      	lsls	r3, r3, #8
 800ebba:	b29b      	uxth	r3, r3
 800ebbc:	4313      	orrs	r3, r2
 800ebbe:	b29a      	uxth	r2, r3
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800ebc4:	68bb      	ldr	r3, [r7, #8]
 800ebc6:	791a      	ldrb	r2, [r3, #4]
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800ebcc:	68bb      	ldr	r3, [r7, #8]
 800ebce:	795a      	ldrb	r2, [r3, #5]
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800ebd4:	68bb      	ldr	r3, [r7, #8]
 800ebd6:	799a      	ldrb	r2, [r3, #6]
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800ebdc:	68bb      	ldr	r3, [r7, #8]
 800ebde:	79da      	ldrb	r2, [r3, #7]
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800ebe4:	68bb      	ldr	r3, [r7, #8]
 800ebe6:	7a1a      	ldrb	r2, [r3, #8]
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ebec:	88fb      	ldrh	r3, [r7, #6]
 800ebee:	2b09      	cmp	r3, #9
 800ebf0:	d95f      	bls.n	800ecb2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800ebf2:	2309      	movs	r3, #9
 800ebf4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ebfa:	e051      	b.n	800eca0 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ebfc:	f107 0316 	add.w	r3, r7, #22
 800ec00:	4619      	mov	r1, r3
 800ec02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec04:	f000 f8e8 	bl	800edd8 <USBH_GetNextDesc>
 800ec08:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800ec0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec0c:	785b      	ldrb	r3, [r3, #1]
 800ec0e:	2b04      	cmp	r3, #4
 800ec10:	d146      	bne.n	800eca0 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800ec12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ec16:	221a      	movs	r2, #26
 800ec18:	fb02 f303 	mul.w	r3, r2, r3
 800ec1c:	3308      	adds	r3, #8
 800ec1e:	68fa      	ldr	r2, [r7, #12]
 800ec20:	4413      	add	r3, r2
 800ec22:	3302      	adds	r3, #2
 800ec24:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800ec26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ec28:	69f8      	ldr	r0, [r7, #28]
 800ec2a:	f000 f846 	bl	800ecba <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800ec2e:	2300      	movs	r3, #0
 800ec30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800ec34:	2300      	movs	r3, #0
 800ec36:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ec38:	e022      	b.n	800ec80 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ec3a:	f107 0316 	add.w	r3, r7, #22
 800ec3e:	4619      	mov	r1, r3
 800ec40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec42:	f000 f8c9 	bl	800edd8 <USBH_GetNextDesc>
 800ec46:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800ec48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec4a:	785b      	ldrb	r3, [r3, #1]
 800ec4c:	2b05      	cmp	r3, #5
 800ec4e:	d117      	bne.n	800ec80 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ec50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ec54:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ec58:	3201      	adds	r2, #1
 800ec5a:	00d2      	lsls	r2, r2, #3
 800ec5c:	211a      	movs	r1, #26
 800ec5e:	fb01 f303 	mul.w	r3, r1, r3
 800ec62:	4413      	add	r3, r2
 800ec64:	3308      	adds	r3, #8
 800ec66:	68fa      	ldr	r2, [r7, #12]
 800ec68:	4413      	add	r3, r2
 800ec6a:	3304      	adds	r3, #4
 800ec6c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800ec6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ec70:	69b8      	ldr	r0, [r7, #24]
 800ec72:	f000 f851 	bl	800ed18 <USBH_ParseEPDesc>
            ep_ix++;
 800ec76:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ec7a:	3301      	adds	r3, #1
 800ec7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ec80:	69fb      	ldr	r3, [r7, #28]
 800ec82:	791b      	ldrb	r3, [r3, #4]
 800ec84:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ec88:	429a      	cmp	r2, r3
 800ec8a:	d204      	bcs.n	800ec96 <USBH_ParseCfgDesc+0x120>
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	885a      	ldrh	r2, [r3, #2]
 800ec90:	8afb      	ldrh	r3, [r7, #22]
 800ec92:	429a      	cmp	r2, r3
 800ec94:	d8d1      	bhi.n	800ec3a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800ec96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ec9a:	3301      	adds	r3, #1
 800ec9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800eca0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eca4:	2b01      	cmp	r3, #1
 800eca6:	d804      	bhi.n	800ecb2 <USBH_ParseCfgDesc+0x13c>
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	885a      	ldrh	r2, [r3, #2]
 800ecac:	8afb      	ldrh	r3, [r7, #22]
 800ecae:	429a      	cmp	r2, r3
 800ecb0:	d8a4      	bhi.n	800ebfc <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800ecb2:	bf00      	nop
 800ecb4:	3728      	adds	r7, #40	; 0x28
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	bd80      	pop	{r7, pc}

0800ecba <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800ecba:	b480      	push	{r7}
 800ecbc:	b083      	sub	sp, #12
 800ecbe:	af00      	add	r7, sp, #0
 800ecc0:	6078      	str	r0, [r7, #4]
 800ecc2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800ecc4:	683b      	ldr	r3, [r7, #0]
 800ecc6:	781a      	ldrb	r2, [r3, #0]
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800eccc:	683b      	ldr	r3, [r7, #0]
 800ecce:	785a      	ldrb	r2, [r3, #1]
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800ecd4:	683b      	ldr	r3, [r7, #0]
 800ecd6:	789a      	ldrb	r2, [r3, #2]
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800ecdc:	683b      	ldr	r3, [r7, #0]
 800ecde:	78da      	ldrb	r2, [r3, #3]
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800ece4:	683b      	ldr	r3, [r7, #0]
 800ece6:	791a      	ldrb	r2, [r3, #4]
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	795a      	ldrb	r2, [r3, #5]
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800ecf4:	683b      	ldr	r3, [r7, #0]
 800ecf6:	799a      	ldrb	r2, [r3, #6]
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800ecfc:	683b      	ldr	r3, [r7, #0]
 800ecfe:	79da      	ldrb	r2, [r3, #7]
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800ed04:	683b      	ldr	r3, [r7, #0]
 800ed06:	7a1a      	ldrb	r2, [r3, #8]
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	721a      	strb	r2, [r3, #8]
}
 800ed0c:	bf00      	nop
 800ed0e:	370c      	adds	r7, #12
 800ed10:	46bd      	mov	sp, r7
 800ed12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed16:	4770      	bx	lr

0800ed18 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800ed18:	b480      	push	{r7}
 800ed1a:	b083      	sub	sp, #12
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
 800ed20:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	781a      	ldrb	r2, [r3, #0]
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800ed2a:	683b      	ldr	r3, [r7, #0]
 800ed2c:	785a      	ldrb	r2, [r3, #1]
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	789a      	ldrb	r2, [r3, #2]
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	78da      	ldrb	r2, [r3, #3]
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	3304      	adds	r3, #4
 800ed46:	781b      	ldrb	r3, [r3, #0]
 800ed48:	b29a      	uxth	r2, r3
 800ed4a:	683b      	ldr	r3, [r7, #0]
 800ed4c:	3305      	adds	r3, #5
 800ed4e:	781b      	ldrb	r3, [r3, #0]
 800ed50:	b29b      	uxth	r3, r3
 800ed52:	021b      	lsls	r3, r3, #8
 800ed54:	b29b      	uxth	r3, r3
 800ed56:	4313      	orrs	r3, r2
 800ed58:	b29a      	uxth	r2, r3
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	799a      	ldrb	r2, [r3, #6]
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	719a      	strb	r2, [r3, #6]
}
 800ed66:	bf00      	nop
 800ed68:	370c      	adds	r7, #12
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed70:	4770      	bx	lr

0800ed72 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ed72:	b480      	push	{r7}
 800ed74:	b087      	sub	sp, #28
 800ed76:	af00      	add	r7, sp, #0
 800ed78:	60f8      	str	r0, [r7, #12]
 800ed7a:	60b9      	str	r1, [r7, #8]
 800ed7c:	4613      	mov	r3, r2
 800ed7e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	3301      	adds	r3, #1
 800ed84:	781b      	ldrb	r3, [r3, #0]
 800ed86:	2b03      	cmp	r3, #3
 800ed88:	d120      	bne.n	800edcc <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	781b      	ldrb	r3, [r3, #0]
 800ed8e:	1e9a      	subs	r2, r3, #2
 800ed90:	88fb      	ldrh	r3, [r7, #6]
 800ed92:	4293      	cmp	r3, r2
 800ed94:	bf28      	it	cs
 800ed96:	4613      	movcs	r3, r2
 800ed98:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	3302      	adds	r3, #2
 800ed9e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800eda0:	2300      	movs	r3, #0
 800eda2:	82fb      	strh	r3, [r7, #22]
 800eda4:	e00b      	b.n	800edbe <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800eda6:	8afb      	ldrh	r3, [r7, #22]
 800eda8:	68fa      	ldr	r2, [r7, #12]
 800edaa:	4413      	add	r3, r2
 800edac:	781a      	ldrb	r2, [r3, #0]
 800edae:	68bb      	ldr	r3, [r7, #8]
 800edb0:	701a      	strb	r2, [r3, #0]
      pdest++;
 800edb2:	68bb      	ldr	r3, [r7, #8]
 800edb4:	3301      	adds	r3, #1
 800edb6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800edb8:	8afb      	ldrh	r3, [r7, #22]
 800edba:	3302      	adds	r3, #2
 800edbc:	82fb      	strh	r3, [r7, #22]
 800edbe:	8afa      	ldrh	r2, [r7, #22]
 800edc0:	8abb      	ldrh	r3, [r7, #20]
 800edc2:	429a      	cmp	r2, r3
 800edc4:	d3ef      	bcc.n	800eda6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800edc6:	68bb      	ldr	r3, [r7, #8]
 800edc8:	2200      	movs	r2, #0
 800edca:	701a      	strb	r2, [r3, #0]
  }
}
 800edcc:	bf00      	nop
 800edce:	371c      	adds	r7, #28
 800edd0:	46bd      	mov	sp, r7
 800edd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd6:	4770      	bx	lr

0800edd8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800edd8:	b480      	push	{r7}
 800edda:	b085      	sub	sp, #20
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
 800ede0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	881a      	ldrh	r2, [r3, #0]
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	781b      	ldrb	r3, [r3, #0]
 800edea:	b29b      	uxth	r3, r3
 800edec:	4413      	add	r3, r2
 800edee:	b29a      	uxth	r2, r3
 800edf0:	683b      	ldr	r3, [r7, #0]
 800edf2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	781b      	ldrb	r3, [r3, #0]
 800edf8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	4413      	add	r3, r2
 800edfe:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ee00:	68fb      	ldr	r3, [r7, #12]
}
 800ee02:	4618      	mov	r0, r3
 800ee04:	3714      	adds	r7, #20
 800ee06:	46bd      	mov	sp, r7
 800ee08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0c:	4770      	bx	lr

0800ee0e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ee0e:	b580      	push	{r7, lr}
 800ee10:	b086      	sub	sp, #24
 800ee12:	af00      	add	r7, sp, #0
 800ee14:	60f8      	str	r0, [r7, #12]
 800ee16:	60b9      	str	r1, [r7, #8]
 800ee18:	4613      	mov	r3, r2
 800ee1a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ee1c:	2301      	movs	r3, #1
 800ee1e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	789b      	ldrb	r3, [r3, #2]
 800ee24:	2b01      	cmp	r3, #1
 800ee26:	d002      	beq.n	800ee2e <USBH_CtlReq+0x20>
 800ee28:	2b02      	cmp	r3, #2
 800ee2a:	d00f      	beq.n	800ee4c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800ee2c:	e027      	b.n	800ee7e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	68ba      	ldr	r2, [r7, #8]
 800ee32:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	88fa      	ldrh	r2, [r7, #6]
 800ee38:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	2201      	movs	r2, #1
 800ee3e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	2202      	movs	r2, #2
 800ee44:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ee46:	2301      	movs	r3, #1
 800ee48:	75fb      	strb	r3, [r7, #23]
      break;
 800ee4a:	e018      	b.n	800ee7e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800ee4c:	68f8      	ldr	r0, [r7, #12]
 800ee4e:	f000 f81b 	bl	800ee88 <USBH_HandleControl>
 800ee52:	4603      	mov	r3, r0
 800ee54:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ee56:	7dfb      	ldrb	r3, [r7, #23]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d002      	beq.n	800ee62 <USBH_CtlReq+0x54>
 800ee5c:	7dfb      	ldrb	r3, [r7, #23]
 800ee5e:	2b03      	cmp	r3, #3
 800ee60:	d106      	bne.n	800ee70 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	2201      	movs	r2, #1
 800ee66:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	761a      	strb	r2, [r3, #24]
      break;
 800ee6e:	e005      	b.n	800ee7c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800ee70:	7dfb      	ldrb	r3, [r7, #23]
 800ee72:	2b02      	cmp	r3, #2
 800ee74:	d102      	bne.n	800ee7c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	2201      	movs	r2, #1
 800ee7a:	709a      	strb	r2, [r3, #2]
      break;
 800ee7c:	bf00      	nop
  }
  return status;
 800ee7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee80:	4618      	mov	r0, r3
 800ee82:	3718      	adds	r7, #24
 800ee84:	46bd      	mov	sp, r7
 800ee86:	bd80      	pop	{r7, pc}

0800ee88 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b086      	sub	sp, #24
 800ee8c:	af02      	add	r7, sp, #8
 800ee8e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ee90:	2301      	movs	r3, #1
 800ee92:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ee94:	2300      	movs	r3, #0
 800ee96:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	7e1b      	ldrb	r3, [r3, #24]
 800ee9c:	3b01      	subs	r3, #1
 800ee9e:	2b0a      	cmp	r3, #10
 800eea0:	f200 8158 	bhi.w	800f154 <USBH_HandleControl+0x2cc>
 800eea4:	a201      	add	r2, pc, #4	; (adr r2, 800eeac <USBH_HandleControl+0x24>)
 800eea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeaa:	bf00      	nop
 800eeac:	0800eed9 	.word	0x0800eed9
 800eeb0:	0800eef3 	.word	0x0800eef3
 800eeb4:	0800ef5d 	.word	0x0800ef5d
 800eeb8:	0800ef83 	.word	0x0800ef83
 800eebc:	0800efbb 	.word	0x0800efbb
 800eec0:	0800efe7 	.word	0x0800efe7
 800eec4:	0800f039 	.word	0x0800f039
 800eec8:	0800f05b 	.word	0x0800f05b
 800eecc:	0800f097 	.word	0x0800f097
 800eed0:	0800f0bf 	.word	0x0800f0bf
 800eed4:	0800f0fd 	.word	0x0800f0fd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	f103 0110 	add.w	r1, r3, #16
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	795b      	ldrb	r3, [r3, #5]
 800eee2:	461a      	mov	r2, r3
 800eee4:	6878      	ldr	r0, [r7, #4]
 800eee6:	f000 f945 	bl	800f174 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	2202      	movs	r2, #2
 800eeee:	761a      	strb	r2, [r3, #24]
      break;
 800eef0:	e13b      	b.n	800f16a <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	795b      	ldrb	r3, [r3, #5]
 800eef6:	4619      	mov	r1, r3
 800eef8:	6878      	ldr	r0, [r7, #4]
 800eefa:	f003 fabb 	bl	8012474 <USBH_LL_GetURBState>
 800eefe:	4603      	mov	r3, r0
 800ef00:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ef02:	7bbb      	ldrb	r3, [r7, #14]
 800ef04:	2b01      	cmp	r3, #1
 800ef06:	d11e      	bne.n	800ef46 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	7c1b      	ldrb	r3, [r3, #16]
 800ef0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ef10:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	8adb      	ldrh	r3, [r3, #22]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d00a      	beq.n	800ef30 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ef1a:	7b7b      	ldrb	r3, [r7, #13]
 800ef1c:	2b80      	cmp	r3, #128	; 0x80
 800ef1e:	d103      	bne.n	800ef28 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	2203      	movs	r2, #3
 800ef24:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ef26:	e117      	b.n	800f158 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2205      	movs	r2, #5
 800ef2c:	761a      	strb	r2, [r3, #24]
      break;
 800ef2e:	e113      	b.n	800f158 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800ef30:	7b7b      	ldrb	r3, [r7, #13]
 800ef32:	2b80      	cmp	r3, #128	; 0x80
 800ef34:	d103      	bne.n	800ef3e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	2209      	movs	r2, #9
 800ef3a:	761a      	strb	r2, [r3, #24]
      break;
 800ef3c:	e10c      	b.n	800f158 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	2207      	movs	r2, #7
 800ef42:	761a      	strb	r2, [r3, #24]
      break;
 800ef44:	e108      	b.n	800f158 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ef46:	7bbb      	ldrb	r3, [r7, #14]
 800ef48:	2b04      	cmp	r3, #4
 800ef4a:	d003      	beq.n	800ef54 <USBH_HandleControl+0xcc>
 800ef4c:	7bbb      	ldrb	r3, [r7, #14]
 800ef4e:	2b02      	cmp	r3, #2
 800ef50:	f040 8102 	bne.w	800f158 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	220b      	movs	r2, #11
 800ef58:	761a      	strb	r2, [r3, #24]
      break;
 800ef5a:	e0fd      	b.n	800f158 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ef62:	b29a      	uxth	r2, r3
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	6899      	ldr	r1, [r3, #8]
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	899a      	ldrh	r2, [r3, #12]
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	791b      	ldrb	r3, [r3, #4]
 800ef74:	6878      	ldr	r0, [r7, #4]
 800ef76:	f000 f93c 	bl	800f1f2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	2204      	movs	r2, #4
 800ef7e:	761a      	strb	r2, [r3, #24]
      break;
 800ef80:	e0f3      	b.n	800f16a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	791b      	ldrb	r3, [r3, #4]
 800ef86:	4619      	mov	r1, r3
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	f003 fa73 	bl	8012474 <USBH_LL_GetURBState>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ef92:	7bbb      	ldrb	r3, [r7, #14]
 800ef94:	2b01      	cmp	r3, #1
 800ef96:	d102      	bne.n	800ef9e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	2209      	movs	r2, #9
 800ef9c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ef9e:	7bbb      	ldrb	r3, [r7, #14]
 800efa0:	2b05      	cmp	r3, #5
 800efa2:	d102      	bne.n	800efaa <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800efa4:	2303      	movs	r3, #3
 800efa6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800efa8:	e0d8      	b.n	800f15c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800efaa:	7bbb      	ldrb	r3, [r7, #14]
 800efac:	2b04      	cmp	r3, #4
 800efae:	f040 80d5 	bne.w	800f15c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	220b      	movs	r2, #11
 800efb6:	761a      	strb	r2, [r3, #24]
      break;
 800efb8:	e0d0      	b.n	800f15c <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	6899      	ldr	r1, [r3, #8]
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	899a      	ldrh	r2, [r3, #12]
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	7958      	ldrb	r0, [r3, #5]
 800efc6:	2301      	movs	r3, #1
 800efc8:	9300      	str	r3, [sp, #0]
 800efca:	4603      	mov	r3, r0
 800efcc:	6878      	ldr	r0, [r7, #4]
 800efce:	f000 f8eb 	bl	800f1a8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800efd8:	b29a      	uxth	r2, r3
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	2206      	movs	r2, #6
 800efe2:	761a      	strb	r2, [r3, #24]
      break;
 800efe4:	e0c1      	b.n	800f16a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	795b      	ldrb	r3, [r3, #5]
 800efea:	4619      	mov	r1, r3
 800efec:	6878      	ldr	r0, [r7, #4]
 800efee:	f003 fa41 	bl	8012474 <USBH_LL_GetURBState>
 800eff2:	4603      	mov	r3, r0
 800eff4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800eff6:	7bbb      	ldrb	r3, [r7, #14]
 800eff8:	2b01      	cmp	r3, #1
 800effa:	d103      	bne.n	800f004 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	2207      	movs	r2, #7
 800f000:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f002:	e0ad      	b.n	800f160 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800f004:	7bbb      	ldrb	r3, [r7, #14]
 800f006:	2b05      	cmp	r3, #5
 800f008:	d105      	bne.n	800f016 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	220c      	movs	r2, #12
 800f00e:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800f010:	2303      	movs	r3, #3
 800f012:	73fb      	strb	r3, [r7, #15]
      break;
 800f014:	e0a4      	b.n	800f160 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f016:	7bbb      	ldrb	r3, [r7, #14]
 800f018:	2b02      	cmp	r3, #2
 800f01a:	d103      	bne.n	800f024 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	2205      	movs	r2, #5
 800f020:	761a      	strb	r2, [r3, #24]
      break;
 800f022:	e09d      	b.n	800f160 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800f024:	7bbb      	ldrb	r3, [r7, #14]
 800f026:	2b04      	cmp	r3, #4
 800f028:	f040 809a 	bne.w	800f160 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	220b      	movs	r2, #11
 800f030:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800f032:	2302      	movs	r3, #2
 800f034:	73fb      	strb	r3, [r7, #15]
      break;
 800f036:	e093      	b.n	800f160 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	791b      	ldrb	r3, [r3, #4]
 800f03c:	2200      	movs	r2, #0
 800f03e:	2100      	movs	r1, #0
 800f040:	6878      	ldr	r0, [r7, #4]
 800f042:	f000 f8d6 	bl	800f1f2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f04c:	b29a      	uxth	r2, r3
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	2208      	movs	r2, #8
 800f056:	761a      	strb	r2, [r3, #24]

      break;
 800f058:	e087      	b.n	800f16a <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	791b      	ldrb	r3, [r3, #4]
 800f05e:	4619      	mov	r1, r3
 800f060:	6878      	ldr	r0, [r7, #4]
 800f062:	f003 fa07 	bl	8012474 <USBH_LL_GetURBState>
 800f066:	4603      	mov	r3, r0
 800f068:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f06a:	7bbb      	ldrb	r3, [r7, #14]
 800f06c:	2b01      	cmp	r3, #1
 800f06e:	d105      	bne.n	800f07c <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	220d      	movs	r2, #13
 800f074:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800f076:	2300      	movs	r3, #0
 800f078:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f07a:	e073      	b.n	800f164 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800f07c:	7bbb      	ldrb	r3, [r7, #14]
 800f07e:	2b04      	cmp	r3, #4
 800f080:	d103      	bne.n	800f08a <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	220b      	movs	r2, #11
 800f086:	761a      	strb	r2, [r3, #24]
      break;
 800f088:	e06c      	b.n	800f164 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800f08a:	7bbb      	ldrb	r3, [r7, #14]
 800f08c:	2b05      	cmp	r3, #5
 800f08e:	d169      	bne.n	800f164 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800f090:	2303      	movs	r3, #3
 800f092:	73fb      	strb	r3, [r7, #15]
      break;
 800f094:	e066      	b.n	800f164 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	795a      	ldrb	r2, [r3, #5]
 800f09a:	2301      	movs	r3, #1
 800f09c:	9300      	str	r3, [sp, #0]
 800f09e:	4613      	mov	r3, r2
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	2100      	movs	r1, #0
 800f0a4:	6878      	ldr	r0, [r7, #4]
 800f0a6:	f000 f87f 	bl	800f1a8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f0b0:	b29a      	uxth	r2, r3
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	220a      	movs	r2, #10
 800f0ba:	761a      	strb	r2, [r3, #24]
      break;
 800f0bc:	e055      	b.n	800f16a <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	795b      	ldrb	r3, [r3, #5]
 800f0c2:	4619      	mov	r1, r3
 800f0c4:	6878      	ldr	r0, [r7, #4]
 800f0c6:	f003 f9d5 	bl	8012474 <USBH_LL_GetURBState>
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800f0ce:	7bbb      	ldrb	r3, [r7, #14]
 800f0d0:	2b01      	cmp	r3, #1
 800f0d2:	d105      	bne.n	800f0e0 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	220d      	movs	r2, #13
 800f0dc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f0de:	e043      	b.n	800f168 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f0e0:	7bbb      	ldrb	r3, [r7, #14]
 800f0e2:	2b02      	cmp	r3, #2
 800f0e4:	d103      	bne.n	800f0ee <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	2209      	movs	r2, #9
 800f0ea:	761a      	strb	r2, [r3, #24]
      break;
 800f0ec:	e03c      	b.n	800f168 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800f0ee:	7bbb      	ldrb	r3, [r7, #14]
 800f0f0:	2b04      	cmp	r3, #4
 800f0f2:	d139      	bne.n	800f168 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	220b      	movs	r2, #11
 800f0f8:	761a      	strb	r2, [r3, #24]
      break;
 800f0fa:	e035      	b.n	800f168 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	7e5b      	ldrb	r3, [r3, #25]
 800f100:	3301      	adds	r3, #1
 800f102:	b2da      	uxtb	r2, r3
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	765a      	strb	r2, [r3, #25]
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	7e5b      	ldrb	r3, [r3, #25]
 800f10c:	2b02      	cmp	r3, #2
 800f10e:	d806      	bhi.n	800f11e <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2201      	movs	r2, #1
 800f114:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	2201      	movs	r2, #1
 800f11a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800f11c:	e025      	b.n	800f16a <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f124:	2106      	movs	r1, #6
 800f126:	6878      	ldr	r0, [r7, #4]
 800f128:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	2200      	movs	r2, #0
 800f12e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	795b      	ldrb	r3, [r3, #5]
 800f134:	4619      	mov	r1, r3
 800f136:	6878      	ldr	r0, [r7, #4]
 800f138:	f000 f90c 	bl	800f354 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	791b      	ldrb	r3, [r3, #4]
 800f140:	4619      	mov	r1, r3
 800f142:	6878      	ldr	r0, [r7, #4]
 800f144:	f000 f906 	bl	800f354 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	2200      	movs	r2, #0
 800f14c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800f14e:	2302      	movs	r3, #2
 800f150:	73fb      	strb	r3, [r7, #15]
      break;
 800f152:	e00a      	b.n	800f16a <USBH_HandleControl+0x2e2>

    default:
      break;
 800f154:	bf00      	nop
 800f156:	e008      	b.n	800f16a <USBH_HandleControl+0x2e2>
      break;
 800f158:	bf00      	nop
 800f15a:	e006      	b.n	800f16a <USBH_HandleControl+0x2e2>
      break;
 800f15c:	bf00      	nop
 800f15e:	e004      	b.n	800f16a <USBH_HandleControl+0x2e2>
      break;
 800f160:	bf00      	nop
 800f162:	e002      	b.n	800f16a <USBH_HandleControl+0x2e2>
      break;
 800f164:	bf00      	nop
 800f166:	e000      	b.n	800f16a <USBH_HandleControl+0x2e2>
      break;
 800f168:	bf00      	nop
  }

  return status;
 800f16a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f16c:	4618      	mov	r0, r3
 800f16e:	3710      	adds	r7, #16
 800f170:	46bd      	mov	sp, r7
 800f172:	bd80      	pop	{r7, pc}

0800f174 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800f174:	b580      	push	{r7, lr}
 800f176:	b088      	sub	sp, #32
 800f178:	af04      	add	r7, sp, #16
 800f17a:	60f8      	str	r0, [r7, #12]
 800f17c:	60b9      	str	r1, [r7, #8]
 800f17e:	4613      	mov	r3, r2
 800f180:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f182:	79f9      	ldrb	r1, [r7, #7]
 800f184:	2300      	movs	r3, #0
 800f186:	9303      	str	r3, [sp, #12]
 800f188:	2308      	movs	r3, #8
 800f18a:	9302      	str	r3, [sp, #8]
 800f18c:	68bb      	ldr	r3, [r7, #8]
 800f18e:	9301      	str	r3, [sp, #4]
 800f190:	2300      	movs	r3, #0
 800f192:	9300      	str	r3, [sp, #0]
 800f194:	2300      	movs	r3, #0
 800f196:	2200      	movs	r2, #0
 800f198:	68f8      	ldr	r0, [r7, #12]
 800f19a:	f003 f93a 	bl	8012412 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800f19e:	2300      	movs	r3, #0
}
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	3710      	adds	r7, #16
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bd80      	pop	{r7, pc}

0800f1a8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b088      	sub	sp, #32
 800f1ac:	af04      	add	r7, sp, #16
 800f1ae:	60f8      	str	r0, [r7, #12]
 800f1b0:	60b9      	str	r1, [r7, #8]
 800f1b2:	4611      	mov	r1, r2
 800f1b4:	461a      	mov	r2, r3
 800f1b6:	460b      	mov	r3, r1
 800f1b8:	80fb      	strh	r3, [r7, #6]
 800f1ba:	4613      	mov	r3, r2
 800f1bc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d001      	beq.n	800f1cc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f1cc:	7979      	ldrb	r1, [r7, #5]
 800f1ce:	7e3b      	ldrb	r3, [r7, #24]
 800f1d0:	9303      	str	r3, [sp, #12]
 800f1d2:	88fb      	ldrh	r3, [r7, #6]
 800f1d4:	9302      	str	r3, [sp, #8]
 800f1d6:	68bb      	ldr	r3, [r7, #8]
 800f1d8:	9301      	str	r3, [sp, #4]
 800f1da:	2301      	movs	r3, #1
 800f1dc:	9300      	str	r3, [sp, #0]
 800f1de:	2300      	movs	r3, #0
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	68f8      	ldr	r0, [r7, #12]
 800f1e4:	f003 f915 	bl	8012412 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800f1e8:	2300      	movs	r3, #0
}
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	3710      	adds	r7, #16
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	bd80      	pop	{r7, pc}

0800f1f2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800f1f2:	b580      	push	{r7, lr}
 800f1f4:	b088      	sub	sp, #32
 800f1f6:	af04      	add	r7, sp, #16
 800f1f8:	60f8      	str	r0, [r7, #12]
 800f1fa:	60b9      	str	r1, [r7, #8]
 800f1fc:	4611      	mov	r1, r2
 800f1fe:	461a      	mov	r2, r3
 800f200:	460b      	mov	r3, r1
 800f202:	80fb      	strh	r3, [r7, #6]
 800f204:	4613      	mov	r3, r2
 800f206:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f208:	7979      	ldrb	r1, [r7, #5]
 800f20a:	2300      	movs	r3, #0
 800f20c:	9303      	str	r3, [sp, #12]
 800f20e:	88fb      	ldrh	r3, [r7, #6]
 800f210:	9302      	str	r3, [sp, #8]
 800f212:	68bb      	ldr	r3, [r7, #8]
 800f214:	9301      	str	r3, [sp, #4]
 800f216:	2301      	movs	r3, #1
 800f218:	9300      	str	r3, [sp, #0]
 800f21a:	2300      	movs	r3, #0
 800f21c:	2201      	movs	r2, #1
 800f21e:	68f8      	ldr	r0, [r7, #12]
 800f220:	f003 f8f7 	bl	8012412 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800f224:	2300      	movs	r3, #0

}
 800f226:	4618      	mov	r0, r3
 800f228:	3710      	adds	r7, #16
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bd80      	pop	{r7, pc}

0800f22e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800f22e:	b580      	push	{r7, lr}
 800f230:	b088      	sub	sp, #32
 800f232:	af04      	add	r7, sp, #16
 800f234:	60f8      	str	r0, [r7, #12]
 800f236:	60b9      	str	r1, [r7, #8]
 800f238:	4611      	mov	r1, r2
 800f23a:	461a      	mov	r2, r3
 800f23c:	460b      	mov	r3, r1
 800f23e:	80fb      	strh	r3, [r7, #6]
 800f240:	4613      	mov	r3, r2
 800f242:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d001      	beq.n	800f252 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800f24e:	2300      	movs	r3, #0
 800f250:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f252:	7979      	ldrb	r1, [r7, #5]
 800f254:	7e3b      	ldrb	r3, [r7, #24]
 800f256:	9303      	str	r3, [sp, #12]
 800f258:	88fb      	ldrh	r3, [r7, #6]
 800f25a:	9302      	str	r3, [sp, #8]
 800f25c:	68bb      	ldr	r3, [r7, #8]
 800f25e:	9301      	str	r3, [sp, #4]
 800f260:	2301      	movs	r3, #1
 800f262:	9300      	str	r3, [sp, #0]
 800f264:	2302      	movs	r3, #2
 800f266:	2200      	movs	r2, #0
 800f268:	68f8      	ldr	r0, [r7, #12]
 800f26a:	f003 f8d2 	bl	8012412 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800f26e:	2300      	movs	r3, #0
}
 800f270:	4618      	mov	r0, r3
 800f272:	3710      	adds	r7, #16
 800f274:	46bd      	mov	sp, r7
 800f276:	bd80      	pop	{r7, pc}

0800f278 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b088      	sub	sp, #32
 800f27c:	af04      	add	r7, sp, #16
 800f27e:	60f8      	str	r0, [r7, #12]
 800f280:	60b9      	str	r1, [r7, #8]
 800f282:	4611      	mov	r1, r2
 800f284:	461a      	mov	r2, r3
 800f286:	460b      	mov	r3, r1
 800f288:	80fb      	strh	r3, [r7, #6]
 800f28a:	4613      	mov	r3, r2
 800f28c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f28e:	7979      	ldrb	r1, [r7, #5]
 800f290:	2300      	movs	r3, #0
 800f292:	9303      	str	r3, [sp, #12]
 800f294:	88fb      	ldrh	r3, [r7, #6]
 800f296:	9302      	str	r3, [sp, #8]
 800f298:	68bb      	ldr	r3, [r7, #8]
 800f29a:	9301      	str	r3, [sp, #4]
 800f29c:	2301      	movs	r3, #1
 800f29e:	9300      	str	r3, [sp, #0]
 800f2a0:	2302      	movs	r3, #2
 800f2a2:	2201      	movs	r2, #1
 800f2a4:	68f8      	ldr	r0, [r7, #12]
 800f2a6:	f003 f8b4 	bl	8012412 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800f2aa:	2300      	movs	r3, #0
}
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	3710      	adds	r7, #16
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	bd80      	pop	{r7, pc}

0800f2b4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b086      	sub	sp, #24
 800f2b8:	af04      	add	r7, sp, #16
 800f2ba:	6078      	str	r0, [r7, #4]
 800f2bc:	4608      	mov	r0, r1
 800f2be:	4611      	mov	r1, r2
 800f2c0:	461a      	mov	r2, r3
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	70fb      	strb	r3, [r7, #3]
 800f2c6:	460b      	mov	r3, r1
 800f2c8:	70bb      	strb	r3, [r7, #2]
 800f2ca:	4613      	mov	r3, r2
 800f2cc:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800f2ce:	7878      	ldrb	r0, [r7, #1]
 800f2d0:	78ba      	ldrb	r2, [r7, #2]
 800f2d2:	78f9      	ldrb	r1, [r7, #3]
 800f2d4:	8b3b      	ldrh	r3, [r7, #24]
 800f2d6:	9302      	str	r3, [sp, #8]
 800f2d8:	7d3b      	ldrb	r3, [r7, #20]
 800f2da:	9301      	str	r3, [sp, #4]
 800f2dc:	7c3b      	ldrb	r3, [r7, #16]
 800f2de:	9300      	str	r3, [sp, #0]
 800f2e0:	4603      	mov	r3, r0
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	f003 f847 	bl	8012376 <USBH_LL_OpenPipe>

  return USBH_OK;
 800f2e8:	2300      	movs	r3, #0
}
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	3708      	adds	r7, #8
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	bd80      	pop	{r7, pc}

0800f2f2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800f2f2:	b580      	push	{r7, lr}
 800f2f4:	b082      	sub	sp, #8
 800f2f6:	af00      	add	r7, sp, #0
 800f2f8:	6078      	str	r0, [r7, #4]
 800f2fa:	460b      	mov	r3, r1
 800f2fc:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800f2fe:	78fb      	ldrb	r3, [r7, #3]
 800f300:	4619      	mov	r1, r3
 800f302:	6878      	ldr	r0, [r7, #4]
 800f304:	f003 f866 	bl	80123d4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800f308:	2300      	movs	r3, #0
}
 800f30a:	4618      	mov	r0, r3
 800f30c:	3708      	adds	r7, #8
 800f30e:	46bd      	mov	sp, r7
 800f310:	bd80      	pop	{r7, pc}

0800f312 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800f312:	b580      	push	{r7, lr}
 800f314:	b084      	sub	sp, #16
 800f316:	af00      	add	r7, sp, #0
 800f318:	6078      	str	r0, [r7, #4]
 800f31a:	460b      	mov	r3, r1
 800f31c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800f31e:	6878      	ldr	r0, [r7, #4]
 800f320:	f000 f836 	bl	800f390 <USBH_GetFreePipe>
 800f324:	4603      	mov	r3, r0
 800f326:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800f328:	89fb      	ldrh	r3, [r7, #14]
 800f32a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f32e:	4293      	cmp	r3, r2
 800f330:	d00a      	beq.n	800f348 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800f332:	78fa      	ldrb	r2, [r7, #3]
 800f334:	89fb      	ldrh	r3, [r7, #14]
 800f336:	f003 030f 	and.w	r3, r3, #15
 800f33a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f33e:	6879      	ldr	r1, [r7, #4]
 800f340:	33e0      	adds	r3, #224	; 0xe0
 800f342:	009b      	lsls	r3, r3, #2
 800f344:	440b      	add	r3, r1
 800f346:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800f348:	89fb      	ldrh	r3, [r7, #14]
 800f34a:	b2db      	uxtb	r3, r3
}
 800f34c:	4618      	mov	r0, r3
 800f34e:	3710      	adds	r7, #16
 800f350:	46bd      	mov	sp, r7
 800f352:	bd80      	pop	{r7, pc}

0800f354 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800f354:	b480      	push	{r7}
 800f356:	b083      	sub	sp, #12
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
 800f35c:	460b      	mov	r3, r1
 800f35e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800f360:	78fb      	ldrb	r3, [r7, #3]
 800f362:	2b0a      	cmp	r3, #10
 800f364:	d80d      	bhi.n	800f382 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800f366:	78fb      	ldrb	r3, [r7, #3]
 800f368:	687a      	ldr	r2, [r7, #4]
 800f36a:	33e0      	adds	r3, #224	; 0xe0
 800f36c:	009b      	lsls	r3, r3, #2
 800f36e:	4413      	add	r3, r2
 800f370:	685a      	ldr	r2, [r3, #4]
 800f372:	78fb      	ldrb	r3, [r7, #3]
 800f374:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800f378:	6879      	ldr	r1, [r7, #4]
 800f37a:	33e0      	adds	r3, #224	; 0xe0
 800f37c:	009b      	lsls	r3, r3, #2
 800f37e:	440b      	add	r3, r1
 800f380:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800f382:	2300      	movs	r3, #0
}
 800f384:	4618      	mov	r0, r3
 800f386:	370c      	adds	r7, #12
 800f388:	46bd      	mov	sp, r7
 800f38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38e:	4770      	bx	lr

0800f390 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800f390:	b480      	push	{r7}
 800f392:	b085      	sub	sp, #20
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800f398:	2300      	movs	r3, #0
 800f39a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800f39c:	2300      	movs	r3, #0
 800f39e:	73fb      	strb	r3, [r7, #15]
 800f3a0:	e00f      	b.n	800f3c2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800f3a2:	7bfb      	ldrb	r3, [r7, #15]
 800f3a4:	687a      	ldr	r2, [r7, #4]
 800f3a6:	33e0      	adds	r3, #224	; 0xe0
 800f3a8:	009b      	lsls	r3, r3, #2
 800f3aa:	4413      	add	r3, r2
 800f3ac:	685b      	ldr	r3, [r3, #4]
 800f3ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d102      	bne.n	800f3bc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800f3b6:	7bfb      	ldrb	r3, [r7, #15]
 800f3b8:	b29b      	uxth	r3, r3
 800f3ba:	e007      	b.n	800f3cc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800f3bc:	7bfb      	ldrb	r3, [r7, #15]
 800f3be:	3301      	adds	r3, #1
 800f3c0:	73fb      	strb	r3, [r7, #15]
 800f3c2:	7bfb      	ldrb	r3, [r7, #15]
 800f3c4:	2b0a      	cmp	r3, #10
 800f3c6:	d9ec      	bls.n	800f3a2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800f3c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	3714      	adds	r7, #20
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d6:	4770      	bx	lr

0800f3d8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b084      	sub	sp, #16
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	4603      	mov	r3, r0
 800f3e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f3e2:	79fb      	ldrb	r3, [r7, #7]
 800f3e4:	4a08      	ldr	r2, [pc, #32]	; (800f408 <disk_status+0x30>)
 800f3e6:	009b      	lsls	r3, r3, #2
 800f3e8:	4413      	add	r3, r2
 800f3ea:	685b      	ldr	r3, [r3, #4]
 800f3ec:	685b      	ldr	r3, [r3, #4]
 800f3ee:	79fa      	ldrb	r2, [r7, #7]
 800f3f0:	4905      	ldr	r1, [pc, #20]	; (800f408 <disk_status+0x30>)
 800f3f2:	440a      	add	r2, r1
 800f3f4:	7a12      	ldrb	r2, [r2, #8]
 800f3f6:	4610      	mov	r0, r2
 800f3f8:	4798      	blx	r3
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f3fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800f400:	4618      	mov	r0, r3
 800f402:	3710      	adds	r7, #16
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}
 800f408:	20002258 	.word	0x20002258

0800f40c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b084      	sub	sp, #16
 800f410:	af00      	add	r7, sp, #0
 800f412:	4603      	mov	r3, r0
 800f414:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f416:	2300      	movs	r3, #0
 800f418:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f41a:	79fb      	ldrb	r3, [r7, #7]
 800f41c:	4a0d      	ldr	r2, [pc, #52]	; (800f454 <disk_initialize+0x48>)
 800f41e:	5cd3      	ldrb	r3, [r2, r3]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d111      	bne.n	800f448 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800f424:	79fb      	ldrb	r3, [r7, #7]
 800f426:	4a0b      	ldr	r2, [pc, #44]	; (800f454 <disk_initialize+0x48>)
 800f428:	2101      	movs	r1, #1
 800f42a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f42c:	79fb      	ldrb	r3, [r7, #7]
 800f42e:	4a09      	ldr	r2, [pc, #36]	; (800f454 <disk_initialize+0x48>)
 800f430:	009b      	lsls	r3, r3, #2
 800f432:	4413      	add	r3, r2
 800f434:	685b      	ldr	r3, [r3, #4]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	79fa      	ldrb	r2, [r7, #7]
 800f43a:	4906      	ldr	r1, [pc, #24]	; (800f454 <disk_initialize+0x48>)
 800f43c:	440a      	add	r2, r1
 800f43e:	7a12      	ldrb	r2, [r2, #8]
 800f440:	4610      	mov	r0, r2
 800f442:	4798      	blx	r3
 800f444:	4603      	mov	r3, r0
 800f446:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f448:	7bfb      	ldrb	r3, [r7, #15]
}
 800f44a:	4618      	mov	r0, r3
 800f44c:	3710      	adds	r7, #16
 800f44e:	46bd      	mov	sp, r7
 800f450:	bd80      	pop	{r7, pc}
 800f452:	bf00      	nop
 800f454:	20002258 	.word	0x20002258

0800f458 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f458:	b590      	push	{r4, r7, lr}
 800f45a:	b087      	sub	sp, #28
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	60b9      	str	r1, [r7, #8]
 800f460:	607a      	str	r2, [r7, #4]
 800f462:	603b      	str	r3, [r7, #0]
 800f464:	4603      	mov	r3, r0
 800f466:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f468:	7bfb      	ldrb	r3, [r7, #15]
 800f46a:	4a0a      	ldr	r2, [pc, #40]	; (800f494 <disk_read+0x3c>)
 800f46c:	009b      	lsls	r3, r3, #2
 800f46e:	4413      	add	r3, r2
 800f470:	685b      	ldr	r3, [r3, #4]
 800f472:	689c      	ldr	r4, [r3, #8]
 800f474:	7bfb      	ldrb	r3, [r7, #15]
 800f476:	4a07      	ldr	r2, [pc, #28]	; (800f494 <disk_read+0x3c>)
 800f478:	4413      	add	r3, r2
 800f47a:	7a18      	ldrb	r0, [r3, #8]
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	687a      	ldr	r2, [r7, #4]
 800f480:	68b9      	ldr	r1, [r7, #8]
 800f482:	47a0      	blx	r4
 800f484:	4603      	mov	r3, r0
 800f486:	75fb      	strb	r3, [r7, #23]
  return res;
 800f488:	7dfb      	ldrb	r3, [r7, #23]
}
 800f48a:	4618      	mov	r0, r3
 800f48c:	371c      	adds	r7, #28
 800f48e:	46bd      	mov	sp, r7
 800f490:	bd90      	pop	{r4, r7, pc}
 800f492:	bf00      	nop
 800f494:	20002258 	.word	0x20002258

0800f498 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f498:	b590      	push	{r4, r7, lr}
 800f49a:	b087      	sub	sp, #28
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	60b9      	str	r1, [r7, #8]
 800f4a0:	607a      	str	r2, [r7, #4]
 800f4a2:	603b      	str	r3, [r7, #0]
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f4a8:	7bfb      	ldrb	r3, [r7, #15]
 800f4aa:	4a0a      	ldr	r2, [pc, #40]	; (800f4d4 <disk_write+0x3c>)
 800f4ac:	009b      	lsls	r3, r3, #2
 800f4ae:	4413      	add	r3, r2
 800f4b0:	685b      	ldr	r3, [r3, #4]
 800f4b2:	68dc      	ldr	r4, [r3, #12]
 800f4b4:	7bfb      	ldrb	r3, [r7, #15]
 800f4b6:	4a07      	ldr	r2, [pc, #28]	; (800f4d4 <disk_write+0x3c>)
 800f4b8:	4413      	add	r3, r2
 800f4ba:	7a18      	ldrb	r0, [r3, #8]
 800f4bc:	683b      	ldr	r3, [r7, #0]
 800f4be:	687a      	ldr	r2, [r7, #4]
 800f4c0:	68b9      	ldr	r1, [r7, #8]
 800f4c2:	47a0      	blx	r4
 800f4c4:	4603      	mov	r3, r0
 800f4c6:	75fb      	strb	r3, [r7, #23]
  return res;
 800f4c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	371c      	adds	r7, #28
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	bd90      	pop	{r4, r7, pc}
 800f4d2:	bf00      	nop
 800f4d4:	20002258 	.word	0x20002258

0800f4d8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b084      	sub	sp, #16
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	4603      	mov	r3, r0
 800f4e0:	603a      	str	r2, [r7, #0]
 800f4e2:	71fb      	strb	r3, [r7, #7]
 800f4e4:	460b      	mov	r3, r1
 800f4e6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f4e8:	79fb      	ldrb	r3, [r7, #7]
 800f4ea:	4a09      	ldr	r2, [pc, #36]	; (800f510 <disk_ioctl+0x38>)
 800f4ec:	009b      	lsls	r3, r3, #2
 800f4ee:	4413      	add	r3, r2
 800f4f0:	685b      	ldr	r3, [r3, #4]
 800f4f2:	691b      	ldr	r3, [r3, #16]
 800f4f4:	79fa      	ldrb	r2, [r7, #7]
 800f4f6:	4906      	ldr	r1, [pc, #24]	; (800f510 <disk_ioctl+0x38>)
 800f4f8:	440a      	add	r2, r1
 800f4fa:	7a10      	ldrb	r0, [r2, #8]
 800f4fc:	79b9      	ldrb	r1, [r7, #6]
 800f4fe:	683a      	ldr	r2, [r7, #0]
 800f500:	4798      	blx	r3
 800f502:	4603      	mov	r3, r0
 800f504:	73fb      	strb	r3, [r7, #15]
  return res;
 800f506:	7bfb      	ldrb	r3, [r7, #15]
}
 800f508:	4618      	mov	r0, r3
 800f50a:	3710      	adds	r7, #16
 800f50c:	46bd      	mov	sp, r7
 800f50e:	bd80      	pop	{r7, pc}
 800f510:	20002258 	.word	0x20002258

0800f514 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f514:	b480      	push	{r7}
 800f516:	b085      	sub	sp, #20
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	3301      	adds	r3, #1
 800f520:	781b      	ldrb	r3, [r3, #0]
 800f522:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f524:	89fb      	ldrh	r3, [r7, #14]
 800f526:	021b      	lsls	r3, r3, #8
 800f528:	b21a      	sxth	r2, r3
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	781b      	ldrb	r3, [r3, #0]
 800f52e:	b21b      	sxth	r3, r3
 800f530:	4313      	orrs	r3, r2
 800f532:	b21b      	sxth	r3, r3
 800f534:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f536:	89fb      	ldrh	r3, [r7, #14]
}
 800f538:	4618      	mov	r0, r3
 800f53a:	3714      	adds	r7, #20
 800f53c:	46bd      	mov	sp, r7
 800f53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f542:	4770      	bx	lr

0800f544 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f544:	b480      	push	{r7}
 800f546:	b085      	sub	sp, #20
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	3303      	adds	r3, #3
 800f550:	781b      	ldrb	r3, [r3, #0]
 800f552:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	021b      	lsls	r3, r3, #8
 800f558:	687a      	ldr	r2, [r7, #4]
 800f55a:	3202      	adds	r2, #2
 800f55c:	7812      	ldrb	r2, [r2, #0]
 800f55e:	4313      	orrs	r3, r2
 800f560:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	021b      	lsls	r3, r3, #8
 800f566:	687a      	ldr	r2, [r7, #4]
 800f568:	3201      	adds	r2, #1
 800f56a:	7812      	ldrb	r2, [r2, #0]
 800f56c:	4313      	orrs	r3, r2
 800f56e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	021b      	lsls	r3, r3, #8
 800f574:	687a      	ldr	r2, [r7, #4]
 800f576:	7812      	ldrb	r2, [r2, #0]
 800f578:	4313      	orrs	r3, r2
 800f57a:	60fb      	str	r3, [r7, #12]
	return rv;
 800f57c:	68fb      	ldr	r3, [r7, #12]
}
 800f57e:	4618      	mov	r0, r3
 800f580:	3714      	adds	r7, #20
 800f582:	46bd      	mov	sp, r7
 800f584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f588:	4770      	bx	lr

0800f58a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f58a:	b480      	push	{r7}
 800f58c:	b083      	sub	sp, #12
 800f58e:	af00      	add	r7, sp, #0
 800f590:	6078      	str	r0, [r7, #4]
 800f592:	460b      	mov	r3, r1
 800f594:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	1c5a      	adds	r2, r3, #1
 800f59a:	607a      	str	r2, [r7, #4]
 800f59c:	887a      	ldrh	r2, [r7, #2]
 800f59e:	b2d2      	uxtb	r2, r2
 800f5a0:	701a      	strb	r2, [r3, #0]
 800f5a2:	887b      	ldrh	r3, [r7, #2]
 800f5a4:	0a1b      	lsrs	r3, r3, #8
 800f5a6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	1c5a      	adds	r2, r3, #1
 800f5ac:	607a      	str	r2, [r7, #4]
 800f5ae:	887a      	ldrh	r2, [r7, #2]
 800f5b0:	b2d2      	uxtb	r2, r2
 800f5b2:	701a      	strb	r2, [r3, #0]
}
 800f5b4:	bf00      	nop
 800f5b6:	370c      	adds	r7, #12
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5be:	4770      	bx	lr

0800f5c0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f5c0:	b480      	push	{r7}
 800f5c2:	b083      	sub	sp, #12
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
 800f5c8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	1c5a      	adds	r2, r3, #1
 800f5ce:	607a      	str	r2, [r7, #4]
 800f5d0:	683a      	ldr	r2, [r7, #0]
 800f5d2:	b2d2      	uxtb	r2, r2
 800f5d4:	701a      	strb	r2, [r3, #0]
 800f5d6:	683b      	ldr	r3, [r7, #0]
 800f5d8:	0a1b      	lsrs	r3, r3, #8
 800f5da:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	1c5a      	adds	r2, r3, #1
 800f5e0:	607a      	str	r2, [r7, #4]
 800f5e2:	683a      	ldr	r2, [r7, #0]
 800f5e4:	b2d2      	uxtb	r2, r2
 800f5e6:	701a      	strb	r2, [r3, #0]
 800f5e8:	683b      	ldr	r3, [r7, #0]
 800f5ea:	0a1b      	lsrs	r3, r3, #8
 800f5ec:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	1c5a      	adds	r2, r3, #1
 800f5f2:	607a      	str	r2, [r7, #4]
 800f5f4:	683a      	ldr	r2, [r7, #0]
 800f5f6:	b2d2      	uxtb	r2, r2
 800f5f8:	701a      	strb	r2, [r3, #0]
 800f5fa:	683b      	ldr	r3, [r7, #0]
 800f5fc:	0a1b      	lsrs	r3, r3, #8
 800f5fe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	1c5a      	adds	r2, r3, #1
 800f604:	607a      	str	r2, [r7, #4]
 800f606:	683a      	ldr	r2, [r7, #0]
 800f608:	b2d2      	uxtb	r2, r2
 800f60a:	701a      	strb	r2, [r3, #0]
}
 800f60c:	bf00      	nop
 800f60e:	370c      	adds	r7, #12
 800f610:	46bd      	mov	sp, r7
 800f612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f616:	4770      	bx	lr

0800f618 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f618:	b480      	push	{r7}
 800f61a:	b087      	sub	sp, #28
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	60f8      	str	r0, [r7, #12]
 800f620:	60b9      	str	r1, [r7, #8]
 800f622:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f628:	68bb      	ldr	r3, [r7, #8]
 800f62a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d00d      	beq.n	800f64e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f632:	693a      	ldr	r2, [r7, #16]
 800f634:	1c53      	adds	r3, r2, #1
 800f636:	613b      	str	r3, [r7, #16]
 800f638:	697b      	ldr	r3, [r7, #20]
 800f63a:	1c59      	adds	r1, r3, #1
 800f63c:	6179      	str	r1, [r7, #20]
 800f63e:	7812      	ldrb	r2, [r2, #0]
 800f640:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	3b01      	subs	r3, #1
 800f646:	607b      	str	r3, [r7, #4]
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d1f1      	bne.n	800f632 <mem_cpy+0x1a>
	}
}
 800f64e:	bf00      	nop
 800f650:	371c      	adds	r7, #28
 800f652:	46bd      	mov	sp, r7
 800f654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f658:	4770      	bx	lr

0800f65a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f65a:	b480      	push	{r7}
 800f65c:	b087      	sub	sp, #28
 800f65e:	af00      	add	r7, sp, #0
 800f660:	60f8      	str	r0, [r7, #12]
 800f662:	60b9      	str	r1, [r7, #8]
 800f664:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f66a:	697b      	ldr	r3, [r7, #20]
 800f66c:	1c5a      	adds	r2, r3, #1
 800f66e:	617a      	str	r2, [r7, #20]
 800f670:	68ba      	ldr	r2, [r7, #8]
 800f672:	b2d2      	uxtb	r2, r2
 800f674:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	3b01      	subs	r3, #1
 800f67a:	607b      	str	r3, [r7, #4]
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d1f3      	bne.n	800f66a <mem_set+0x10>
}
 800f682:	bf00      	nop
 800f684:	371c      	adds	r7, #28
 800f686:	46bd      	mov	sp, r7
 800f688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68c:	4770      	bx	lr

0800f68e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f68e:	b480      	push	{r7}
 800f690:	b089      	sub	sp, #36	; 0x24
 800f692:	af00      	add	r7, sp, #0
 800f694:	60f8      	str	r0, [r7, #12]
 800f696:	60b9      	str	r1, [r7, #8]
 800f698:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	61fb      	str	r3, [r7, #28]
 800f69e:	68bb      	ldr	r3, [r7, #8]
 800f6a0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f6a6:	69fb      	ldr	r3, [r7, #28]
 800f6a8:	1c5a      	adds	r2, r3, #1
 800f6aa:	61fa      	str	r2, [r7, #28]
 800f6ac:	781b      	ldrb	r3, [r3, #0]
 800f6ae:	4619      	mov	r1, r3
 800f6b0:	69bb      	ldr	r3, [r7, #24]
 800f6b2:	1c5a      	adds	r2, r3, #1
 800f6b4:	61ba      	str	r2, [r7, #24]
 800f6b6:	781b      	ldrb	r3, [r3, #0]
 800f6b8:	1acb      	subs	r3, r1, r3
 800f6ba:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	3b01      	subs	r3, #1
 800f6c0:	607b      	str	r3, [r7, #4]
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d002      	beq.n	800f6ce <mem_cmp+0x40>
 800f6c8:	697b      	ldr	r3, [r7, #20]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d0eb      	beq.n	800f6a6 <mem_cmp+0x18>

	return r;
 800f6ce:	697b      	ldr	r3, [r7, #20]
}
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	3724      	adds	r7, #36	; 0x24
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6da:	4770      	bx	lr

0800f6dc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f6dc:	b480      	push	{r7}
 800f6de:	b083      	sub	sp, #12
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
 800f6e4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f6e6:	e002      	b.n	800f6ee <chk_chr+0x12>
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	3301      	adds	r3, #1
 800f6ec:	607b      	str	r3, [r7, #4]
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	781b      	ldrb	r3, [r3, #0]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d005      	beq.n	800f702 <chk_chr+0x26>
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	781b      	ldrb	r3, [r3, #0]
 800f6fa:	461a      	mov	r2, r3
 800f6fc:	683b      	ldr	r3, [r7, #0]
 800f6fe:	4293      	cmp	r3, r2
 800f700:	d1f2      	bne.n	800f6e8 <chk_chr+0xc>
	return *str;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	781b      	ldrb	r3, [r3, #0]
}
 800f706:	4618      	mov	r0, r3
 800f708:	370c      	adds	r7, #12
 800f70a:	46bd      	mov	sp, r7
 800f70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f710:	4770      	bx	lr
	...

0800f714 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f714:	b480      	push	{r7}
 800f716:	b085      	sub	sp, #20
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
 800f71c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f71e:	2300      	movs	r3, #0
 800f720:	60bb      	str	r3, [r7, #8]
 800f722:	68bb      	ldr	r3, [r7, #8]
 800f724:	60fb      	str	r3, [r7, #12]
 800f726:	e029      	b.n	800f77c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f728:	4a27      	ldr	r2, [pc, #156]	; (800f7c8 <chk_lock+0xb4>)
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	011b      	lsls	r3, r3, #4
 800f72e:	4413      	add	r3, r2
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d01d      	beq.n	800f772 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f736:	4a24      	ldr	r2, [pc, #144]	; (800f7c8 <chk_lock+0xb4>)
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	011b      	lsls	r3, r3, #4
 800f73c:	4413      	add	r3, r2
 800f73e:	681a      	ldr	r2, [r3, #0]
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	429a      	cmp	r2, r3
 800f746:	d116      	bne.n	800f776 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f748:	4a1f      	ldr	r2, [pc, #124]	; (800f7c8 <chk_lock+0xb4>)
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	011b      	lsls	r3, r3, #4
 800f74e:	4413      	add	r3, r2
 800f750:	3304      	adds	r3, #4
 800f752:	681a      	ldr	r2, [r3, #0]
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f758:	429a      	cmp	r2, r3
 800f75a:	d10c      	bne.n	800f776 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f75c:	4a1a      	ldr	r2, [pc, #104]	; (800f7c8 <chk_lock+0xb4>)
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	011b      	lsls	r3, r3, #4
 800f762:	4413      	add	r3, r2
 800f764:	3308      	adds	r3, #8
 800f766:	681a      	ldr	r2, [r3, #0]
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f76c:	429a      	cmp	r2, r3
 800f76e:	d102      	bne.n	800f776 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f770:	e007      	b.n	800f782 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f772:	2301      	movs	r3, #1
 800f774:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	3301      	adds	r3, #1
 800f77a:	60fb      	str	r3, [r7, #12]
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	2b01      	cmp	r3, #1
 800f780:	d9d2      	bls.n	800f728 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	2b02      	cmp	r3, #2
 800f786:	d109      	bne.n	800f79c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f788:	68bb      	ldr	r3, [r7, #8]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d102      	bne.n	800f794 <chk_lock+0x80>
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	2b02      	cmp	r3, #2
 800f792:	d101      	bne.n	800f798 <chk_lock+0x84>
 800f794:	2300      	movs	r3, #0
 800f796:	e010      	b.n	800f7ba <chk_lock+0xa6>
 800f798:	2312      	movs	r3, #18
 800f79a:	e00e      	b.n	800f7ba <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d108      	bne.n	800f7b4 <chk_lock+0xa0>
 800f7a2:	4a09      	ldr	r2, [pc, #36]	; (800f7c8 <chk_lock+0xb4>)
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	011b      	lsls	r3, r3, #4
 800f7a8:	4413      	add	r3, r2
 800f7aa:	330c      	adds	r3, #12
 800f7ac:	881b      	ldrh	r3, [r3, #0]
 800f7ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f7b2:	d101      	bne.n	800f7b8 <chk_lock+0xa4>
 800f7b4:	2310      	movs	r3, #16
 800f7b6:	e000      	b.n	800f7ba <chk_lock+0xa6>
 800f7b8:	2300      	movs	r3, #0
}
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	3714      	adds	r7, #20
 800f7be:	46bd      	mov	sp, r7
 800f7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c4:	4770      	bx	lr
 800f7c6:	bf00      	nop
 800f7c8:	20002238 	.word	0x20002238

0800f7cc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f7cc:	b480      	push	{r7}
 800f7ce:	b083      	sub	sp, #12
 800f7d0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	607b      	str	r3, [r7, #4]
 800f7d6:	e002      	b.n	800f7de <enq_lock+0x12>
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	3301      	adds	r3, #1
 800f7dc:	607b      	str	r3, [r7, #4]
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	2b01      	cmp	r3, #1
 800f7e2:	d806      	bhi.n	800f7f2 <enq_lock+0x26>
 800f7e4:	4a09      	ldr	r2, [pc, #36]	; (800f80c <enq_lock+0x40>)
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	011b      	lsls	r3, r3, #4
 800f7ea:	4413      	add	r3, r2
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d1f2      	bne.n	800f7d8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	2b02      	cmp	r3, #2
 800f7f6:	bf14      	ite	ne
 800f7f8:	2301      	movne	r3, #1
 800f7fa:	2300      	moveq	r3, #0
 800f7fc:	b2db      	uxtb	r3, r3
}
 800f7fe:	4618      	mov	r0, r3
 800f800:	370c      	adds	r7, #12
 800f802:	46bd      	mov	sp, r7
 800f804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f808:	4770      	bx	lr
 800f80a:	bf00      	nop
 800f80c:	20002238 	.word	0x20002238

0800f810 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f810:	b480      	push	{r7}
 800f812:	b085      	sub	sp, #20
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
 800f818:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f81a:	2300      	movs	r3, #0
 800f81c:	60fb      	str	r3, [r7, #12]
 800f81e:	e01f      	b.n	800f860 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f820:	4a41      	ldr	r2, [pc, #260]	; (800f928 <inc_lock+0x118>)
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	011b      	lsls	r3, r3, #4
 800f826:	4413      	add	r3, r2
 800f828:	681a      	ldr	r2, [r3, #0]
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	429a      	cmp	r2, r3
 800f830:	d113      	bne.n	800f85a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f832:	4a3d      	ldr	r2, [pc, #244]	; (800f928 <inc_lock+0x118>)
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	011b      	lsls	r3, r3, #4
 800f838:	4413      	add	r3, r2
 800f83a:	3304      	adds	r3, #4
 800f83c:	681a      	ldr	r2, [r3, #0]
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f842:	429a      	cmp	r2, r3
 800f844:	d109      	bne.n	800f85a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f846:	4a38      	ldr	r2, [pc, #224]	; (800f928 <inc_lock+0x118>)
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	011b      	lsls	r3, r3, #4
 800f84c:	4413      	add	r3, r2
 800f84e:	3308      	adds	r3, #8
 800f850:	681a      	ldr	r2, [r3, #0]
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f856:	429a      	cmp	r2, r3
 800f858:	d006      	beq.n	800f868 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	3301      	adds	r3, #1
 800f85e:	60fb      	str	r3, [r7, #12]
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	2b01      	cmp	r3, #1
 800f864:	d9dc      	bls.n	800f820 <inc_lock+0x10>
 800f866:	e000      	b.n	800f86a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f868:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	2b02      	cmp	r3, #2
 800f86e:	d132      	bne.n	800f8d6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f870:	2300      	movs	r3, #0
 800f872:	60fb      	str	r3, [r7, #12]
 800f874:	e002      	b.n	800f87c <inc_lock+0x6c>
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	3301      	adds	r3, #1
 800f87a:	60fb      	str	r3, [r7, #12]
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	2b01      	cmp	r3, #1
 800f880:	d806      	bhi.n	800f890 <inc_lock+0x80>
 800f882:	4a29      	ldr	r2, [pc, #164]	; (800f928 <inc_lock+0x118>)
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	011b      	lsls	r3, r3, #4
 800f888:	4413      	add	r3, r2
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d1f2      	bne.n	800f876 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	2b02      	cmp	r3, #2
 800f894:	d101      	bne.n	800f89a <inc_lock+0x8a>
 800f896:	2300      	movs	r3, #0
 800f898:	e040      	b.n	800f91c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	681a      	ldr	r2, [r3, #0]
 800f89e:	4922      	ldr	r1, [pc, #136]	; (800f928 <inc_lock+0x118>)
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	011b      	lsls	r3, r3, #4
 800f8a4:	440b      	add	r3, r1
 800f8a6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	689a      	ldr	r2, [r3, #8]
 800f8ac:	491e      	ldr	r1, [pc, #120]	; (800f928 <inc_lock+0x118>)
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	011b      	lsls	r3, r3, #4
 800f8b2:	440b      	add	r3, r1
 800f8b4:	3304      	adds	r3, #4
 800f8b6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	695a      	ldr	r2, [r3, #20]
 800f8bc:	491a      	ldr	r1, [pc, #104]	; (800f928 <inc_lock+0x118>)
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	011b      	lsls	r3, r3, #4
 800f8c2:	440b      	add	r3, r1
 800f8c4:	3308      	adds	r3, #8
 800f8c6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f8c8:	4a17      	ldr	r2, [pc, #92]	; (800f928 <inc_lock+0x118>)
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	011b      	lsls	r3, r3, #4
 800f8ce:	4413      	add	r3, r2
 800f8d0:	330c      	adds	r3, #12
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f8d6:	683b      	ldr	r3, [r7, #0]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d009      	beq.n	800f8f0 <inc_lock+0xe0>
 800f8dc:	4a12      	ldr	r2, [pc, #72]	; (800f928 <inc_lock+0x118>)
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	011b      	lsls	r3, r3, #4
 800f8e2:	4413      	add	r3, r2
 800f8e4:	330c      	adds	r3, #12
 800f8e6:	881b      	ldrh	r3, [r3, #0]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d001      	beq.n	800f8f0 <inc_lock+0xe0>
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	e015      	b.n	800f91c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f8f0:	683b      	ldr	r3, [r7, #0]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d108      	bne.n	800f908 <inc_lock+0xf8>
 800f8f6:	4a0c      	ldr	r2, [pc, #48]	; (800f928 <inc_lock+0x118>)
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	011b      	lsls	r3, r3, #4
 800f8fc:	4413      	add	r3, r2
 800f8fe:	330c      	adds	r3, #12
 800f900:	881b      	ldrh	r3, [r3, #0]
 800f902:	3301      	adds	r3, #1
 800f904:	b29a      	uxth	r2, r3
 800f906:	e001      	b.n	800f90c <inc_lock+0xfc>
 800f908:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f90c:	4906      	ldr	r1, [pc, #24]	; (800f928 <inc_lock+0x118>)
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	011b      	lsls	r3, r3, #4
 800f912:	440b      	add	r3, r1
 800f914:	330c      	adds	r3, #12
 800f916:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	3301      	adds	r3, #1
}
 800f91c:	4618      	mov	r0, r3
 800f91e:	3714      	adds	r7, #20
 800f920:	46bd      	mov	sp, r7
 800f922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f926:	4770      	bx	lr
 800f928:	20002238 	.word	0x20002238

0800f92c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f92c:	b480      	push	{r7}
 800f92e:	b085      	sub	sp, #20
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	3b01      	subs	r3, #1
 800f938:	607b      	str	r3, [r7, #4]
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	2b01      	cmp	r3, #1
 800f93e:	d825      	bhi.n	800f98c <dec_lock+0x60>
		n = Files[i].ctr;
 800f940:	4a17      	ldr	r2, [pc, #92]	; (800f9a0 <dec_lock+0x74>)
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	011b      	lsls	r3, r3, #4
 800f946:	4413      	add	r3, r2
 800f948:	330c      	adds	r3, #12
 800f94a:	881b      	ldrh	r3, [r3, #0]
 800f94c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f94e:	89fb      	ldrh	r3, [r7, #14]
 800f950:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f954:	d101      	bne.n	800f95a <dec_lock+0x2e>
 800f956:	2300      	movs	r3, #0
 800f958:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800f95a:	89fb      	ldrh	r3, [r7, #14]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d002      	beq.n	800f966 <dec_lock+0x3a>
 800f960:	89fb      	ldrh	r3, [r7, #14]
 800f962:	3b01      	subs	r3, #1
 800f964:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800f966:	4a0e      	ldr	r2, [pc, #56]	; (800f9a0 <dec_lock+0x74>)
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	011b      	lsls	r3, r3, #4
 800f96c:	4413      	add	r3, r2
 800f96e:	330c      	adds	r3, #12
 800f970:	89fa      	ldrh	r2, [r7, #14]
 800f972:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f974:	89fb      	ldrh	r3, [r7, #14]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d105      	bne.n	800f986 <dec_lock+0x5a>
 800f97a:	4a09      	ldr	r2, [pc, #36]	; (800f9a0 <dec_lock+0x74>)
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	011b      	lsls	r3, r3, #4
 800f980:	4413      	add	r3, r2
 800f982:	2200      	movs	r2, #0
 800f984:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800f986:	2300      	movs	r3, #0
 800f988:	737b      	strb	r3, [r7, #13]
 800f98a:	e001      	b.n	800f990 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f98c:	2302      	movs	r3, #2
 800f98e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f990:	7b7b      	ldrb	r3, [r7, #13]
}
 800f992:	4618      	mov	r0, r3
 800f994:	3714      	adds	r7, #20
 800f996:	46bd      	mov	sp, r7
 800f998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99c:	4770      	bx	lr
 800f99e:	bf00      	nop
 800f9a0:	20002238 	.word	0x20002238

0800f9a4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f9a4:	b480      	push	{r7}
 800f9a6:	b085      	sub	sp, #20
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	60fb      	str	r3, [r7, #12]
 800f9b0:	e010      	b.n	800f9d4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f9b2:	4a0d      	ldr	r2, [pc, #52]	; (800f9e8 <clear_lock+0x44>)
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	011b      	lsls	r3, r3, #4
 800f9b8:	4413      	add	r3, r2
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	687a      	ldr	r2, [r7, #4]
 800f9be:	429a      	cmp	r2, r3
 800f9c0:	d105      	bne.n	800f9ce <clear_lock+0x2a>
 800f9c2:	4a09      	ldr	r2, [pc, #36]	; (800f9e8 <clear_lock+0x44>)
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	011b      	lsls	r3, r3, #4
 800f9c8:	4413      	add	r3, r2
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	3301      	adds	r3, #1
 800f9d2:	60fb      	str	r3, [r7, #12]
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	2b01      	cmp	r3, #1
 800f9d8:	d9eb      	bls.n	800f9b2 <clear_lock+0xe>
	}
}
 800f9da:	bf00      	nop
 800f9dc:	3714      	adds	r7, #20
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e4:	4770      	bx	lr
 800f9e6:	bf00      	nop
 800f9e8:	20002238 	.word	0x20002238

0800f9ec <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b086      	sub	sp, #24
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	78db      	ldrb	r3, [r3, #3]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d034      	beq.n	800fa6a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa04:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	7858      	ldrb	r0, [r3, #1]
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fa10:	2301      	movs	r3, #1
 800fa12:	697a      	ldr	r2, [r7, #20]
 800fa14:	f7ff fd40 	bl	800f498 <disk_write>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d002      	beq.n	800fa24 <sync_window+0x38>
			res = FR_DISK_ERR;
 800fa1e:	2301      	movs	r3, #1
 800fa20:	73fb      	strb	r3, [r7, #15]
 800fa22:	e022      	b.n	800fa6a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2200      	movs	r2, #0
 800fa28:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	6a1b      	ldr	r3, [r3, #32]
 800fa2e:	697a      	ldr	r2, [r7, #20]
 800fa30:	1ad2      	subs	r2, r2, r3
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	699b      	ldr	r3, [r3, #24]
 800fa36:	429a      	cmp	r2, r3
 800fa38:	d217      	bcs.n	800fa6a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	789b      	ldrb	r3, [r3, #2]
 800fa3e:	613b      	str	r3, [r7, #16]
 800fa40:	e010      	b.n	800fa64 <sync_window+0x78>
					wsect += fs->fsize;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	699b      	ldr	r3, [r3, #24]
 800fa46:	697a      	ldr	r2, [r7, #20]
 800fa48:	4413      	add	r3, r2
 800fa4a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	7858      	ldrb	r0, [r3, #1]
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fa56:	2301      	movs	r3, #1
 800fa58:	697a      	ldr	r2, [r7, #20]
 800fa5a:	f7ff fd1d 	bl	800f498 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fa5e:	693b      	ldr	r3, [r7, #16]
 800fa60:	3b01      	subs	r3, #1
 800fa62:	613b      	str	r3, [r7, #16]
 800fa64:	693b      	ldr	r3, [r7, #16]
 800fa66:	2b01      	cmp	r3, #1
 800fa68:	d8eb      	bhi.n	800fa42 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800fa6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	3718      	adds	r7, #24
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}

0800fa74 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b084      	sub	sp, #16
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
 800fa7c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800fa7e:	2300      	movs	r3, #0
 800fa80:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa86:	683a      	ldr	r2, [r7, #0]
 800fa88:	429a      	cmp	r2, r3
 800fa8a:	d01b      	beq.n	800fac4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800fa8c:	6878      	ldr	r0, [r7, #4]
 800fa8e:	f7ff ffad 	bl	800f9ec <sync_window>
 800fa92:	4603      	mov	r3, r0
 800fa94:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800fa96:	7bfb      	ldrb	r3, [r7, #15]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d113      	bne.n	800fac4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	7858      	ldrb	r0, [r3, #1]
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800faa6:	2301      	movs	r3, #1
 800faa8:	683a      	ldr	r2, [r7, #0]
 800faaa:	f7ff fcd5 	bl	800f458 <disk_read>
 800faae:	4603      	mov	r3, r0
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d004      	beq.n	800fabe <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800fab4:	f04f 33ff 	mov.w	r3, #4294967295
 800fab8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800faba:	2301      	movs	r3, #1
 800fabc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	683a      	ldr	r2, [r7, #0]
 800fac2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800fac4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fac6:	4618      	mov	r0, r3
 800fac8:	3710      	adds	r7, #16
 800faca:	46bd      	mov	sp, r7
 800facc:	bd80      	pop	{r7, pc}
	...

0800fad0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b084      	sub	sp, #16
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800fad8:	6878      	ldr	r0, [r7, #4]
 800fada:	f7ff ff87 	bl	800f9ec <sync_window>
 800fade:	4603      	mov	r3, r0
 800fae0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fae2:	7bfb      	ldrb	r3, [r7, #15]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d158      	bne.n	800fb9a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	781b      	ldrb	r3, [r3, #0]
 800faec:	2b03      	cmp	r3, #3
 800faee:	d148      	bne.n	800fb82 <sync_fs+0xb2>
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	791b      	ldrb	r3, [r3, #4]
 800faf4:	2b01      	cmp	r3, #1
 800faf6:	d144      	bne.n	800fb82 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	3330      	adds	r3, #48	; 0x30
 800fafc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fb00:	2100      	movs	r1, #0
 800fb02:	4618      	mov	r0, r3
 800fb04:	f7ff fda9 	bl	800f65a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	3330      	adds	r3, #48	; 0x30
 800fb0c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fb10:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800fb14:	4618      	mov	r0, r3
 800fb16:	f7ff fd38 	bl	800f58a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	3330      	adds	r3, #48	; 0x30
 800fb1e:	4921      	ldr	r1, [pc, #132]	; (800fba4 <sync_fs+0xd4>)
 800fb20:	4618      	mov	r0, r3
 800fb22:	f7ff fd4d 	bl	800f5c0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	3330      	adds	r3, #48	; 0x30
 800fb2a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800fb2e:	491e      	ldr	r1, [pc, #120]	; (800fba8 <sync_fs+0xd8>)
 800fb30:	4618      	mov	r0, r3
 800fb32:	f7ff fd45 	bl	800f5c0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	3330      	adds	r3, #48	; 0x30
 800fb3a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	691b      	ldr	r3, [r3, #16]
 800fb42:	4619      	mov	r1, r3
 800fb44:	4610      	mov	r0, r2
 800fb46:	f7ff fd3b 	bl	800f5c0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	3330      	adds	r3, #48	; 0x30
 800fb4e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	68db      	ldr	r3, [r3, #12]
 800fb56:	4619      	mov	r1, r3
 800fb58:	4610      	mov	r0, r2
 800fb5a:	f7ff fd31 	bl	800f5c0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	69db      	ldr	r3, [r3, #28]
 800fb62:	1c5a      	adds	r2, r3, #1
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	7858      	ldrb	r0, [r3, #1]
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb76:	2301      	movs	r3, #1
 800fb78:	f7ff fc8e 	bl	800f498 <disk_write>
			fs->fsi_flag = 0;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	2200      	movs	r2, #0
 800fb80:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	785b      	ldrb	r3, [r3, #1]
 800fb86:	2200      	movs	r2, #0
 800fb88:	2100      	movs	r1, #0
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	f7ff fca4 	bl	800f4d8 <disk_ioctl>
 800fb90:	4603      	mov	r3, r0
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d001      	beq.n	800fb9a <sync_fs+0xca>
 800fb96:	2301      	movs	r3, #1
 800fb98:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800fb9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	3710      	adds	r7, #16
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd80      	pop	{r7, pc}
 800fba4:	41615252 	.word	0x41615252
 800fba8:	61417272 	.word	0x61417272

0800fbac <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800fbac:	b480      	push	{r7}
 800fbae:	b083      	sub	sp, #12
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
 800fbb4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800fbb6:	683b      	ldr	r3, [r7, #0]
 800fbb8:	3b02      	subs	r3, #2
 800fbba:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	695b      	ldr	r3, [r3, #20]
 800fbc0:	3b02      	subs	r3, #2
 800fbc2:	683a      	ldr	r2, [r7, #0]
 800fbc4:	429a      	cmp	r2, r3
 800fbc6:	d301      	bcc.n	800fbcc <clust2sect+0x20>
 800fbc8:	2300      	movs	r3, #0
 800fbca:	e008      	b.n	800fbde <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	895b      	ldrh	r3, [r3, #10]
 800fbd0:	461a      	mov	r2, r3
 800fbd2:	683b      	ldr	r3, [r7, #0]
 800fbd4:	fb03 f202 	mul.w	r2, r3, r2
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbdc:	4413      	add	r3, r2
}
 800fbde:	4618      	mov	r0, r3
 800fbe0:	370c      	adds	r7, #12
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe8:	4770      	bx	lr

0800fbea <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800fbea:	b580      	push	{r7, lr}
 800fbec:	b086      	sub	sp, #24
 800fbee:	af00      	add	r7, sp, #0
 800fbf0:	6078      	str	r0, [r7, #4]
 800fbf2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800fbfa:	683b      	ldr	r3, [r7, #0]
 800fbfc:	2b01      	cmp	r3, #1
 800fbfe:	d904      	bls.n	800fc0a <get_fat+0x20>
 800fc00:	693b      	ldr	r3, [r7, #16]
 800fc02:	695b      	ldr	r3, [r3, #20]
 800fc04:	683a      	ldr	r2, [r7, #0]
 800fc06:	429a      	cmp	r2, r3
 800fc08:	d302      	bcc.n	800fc10 <get_fat+0x26>
		val = 1;	/* Internal error */
 800fc0a:	2301      	movs	r3, #1
 800fc0c:	617b      	str	r3, [r7, #20]
 800fc0e:	e08c      	b.n	800fd2a <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800fc10:	f04f 33ff 	mov.w	r3, #4294967295
 800fc14:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800fc16:	693b      	ldr	r3, [r7, #16]
 800fc18:	781b      	ldrb	r3, [r3, #0]
 800fc1a:	2b02      	cmp	r3, #2
 800fc1c:	d045      	beq.n	800fcaa <get_fat+0xc0>
 800fc1e:	2b03      	cmp	r3, #3
 800fc20:	d05d      	beq.n	800fcde <get_fat+0xf4>
 800fc22:	2b01      	cmp	r3, #1
 800fc24:	d177      	bne.n	800fd16 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800fc26:	683b      	ldr	r3, [r7, #0]
 800fc28:	60fb      	str	r3, [r7, #12]
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	085b      	lsrs	r3, r3, #1
 800fc2e:	68fa      	ldr	r2, [r7, #12]
 800fc30:	4413      	add	r3, r2
 800fc32:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fc34:	693b      	ldr	r3, [r7, #16]
 800fc36:	6a1a      	ldr	r2, [r3, #32]
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	0a5b      	lsrs	r3, r3, #9
 800fc3c:	4413      	add	r3, r2
 800fc3e:	4619      	mov	r1, r3
 800fc40:	6938      	ldr	r0, [r7, #16]
 800fc42:	f7ff ff17 	bl	800fa74 <move_window>
 800fc46:	4603      	mov	r3, r0
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d167      	bne.n	800fd1c <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	1c5a      	adds	r2, r3, #1
 800fc50:	60fa      	str	r2, [r7, #12]
 800fc52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc56:	693a      	ldr	r2, [r7, #16]
 800fc58:	4413      	add	r3, r2
 800fc5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fc5e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fc60:	693b      	ldr	r3, [r7, #16]
 800fc62:	6a1a      	ldr	r2, [r3, #32]
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	0a5b      	lsrs	r3, r3, #9
 800fc68:	4413      	add	r3, r2
 800fc6a:	4619      	mov	r1, r3
 800fc6c:	6938      	ldr	r0, [r7, #16]
 800fc6e:	f7ff ff01 	bl	800fa74 <move_window>
 800fc72:	4603      	mov	r3, r0
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d153      	bne.n	800fd20 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc7e:	693a      	ldr	r2, [r7, #16]
 800fc80:	4413      	add	r3, r2
 800fc82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fc86:	021b      	lsls	r3, r3, #8
 800fc88:	461a      	mov	r2, r3
 800fc8a:	68bb      	ldr	r3, [r7, #8]
 800fc8c:	4313      	orrs	r3, r2
 800fc8e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800fc90:	683b      	ldr	r3, [r7, #0]
 800fc92:	f003 0301 	and.w	r3, r3, #1
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d002      	beq.n	800fca0 <get_fat+0xb6>
 800fc9a:	68bb      	ldr	r3, [r7, #8]
 800fc9c:	091b      	lsrs	r3, r3, #4
 800fc9e:	e002      	b.n	800fca6 <get_fat+0xbc>
 800fca0:	68bb      	ldr	r3, [r7, #8]
 800fca2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fca6:	617b      	str	r3, [r7, #20]
			break;
 800fca8:	e03f      	b.n	800fd2a <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fcaa:	693b      	ldr	r3, [r7, #16]
 800fcac:	6a1a      	ldr	r2, [r3, #32]
 800fcae:	683b      	ldr	r3, [r7, #0]
 800fcb0:	0a1b      	lsrs	r3, r3, #8
 800fcb2:	4413      	add	r3, r2
 800fcb4:	4619      	mov	r1, r3
 800fcb6:	6938      	ldr	r0, [r7, #16]
 800fcb8:	f7ff fedc 	bl	800fa74 <move_window>
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d130      	bne.n	800fd24 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800fcc2:	693b      	ldr	r3, [r7, #16]
 800fcc4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fcc8:	683b      	ldr	r3, [r7, #0]
 800fcca:	005b      	lsls	r3, r3, #1
 800fccc:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800fcd0:	4413      	add	r3, r2
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	f7ff fc1e 	bl	800f514 <ld_word>
 800fcd8:	4603      	mov	r3, r0
 800fcda:	617b      	str	r3, [r7, #20]
			break;
 800fcdc:	e025      	b.n	800fd2a <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fcde:	693b      	ldr	r3, [r7, #16]
 800fce0:	6a1a      	ldr	r2, [r3, #32]
 800fce2:	683b      	ldr	r3, [r7, #0]
 800fce4:	09db      	lsrs	r3, r3, #7
 800fce6:	4413      	add	r3, r2
 800fce8:	4619      	mov	r1, r3
 800fcea:	6938      	ldr	r0, [r7, #16]
 800fcec:	f7ff fec2 	bl	800fa74 <move_window>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d118      	bne.n	800fd28 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800fcf6:	693b      	ldr	r3, [r7, #16]
 800fcf8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fcfc:	683b      	ldr	r3, [r7, #0]
 800fcfe:	009b      	lsls	r3, r3, #2
 800fd00:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800fd04:	4413      	add	r3, r2
 800fd06:	4618      	mov	r0, r3
 800fd08:	f7ff fc1c 	bl	800f544 <ld_dword>
 800fd0c:	4603      	mov	r3, r0
 800fd0e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800fd12:	617b      	str	r3, [r7, #20]
			break;
 800fd14:	e009      	b.n	800fd2a <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800fd16:	2301      	movs	r3, #1
 800fd18:	617b      	str	r3, [r7, #20]
 800fd1a:	e006      	b.n	800fd2a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fd1c:	bf00      	nop
 800fd1e:	e004      	b.n	800fd2a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fd20:	bf00      	nop
 800fd22:	e002      	b.n	800fd2a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fd24:	bf00      	nop
 800fd26:	e000      	b.n	800fd2a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fd28:	bf00      	nop
		}
	}

	return val;
 800fd2a:	697b      	ldr	r3, [r7, #20]
}
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	3718      	adds	r7, #24
 800fd30:	46bd      	mov	sp, r7
 800fd32:	bd80      	pop	{r7, pc}

0800fd34 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800fd34:	b590      	push	{r4, r7, lr}
 800fd36:	b089      	sub	sp, #36	; 0x24
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	60f8      	str	r0, [r7, #12]
 800fd3c:	60b9      	str	r1, [r7, #8]
 800fd3e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800fd40:	2302      	movs	r3, #2
 800fd42:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800fd44:	68bb      	ldr	r3, [r7, #8]
 800fd46:	2b01      	cmp	r3, #1
 800fd48:	f240 80d6 	bls.w	800fef8 <put_fat+0x1c4>
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	695b      	ldr	r3, [r3, #20]
 800fd50:	68ba      	ldr	r2, [r7, #8]
 800fd52:	429a      	cmp	r2, r3
 800fd54:	f080 80d0 	bcs.w	800fef8 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	781b      	ldrb	r3, [r3, #0]
 800fd5c:	2b02      	cmp	r3, #2
 800fd5e:	d073      	beq.n	800fe48 <put_fat+0x114>
 800fd60:	2b03      	cmp	r3, #3
 800fd62:	f000 8091 	beq.w	800fe88 <put_fat+0x154>
 800fd66:	2b01      	cmp	r3, #1
 800fd68:	f040 80c6 	bne.w	800fef8 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800fd6c:	68bb      	ldr	r3, [r7, #8]
 800fd6e:	61bb      	str	r3, [r7, #24]
 800fd70:	69bb      	ldr	r3, [r7, #24]
 800fd72:	085b      	lsrs	r3, r3, #1
 800fd74:	69ba      	ldr	r2, [r7, #24]
 800fd76:	4413      	add	r3, r2
 800fd78:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	6a1a      	ldr	r2, [r3, #32]
 800fd7e:	69bb      	ldr	r3, [r7, #24]
 800fd80:	0a5b      	lsrs	r3, r3, #9
 800fd82:	4413      	add	r3, r2
 800fd84:	4619      	mov	r1, r3
 800fd86:	68f8      	ldr	r0, [r7, #12]
 800fd88:	f7ff fe74 	bl	800fa74 <move_window>
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fd90:	7ffb      	ldrb	r3, [r7, #31]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	f040 80a9 	bne.w	800feea <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fd9e:	69bb      	ldr	r3, [r7, #24]
 800fda0:	1c59      	adds	r1, r3, #1
 800fda2:	61b9      	str	r1, [r7, #24]
 800fda4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fda8:	4413      	add	r3, r2
 800fdaa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800fdac:	68bb      	ldr	r3, [r7, #8]
 800fdae:	f003 0301 	and.w	r3, r3, #1
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d00d      	beq.n	800fdd2 <put_fat+0x9e>
 800fdb6:	697b      	ldr	r3, [r7, #20]
 800fdb8:	781b      	ldrb	r3, [r3, #0]
 800fdba:	b25b      	sxtb	r3, r3
 800fdbc:	f003 030f 	and.w	r3, r3, #15
 800fdc0:	b25a      	sxtb	r2, r3
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	b2db      	uxtb	r3, r3
 800fdc6:	011b      	lsls	r3, r3, #4
 800fdc8:	b25b      	sxtb	r3, r3
 800fdca:	4313      	orrs	r3, r2
 800fdcc:	b25b      	sxtb	r3, r3
 800fdce:	b2db      	uxtb	r3, r3
 800fdd0:	e001      	b.n	800fdd6 <put_fat+0xa2>
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	b2db      	uxtb	r3, r3
 800fdd6:	697a      	ldr	r2, [r7, #20]
 800fdd8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	2201      	movs	r2, #1
 800fdde:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	6a1a      	ldr	r2, [r3, #32]
 800fde4:	69bb      	ldr	r3, [r7, #24]
 800fde6:	0a5b      	lsrs	r3, r3, #9
 800fde8:	4413      	add	r3, r2
 800fdea:	4619      	mov	r1, r3
 800fdec:	68f8      	ldr	r0, [r7, #12]
 800fdee:	f7ff fe41 	bl	800fa74 <move_window>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fdf6:	7ffb      	ldrb	r3, [r7, #31]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d178      	bne.n	800feee <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fe02:	69bb      	ldr	r3, [r7, #24]
 800fe04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe08:	4413      	add	r3, r2
 800fe0a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800fe0c:	68bb      	ldr	r3, [r7, #8]
 800fe0e:	f003 0301 	and.w	r3, r3, #1
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d003      	beq.n	800fe1e <put_fat+0xea>
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	091b      	lsrs	r3, r3, #4
 800fe1a:	b2db      	uxtb	r3, r3
 800fe1c:	e00e      	b.n	800fe3c <put_fat+0x108>
 800fe1e:	697b      	ldr	r3, [r7, #20]
 800fe20:	781b      	ldrb	r3, [r3, #0]
 800fe22:	b25b      	sxtb	r3, r3
 800fe24:	f023 030f 	bic.w	r3, r3, #15
 800fe28:	b25a      	sxtb	r2, r3
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	0a1b      	lsrs	r3, r3, #8
 800fe2e:	b25b      	sxtb	r3, r3
 800fe30:	f003 030f 	and.w	r3, r3, #15
 800fe34:	b25b      	sxtb	r3, r3
 800fe36:	4313      	orrs	r3, r2
 800fe38:	b25b      	sxtb	r3, r3
 800fe3a:	b2db      	uxtb	r3, r3
 800fe3c:	697a      	ldr	r2, [r7, #20]
 800fe3e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	2201      	movs	r2, #1
 800fe44:	70da      	strb	r2, [r3, #3]
			break;
 800fe46:	e057      	b.n	800fef8 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	6a1a      	ldr	r2, [r3, #32]
 800fe4c:	68bb      	ldr	r3, [r7, #8]
 800fe4e:	0a1b      	lsrs	r3, r3, #8
 800fe50:	4413      	add	r3, r2
 800fe52:	4619      	mov	r1, r3
 800fe54:	68f8      	ldr	r0, [r7, #12]
 800fe56:	f7ff fe0d 	bl	800fa74 <move_window>
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fe5e:	7ffb      	ldrb	r3, [r7, #31]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d146      	bne.n	800fef2 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fe6a:	68bb      	ldr	r3, [r7, #8]
 800fe6c:	005b      	lsls	r3, r3, #1
 800fe6e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800fe72:	4413      	add	r3, r2
 800fe74:	687a      	ldr	r2, [r7, #4]
 800fe76:	b292      	uxth	r2, r2
 800fe78:	4611      	mov	r1, r2
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	f7ff fb85 	bl	800f58a <st_word>
			fs->wflag = 1;
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	2201      	movs	r2, #1
 800fe84:	70da      	strb	r2, [r3, #3]
			break;
 800fe86:	e037      	b.n	800fef8 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	6a1a      	ldr	r2, [r3, #32]
 800fe8c:	68bb      	ldr	r3, [r7, #8]
 800fe8e:	09db      	lsrs	r3, r3, #7
 800fe90:	4413      	add	r3, r2
 800fe92:	4619      	mov	r1, r3
 800fe94:	68f8      	ldr	r0, [r7, #12]
 800fe96:	f7ff fded 	bl	800fa74 <move_window>
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fe9e:	7ffb      	ldrb	r3, [r7, #31]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d128      	bne.n	800fef6 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800feb0:	68bb      	ldr	r3, [r7, #8]
 800feb2:	009b      	lsls	r3, r3, #2
 800feb4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800feb8:	4413      	add	r3, r2
 800feba:	4618      	mov	r0, r3
 800febc:	f7ff fb42 	bl	800f544 <ld_dword>
 800fec0:	4603      	mov	r3, r0
 800fec2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800fec6:	4323      	orrs	r3, r4
 800fec8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fed0:	68bb      	ldr	r3, [r7, #8]
 800fed2:	009b      	lsls	r3, r3, #2
 800fed4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800fed8:	4413      	add	r3, r2
 800feda:	6879      	ldr	r1, [r7, #4]
 800fedc:	4618      	mov	r0, r3
 800fede:	f7ff fb6f 	bl	800f5c0 <st_dword>
			fs->wflag = 1;
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	2201      	movs	r2, #1
 800fee6:	70da      	strb	r2, [r3, #3]
			break;
 800fee8:	e006      	b.n	800fef8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800feea:	bf00      	nop
 800feec:	e004      	b.n	800fef8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800feee:	bf00      	nop
 800fef0:	e002      	b.n	800fef8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800fef2:	bf00      	nop
 800fef4:	e000      	b.n	800fef8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800fef6:	bf00      	nop
		}
	}
	return res;
 800fef8:	7ffb      	ldrb	r3, [r7, #31]
}
 800fefa:	4618      	mov	r0, r3
 800fefc:	3724      	adds	r7, #36	; 0x24
 800fefe:	46bd      	mov	sp, r7
 800ff00:	bd90      	pop	{r4, r7, pc}

0800ff02 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ff02:	b580      	push	{r7, lr}
 800ff04:	b088      	sub	sp, #32
 800ff06:	af00      	add	r7, sp, #0
 800ff08:	60f8      	str	r0, [r7, #12]
 800ff0a:	60b9      	str	r1, [r7, #8]
 800ff0c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ff0e:	2300      	movs	r3, #0
 800ff10:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ff18:	68bb      	ldr	r3, [r7, #8]
 800ff1a:	2b01      	cmp	r3, #1
 800ff1c:	d904      	bls.n	800ff28 <remove_chain+0x26>
 800ff1e:	69bb      	ldr	r3, [r7, #24]
 800ff20:	695b      	ldr	r3, [r3, #20]
 800ff22:	68ba      	ldr	r2, [r7, #8]
 800ff24:	429a      	cmp	r2, r3
 800ff26:	d301      	bcc.n	800ff2c <remove_chain+0x2a>
 800ff28:	2302      	movs	r3, #2
 800ff2a:	e04b      	b.n	800ffc4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d00c      	beq.n	800ff4c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ff32:	f04f 32ff 	mov.w	r2, #4294967295
 800ff36:	6879      	ldr	r1, [r7, #4]
 800ff38:	69b8      	ldr	r0, [r7, #24]
 800ff3a:	f7ff fefb 	bl	800fd34 <put_fat>
 800ff3e:	4603      	mov	r3, r0
 800ff40:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ff42:	7ffb      	ldrb	r3, [r7, #31]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d001      	beq.n	800ff4c <remove_chain+0x4a>
 800ff48:	7ffb      	ldrb	r3, [r7, #31]
 800ff4a:	e03b      	b.n	800ffc4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ff4c:	68b9      	ldr	r1, [r7, #8]
 800ff4e:	68f8      	ldr	r0, [r7, #12]
 800ff50:	f7ff fe4b 	bl	800fbea <get_fat>
 800ff54:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ff56:	697b      	ldr	r3, [r7, #20]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d031      	beq.n	800ffc0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ff5c:	697b      	ldr	r3, [r7, #20]
 800ff5e:	2b01      	cmp	r3, #1
 800ff60:	d101      	bne.n	800ff66 <remove_chain+0x64>
 800ff62:	2302      	movs	r3, #2
 800ff64:	e02e      	b.n	800ffc4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ff66:	697b      	ldr	r3, [r7, #20]
 800ff68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff6c:	d101      	bne.n	800ff72 <remove_chain+0x70>
 800ff6e:	2301      	movs	r3, #1
 800ff70:	e028      	b.n	800ffc4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ff72:	2200      	movs	r2, #0
 800ff74:	68b9      	ldr	r1, [r7, #8]
 800ff76:	69b8      	ldr	r0, [r7, #24]
 800ff78:	f7ff fedc 	bl	800fd34 <put_fat>
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ff80:	7ffb      	ldrb	r3, [r7, #31]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d001      	beq.n	800ff8a <remove_chain+0x88>
 800ff86:	7ffb      	ldrb	r3, [r7, #31]
 800ff88:	e01c      	b.n	800ffc4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ff8a:	69bb      	ldr	r3, [r7, #24]
 800ff8c:	691a      	ldr	r2, [r3, #16]
 800ff8e:	69bb      	ldr	r3, [r7, #24]
 800ff90:	695b      	ldr	r3, [r3, #20]
 800ff92:	3b02      	subs	r3, #2
 800ff94:	429a      	cmp	r2, r3
 800ff96:	d20b      	bcs.n	800ffb0 <remove_chain+0xae>
			fs->free_clst++;
 800ff98:	69bb      	ldr	r3, [r7, #24]
 800ff9a:	691b      	ldr	r3, [r3, #16]
 800ff9c:	1c5a      	adds	r2, r3, #1
 800ff9e:	69bb      	ldr	r3, [r7, #24]
 800ffa0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800ffa2:	69bb      	ldr	r3, [r7, #24]
 800ffa4:	791b      	ldrb	r3, [r3, #4]
 800ffa6:	f043 0301 	orr.w	r3, r3, #1
 800ffaa:	b2da      	uxtb	r2, r3
 800ffac:	69bb      	ldr	r3, [r7, #24]
 800ffae:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ffb0:	697b      	ldr	r3, [r7, #20]
 800ffb2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ffb4:	69bb      	ldr	r3, [r7, #24]
 800ffb6:	695b      	ldr	r3, [r3, #20]
 800ffb8:	68ba      	ldr	r2, [r7, #8]
 800ffba:	429a      	cmp	r2, r3
 800ffbc:	d3c6      	bcc.n	800ff4c <remove_chain+0x4a>
 800ffbe:	e000      	b.n	800ffc2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ffc0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ffc2:	2300      	movs	r3, #0
}
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	3720      	adds	r7, #32
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	bd80      	pop	{r7, pc}

0800ffcc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b088      	sub	sp, #32
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
 800ffd4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ffdc:	683b      	ldr	r3, [r7, #0]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d10d      	bne.n	800fffe <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ffe2:	693b      	ldr	r3, [r7, #16]
 800ffe4:	68db      	ldr	r3, [r3, #12]
 800ffe6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ffe8:	69bb      	ldr	r3, [r7, #24]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d004      	beq.n	800fff8 <create_chain+0x2c>
 800ffee:	693b      	ldr	r3, [r7, #16]
 800fff0:	695b      	ldr	r3, [r3, #20]
 800fff2:	69ba      	ldr	r2, [r7, #24]
 800fff4:	429a      	cmp	r2, r3
 800fff6:	d31b      	bcc.n	8010030 <create_chain+0x64>
 800fff8:	2301      	movs	r3, #1
 800fffa:	61bb      	str	r3, [r7, #24]
 800fffc:	e018      	b.n	8010030 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800fffe:	6839      	ldr	r1, [r7, #0]
 8010000:	6878      	ldr	r0, [r7, #4]
 8010002:	f7ff fdf2 	bl	800fbea <get_fat>
 8010006:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	2b01      	cmp	r3, #1
 801000c:	d801      	bhi.n	8010012 <create_chain+0x46>
 801000e:	2301      	movs	r3, #1
 8010010:	e070      	b.n	80100f4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010018:	d101      	bne.n	801001e <create_chain+0x52>
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	e06a      	b.n	80100f4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801001e:	693b      	ldr	r3, [r7, #16]
 8010020:	695b      	ldr	r3, [r3, #20]
 8010022:	68fa      	ldr	r2, [r7, #12]
 8010024:	429a      	cmp	r2, r3
 8010026:	d201      	bcs.n	801002c <create_chain+0x60>
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	e063      	b.n	80100f4 <create_chain+0x128>
		scl = clst;
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8010030:	69bb      	ldr	r3, [r7, #24]
 8010032:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8010034:	69fb      	ldr	r3, [r7, #28]
 8010036:	3301      	adds	r3, #1
 8010038:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801003a:	693b      	ldr	r3, [r7, #16]
 801003c:	695b      	ldr	r3, [r3, #20]
 801003e:	69fa      	ldr	r2, [r7, #28]
 8010040:	429a      	cmp	r2, r3
 8010042:	d307      	bcc.n	8010054 <create_chain+0x88>
				ncl = 2;
 8010044:	2302      	movs	r3, #2
 8010046:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8010048:	69fa      	ldr	r2, [r7, #28]
 801004a:	69bb      	ldr	r3, [r7, #24]
 801004c:	429a      	cmp	r2, r3
 801004e:	d901      	bls.n	8010054 <create_chain+0x88>
 8010050:	2300      	movs	r3, #0
 8010052:	e04f      	b.n	80100f4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8010054:	69f9      	ldr	r1, [r7, #28]
 8010056:	6878      	ldr	r0, [r7, #4]
 8010058:	f7ff fdc7 	bl	800fbea <get_fat>
 801005c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d00e      	beq.n	8010082 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	2b01      	cmp	r3, #1
 8010068:	d003      	beq.n	8010072 <create_chain+0xa6>
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010070:	d101      	bne.n	8010076 <create_chain+0xaa>
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	e03e      	b.n	80100f4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8010076:	69fa      	ldr	r2, [r7, #28]
 8010078:	69bb      	ldr	r3, [r7, #24]
 801007a:	429a      	cmp	r2, r3
 801007c:	d1da      	bne.n	8010034 <create_chain+0x68>
 801007e:	2300      	movs	r3, #0
 8010080:	e038      	b.n	80100f4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8010082:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010084:	f04f 32ff 	mov.w	r2, #4294967295
 8010088:	69f9      	ldr	r1, [r7, #28]
 801008a:	6938      	ldr	r0, [r7, #16]
 801008c:	f7ff fe52 	bl	800fd34 <put_fat>
 8010090:	4603      	mov	r3, r0
 8010092:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8010094:	7dfb      	ldrb	r3, [r7, #23]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d109      	bne.n	80100ae <create_chain+0xe2>
 801009a:	683b      	ldr	r3, [r7, #0]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d006      	beq.n	80100ae <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80100a0:	69fa      	ldr	r2, [r7, #28]
 80100a2:	6839      	ldr	r1, [r7, #0]
 80100a4:	6938      	ldr	r0, [r7, #16]
 80100a6:	f7ff fe45 	bl	800fd34 <put_fat>
 80100aa:	4603      	mov	r3, r0
 80100ac:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80100ae:	7dfb      	ldrb	r3, [r7, #23]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d116      	bne.n	80100e2 <create_chain+0x116>
		fs->last_clst = ncl;
 80100b4:	693b      	ldr	r3, [r7, #16]
 80100b6:	69fa      	ldr	r2, [r7, #28]
 80100b8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80100ba:	693b      	ldr	r3, [r7, #16]
 80100bc:	691a      	ldr	r2, [r3, #16]
 80100be:	693b      	ldr	r3, [r7, #16]
 80100c0:	695b      	ldr	r3, [r3, #20]
 80100c2:	3b02      	subs	r3, #2
 80100c4:	429a      	cmp	r2, r3
 80100c6:	d804      	bhi.n	80100d2 <create_chain+0x106>
 80100c8:	693b      	ldr	r3, [r7, #16]
 80100ca:	691b      	ldr	r3, [r3, #16]
 80100cc:	1e5a      	subs	r2, r3, #1
 80100ce:	693b      	ldr	r3, [r7, #16]
 80100d0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80100d2:	693b      	ldr	r3, [r7, #16]
 80100d4:	791b      	ldrb	r3, [r3, #4]
 80100d6:	f043 0301 	orr.w	r3, r3, #1
 80100da:	b2da      	uxtb	r2, r3
 80100dc:	693b      	ldr	r3, [r7, #16]
 80100de:	711a      	strb	r2, [r3, #4]
 80100e0:	e007      	b.n	80100f2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80100e2:	7dfb      	ldrb	r3, [r7, #23]
 80100e4:	2b01      	cmp	r3, #1
 80100e6:	d102      	bne.n	80100ee <create_chain+0x122>
 80100e8:	f04f 33ff 	mov.w	r3, #4294967295
 80100ec:	e000      	b.n	80100f0 <create_chain+0x124>
 80100ee:	2301      	movs	r3, #1
 80100f0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80100f2:	69fb      	ldr	r3, [r7, #28]
}
 80100f4:	4618      	mov	r0, r3
 80100f6:	3720      	adds	r7, #32
 80100f8:	46bd      	mov	sp, r7
 80100fa:	bd80      	pop	{r7, pc}

080100fc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80100fc:	b480      	push	{r7}
 80100fe:	b087      	sub	sp, #28
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
 8010104:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010110:	3304      	adds	r3, #4
 8010112:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8010114:	683b      	ldr	r3, [r7, #0]
 8010116:	0a5b      	lsrs	r3, r3, #9
 8010118:	68fa      	ldr	r2, [r7, #12]
 801011a:	8952      	ldrh	r2, [r2, #10]
 801011c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010120:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010122:	693b      	ldr	r3, [r7, #16]
 8010124:	1d1a      	adds	r2, r3, #4
 8010126:	613a      	str	r2, [r7, #16]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801012c:	68bb      	ldr	r3, [r7, #8]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d101      	bne.n	8010136 <clmt_clust+0x3a>
 8010132:	2300      	movs	r3, #0
 8010134:	e010      	b.n	8010158 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8010136:	697a      	ldr	r2, [r7, #20]
 8010138:	68bb      	ldr	r3, [r7, #8]
 801013a:	429a      	cmp	r2, r3
 801013c:	d307      	bcc.n	801014e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801013e:	697a      	ldr	r2, [r7, #20]
 8010140:	68bb      	ldr	r3, [r7, #8]
 8010142:	1ad3      	subs	r3, r2, r3
 8010144:	617b      	str	r3, [r7, #20]
 8010146:	693b      	ldr	r3, [r7, #16]
 8010148:	3304      	adds	r3, #4
 801014a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801014c:	e7e9      	b.n	8010122 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801014e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8010150:	693b      	ldr	r3, [r7, #16]
 8010152:	681a      	ldr	r2, [r3, #0]
 8010154:	697b      	ldr	r3, [r7, #20]
 8010156:	4413      	add	r3, r2
}
 8010158:	4618      	mov	r0, r3
 801015a:	371c      	adds	r7, #28
 801015c:	46bd      	mov	sp, r7
 801015e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010162:	4770      	bx	lr

08010164 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8010164:	b580      	push	{r7, lr}
 8010166:	b086      	sub	sp, #24
 8010168:	af00      	add	r7, sp, #0
 801016a:	6078      	str	r0, [r7, #4]
 801016c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010174:	683b      	ldr	r3, [r7, #0]
 8010176:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801017a:	d204      	bcs.n	8010186 <dir_sdi+0x22>
 801017c:	683b      	ldr	r3, [r7, #0]
 801017e:	f003 031f 	and.w	r3, r3, #31
 8010182:	2b00      	cmp	r3, #0
 8010184:	d001      	beq.n	801018a <dir_sdi+0x26>
		return FR_INT_ERR;
 8010186:	2302      	movs	r3, #2
 8010188:	e063      	b.n	8010252 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	683a      	ldr	r2, [r7, #0]
 801018e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	689b      	ldr	r3, [r3, #8]
 8010194:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010196:	697b      	ldr	r3, [r7, #20]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d106      	bne.n	80101aa <dir_sdi+0x46>
 801019c:	693b      	ldr	r3, [r7, #16]
 801019e:	781b      	ldrb	r3, [r3, #0]
 80101a0:	2b02      	cmp	r3, #2
 80101a2:	d902      	bls.n	80101aa <dir_sdi+0x46>
		clst = fs->dirbase;
 80101a4:	693b      	ldr	r3, [r7, #16]
 80101a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101a8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80101aa:	697b      	ldr	r3, [r7, #20]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d10c      	bne.n	80101ca <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80101b0:	683b      	ldr	r3, [r7, #0]
 80101b2:	095b      	lsrs	r3, r3, #5
 80101b4:	693a      	ldr	r2, [r7, #16]
 80101b6:	8912      	ldrh	r2, [r2, #8]
 80101b8:	4293      	cmp	r3, r2
 80101ba:	d301      	bcc.n	80101c0 <dir_sdi+0x5c>
 80101bc:	2302      	movs	r3, #2
 80101be:	e048      	b.n	8010252 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80101c0:	693b      	ldr	r3, [r7, #16]
 80101c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	61da      	str	r2, [r3, #28]
 80101c8:	e029      	b.n	801021e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80101ca:	693b      	ldr	r3, [r7, #16]
 80101cc:	895b      	ldrh	r3, [r3, #10]
 80101ce:	025b      	lsls	r3, r3, #9
 80101d0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80101d2:	e019      	b.n	8010208 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	6979      	ldr	r1, [r7, #20]
 80101d8:	4618      	mov	r0, r3
 80101da:	f7ff fd06 	bl	800fbea <get_fat>
 80101de:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80101e0:	697b      	ldr	r3, [r7, #20]
 80101e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101e6:	d101      	bne.n	80101ec <dir_sdi+0x88>
 80101e8:	2301      	movs	r3, #1
 80101ea:	e032      	b.n	8010252 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80101ec:	697b      	ldr	r3, [r7, #20]
 80101ee:	2b01      	cmp	r3, #1
 80101f0:	d904      	bls.n	80101fc <dir_sdi+0x98>
 80101f2:	693b      	ldr	r3, [r7, #16]
 80101f4:	695b      	ldr	r3, [r3, #20]
 80101f6:	697a      	ldr	r2, [r7, #20]
 80101f8:	429a      	cmp	r2, r3
 80101fa:	d301      	bcc.n	8010200 <dir_sdi+0x9c>
 80101fc:	2302      	movs	r3, #2
 80101fe:	e028      	b.n	8010252 <dir_sdi+0xee>
			ofs -= csz;
 8010200:	683a      	ldr	r2, [r7, #0]
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	1ad3      	subs	r3, r2, r3
 8010206:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010208:	683a      	ldr	r2, [r7, #0]
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	429a      	cmp	r2, r3
 801020e:	d2e1      	bcs.n	80101d4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8010210:	6979      	ldr	r1, [r7, #20]
 8010212:	6938      	ldr	r0, [r7, #16]
 8010214:	f7ff fcca 	bl	800fbac <clust2sect>
 8010218:	4602      	mov	r2, r0
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	697a      	ldr	r2, [r7, #20]
 8010222:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	69db      	ldr	r3, [r3, #28]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d101      	bne.n	8010230 <dir_sdi+0xcc>
 801022c:	2302      	movs	r3, #2
 801022e:	e010      	b.n	8010252 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	69da      	ldr	r2, [r3, #28]
 8010234:	683b      	ldr	r3, [r7, #0]
 8010236:	0a5b      	lsrs	r3, r3, #9
 8010238:	441a      	add	r2, r3
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801023e:	693b      	ldr	r3, [r7, #16]
 8010240:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010244:	683b      	ldr	r3, [r7, #0]
 8010246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801024a:	441a      	add	r2, r3
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010250:	2300      	movs	r3, #0
}
 8010252:	4618      	mov	r0, r3
 8010254:	3718      	adds	r7, #24
 8010256:	46bd      	mov	sp, r7
 8010258:	bd80      	pop	{r7, pc}

0801025a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801025a:	b580      	push	{r7, lr}
 801025c:	b086      	sub	sp, #24
 801025e:	af00      	add	r7, sp, #0
 8010260:	6078      	str	r0, [r7, #4]
 8010262:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	695b      	ldr	r3, [r3, #20]
 801026e:	3320      	adds	r3, #32
 8010270:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	69db      	ldr	r3, [r3, #28]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d003      	beq.n	8010282 <dir_next+0x28>
 801027a:	68bb      	ldr	r3, [r7, #8]
 801027c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010280:	d301      	bcc.n	8010286 <dir_next+0x2c>
 8010282:	2304      	movs	r3, #4
 8010284:	e0aa      	b.n	80103dc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010286:	68bb      	ldr	r3, [r7, #8]
 8010288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801028c:	2b00      	cmp	r3, #0
 801028e:	f040 8098 	bne.w	80103c2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	69db      	ldr	r3, [r3, #28]
 8010296:	1c5a      	adds	r2, r3, #1
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	699b      	ldr	r3, [r3, #24]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d10b      	bne.n	80102bc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80102a4:	68bb      	ldr	r3, [r7, #8]
 80102a6:	095b      	lsrs	r3, r3, #5
 80102a8:	68fa      	ldr	r2, [r7, #12]
 80102aa:	8912      	ldrh	r2, [r2, #8]
 80102ac:	4293      	cmp	r3, r2
 80102ae:	f0c0 8088 	bcc.w	80103c2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	2200      	movs	r2, #0
 80102b6:	61da      	str	r2, [r3, #28]
 80102b8:	2304      	movs	r3, #4
 80102ba:	e08f      	b.n	80103dc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80102bc:	68bb      	ldr	r3, [r7, #8]
 80102be:	0a5b      	lsrs	r3, r3, #9
 80102c0:	68fa      	ldr	r2, [r7, #12]
 80102c2:	8952      	ldrh	r2, [r2, #10]
 80102c4:	3a01      	subs	r2, #1
 80102c6:	4013      	ands	r3, r2
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d17a      	bne.n	80103c2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80102cc:	687a      	ldr	r2, [r7, #4]
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	699b      	ldr	r3, [r3, #24]
 80102d2:	4619      	mov	r1, r3
 80102d4:	4610      	mov	r0, r2
 80102d6:	f7ff fc88 	bl	800fbea <get_fat>
 80102da:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80102dc:	697b      	ldr	r3, [r7, #20]
 80102de:	2b01      	cmp	r3, #1
 80102e0:	d801      	bhi.n	80102e6 <dir_next+0x8c>
 80102e2:	2302      	movs	r3, #2
 80102e4:	e07a      	b.n	80103dc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80102e6:	697b      	ldr	r3, [r7, #20]
 80102e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102ec:	d101      	bne.n	80102f2 <dir_next+0x98>
 80102ee:	2301      	movs	r3, #1
 80102f0:	e074      	b.n	80103dc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	695b      	ldr	r3, [r3, #20]
 80102f6:	697a      	ldr	r2, [r7, #20]
 80102f8:	429a      	cmp	r2, r3
 80102fa:	d358      	bcc.n	80103ae <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80102fc:	683b      	ldr	r3, [r7, #0]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d104      	bne.n	801030c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	2200      	movs	r2, #0
 8010306:	61da      	str	r2, [r3, #28]
 8010308:	2304      	movs	r3, #4
 801030a:	e067      	b.n	80103dc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801030c:	687a      	ldr	r2, [r7, #4]
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	699b      	ldr	r3, [r3, #24]
 8010312:	4619      	mov	r1, r3
 8010314:	4610      	mov	r0, r2
 8010316:	f7ff fe59 	bl	800ffcc <create_chain>
 801031a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801031c:	697b      	ldr	r3, [r7, #20]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d101      	bne.n	8010326 <dir_next+0xcc>
 8010322:	2307      	movs	r3, #7
 8010324:	e05a      	b.n	80103dc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8010326:	697b      	ldr	r3, [r7, #20]
 8010328:	2b01      	cmp	r3, #1
 801032a:	d101      	bne.n	8010330 <dir_next+0xd6>
 801032c:	2302      	movs	r3, #2
 801032e:	e055      	b.n	80103dc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010330:	697b      	ldr	r3, [r7, #20]
 8010332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010336:	d101      	bne.n	801033c <dir_next+0xe2>
 8010338:	2301      	movs	r3, #1
 801033a:	e04f      	b.n	80103dc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801033c:	68f8      	ldr	r0, [r7, #12]
 801033e:	f7ff fb55 	bl	800f9ec <sync_window>
 8010342:	4603      	mov	r3, r0
 8010344:	2b00      	cmp	r3, #0
 8010346:	d001      	beq.n	801034c <dir_next+0xf2>
 8010348:	2301      	movs	r3, #1
 801034a:	e047      	b.n	80103dc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	3330      	adds	r3, #48	; 0x30
 8010350:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010354:	2100      	movs	r1, #0
 8010356:	4618      	mov	r0, r3
 8010358:	f7ff f97f 	bl	800f65a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801035c:	2300      	movs	r3, #0
 801035e:	613b      	str	r3, [r7, #16]
 8010360:	6979      	ldr	r1, [r7, #20]
 8010362:	68f8      	ldr	r0, [r7, #12]
 8010364:	f7ff fc22 	bl	800fbac <clust2sect>
 8010368:	4602      	mov	r2, r0
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	62da      	str	r2, [r3, #44]	; 0x2c
 801036e:	e012      	b.n	8010396 <dir_next+0x13c>
						fs->wflag = 1;
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	2201      	movs	r2, #1
 8010374:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010376:	68f8      	ldr	r0, [r7, #12]
 8010378:	f7ff fb38 	bl	800f9ec <sync_window>
 801037c:	4603      	mov	r3, r0
 801037e:	2b00      	cmp	r3, #0
 8010380:	d001      	beq.n	8010386 <dir_next+0x12c>
 8010382:	2301      	movs	r3, #1
 8010384:	e02a      	b.n	80103dc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010386:	693b      	ldr	r3, [r7, #16]
 8010388:	3301      	adds	r3, #1
 801038a:	613b      	str	r3, [r7, #16]
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010390:	1c5a      	adds	r2, r3, #1
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	62da      	str	r2, [r3, #44]	; 0x2c
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	895b      	ldrh	r3, [r3, #10]
 801039a:	461a      	mov	r2, r3
 801039c:	693b      	ldr	r3, [r7, #16]
 801039e:	4293      	cmp	r3, r2
 80103a0:	d3e6      	bcc.n	8010370 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103a6:	693b      	ldr	r3, [r7, #16]
 80103a8:	1ad2      	subs	r2, r2, r3
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	697a      	ldr	r2, [r7, #20]
 80103b2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80103b4:	6979      	ldr	r1, [r7, #20]
 80103b6:	68f8      	ldr	r0, [r7, #12]
 80103b8:	f7ff fbf8 	bl	800fbac <clust2sect>
 80103bc:	4602      	mov	r2, r0
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	68ba      	ldr	r2, [r7, #8]
 80103c6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80103ce:	68bb      	ldr	r3, [r7, #8]
 80103d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80103d4:	441a      	add	r2, r3
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80103da:	2300      	movs	r3, #0
}
 80103dc:	4618      	mov	r0, r3
 80103de:	3718      	adds	r7, #24
 80103e0:	46bd      	mov	sp, r7
 80103e2:	bd80      	pop	{r7, pc}

080103e4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b086      	sub	sp, #24
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
 80103ec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80103f4:	2100      	movs	r1, #0
 80103f6:	6878      	ldr	r0, [r7, #4]
 80103f8:	f7ff feb4 	bl	8010164 <dir_sdi>
 80103fc:	4603      	mov	r3, r0
 80103fe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010400:	7dfb      	ldrb	r3, [r7, #23]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d12b      	bne.n	801045e <dir_alloc+0x7a>
		n = 0;
 8010406:	2300      	movs	r3, #0
 8010408:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	69db      	ldr	r3, [r3, #28]
 801040e:	4619      	mov	r1, r3
 8010410:	68f8      	ldr	r0, [r7, #12]
 8010412:	f7ff fb2f 	bl	800fa74 <move_window>
 8010416:	4603      	mov	r3, r0
 8010418:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801041a:	7dfb      	ldrb	r3, [r7, #23]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d11d      	bne.n	801045c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	6a1b      	ldr	r3, [r3, #32]
 8010424:	781b      	ldrb	r3, [r3, #0]
 8010426:	2be5      	cmp	r3, #229	; 0xe5
 8010428:	d004      	beq.n	8010434 <dir_alloc+0x50>
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	6a1b      	ldr	r3, [r3, #32]
 801042e:	781b      	ldrb	r3, [r3, #0]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d107      	bne.n	8010444 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8010434:	693b      	ldr	r3, [r7, #16]
 8010436:	3301      	adds	r3, #1
 8010438:	613b      	str	r3, [r7, #16]
 801043a:	693a      	ldr	r2, [r7, #16]
 801043c:	683b      	ldr	r3, [r7, #0]
 801043e:	429a      	cmp	r2, r3
 8010440:	d102      	bne.n	8010448 <dir_alloc+0x64>
 8010442:	e00c      	b.n	801045e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8010444:	2300      	movs	r3, #0
 8010446:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8010448:	2101      	movs	r1, #1
 801044a:	6878      	ldr	r0, [r7, #4]
 801044c:	f7ff ff05 	bl	801025a <dir_next>
 8010450:	4603      	mov	r3, r0
 8010452:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8010454:	7dfb      	ldrb	r3, [r7, #23]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d0d7      	beq.n	801040a <dir_alloc+0x26>
 801045a:	e000      	b.n	801045e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801045c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801045e:	7dfb      	ldrb	r3, [r7, #23]
 8010460:	2b04      	cmp	r3, #4
 8010462:	d101      	bne.n	8010468 <dir_alloc+0x84>
 8010464:	2307      	movs	r3, #7
 8010466:	75fb      	strb	r3, [r7, #23]
	return res;
 8010468:	7dfb      	ldrb	r3, [r7, #23]
}
 801046a:	4618      	mov	r0, r3
 801046c:	3718      	adds	r7, #24
 801046e:	46bd      	mov	sp, r7
 8010470:	bd80      	pop	{r7, pc}

08010472 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8010472:	b580      	push	{r7, lr}
 8010474:	b084      	sub	sp, #16
 8010476:	af00      	add	r7, sp, #0
 8010478:	6078      	str	r0, [r7, #4]
 801047a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801047c:	683b      	ldr	r3, [r7, #0]
 801047e:	331a      	adds	r3, #26
 8010480:	4618      	mov	r0, r3
 8010482:	f7ff f847 	bl	800f514 <ld_word>
 8010486:	4603      	mov	r3, r0
 8010488:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	781b      	ldrb	r3, [r3, #0]
 801048e:	2b03      	cmp	r3, #3
 8010490:	d109      	bne.n	80104a6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8010492:	683b      	ldr	r3, [r7, #0]
 8010494:	3314      	adds	r3, #20
 8010496:	4618      	mov	r0, r3
 8010498:	f7ff f83c 	bl	800f514 <ld_word>
 801049c:	4603      	mov	r3, r0
 801049e:	041b      	lsls	r3, r3, #16
 80104a0:	68fa      	ldr	r2, [r7, #12]
 80104a2:	4313      	orrs	r3, r2
 80104a4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80104a6:	68fb      	ldr	r3, [r7, #12]
}
 80104a8:	4618      	mov	r0, r3
 80104aa:	3710      	adds	r7, #16
 80104ac:	46bd      	mov	sp, r7
 80104ae:	bd80      	pop	{r7, pc}

080104b0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b084      	sub	sp, #16
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	60f8      	str	r0, [r7, #12]
 80104b8:	60b9      	str	r1, [r7, #8]
 80104ba:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80104bc:	68bb      	ldr	r3, [r7, #8]
 80104be:	331a      	adds	r3, #26
 80104c0:	687a      	ldr	r2, [r7, #4]
 80104c2:	b292      	uxth	r2, r2
 80104c4:	4611      	mov	r1, r2
 80104c6:	4618      	mov	r0, r3
 80104c8:	f7ff f85f 	bl	800f58a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	781b      	ldrb	r3, [r3, #0]
 80104d0:	2b03      	cmp	r3, #3
 80104d2:	d109      	bne.n	80104e8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80104d4:	68bb      	ldr	r3, [r7, #8]
 80104d6:	f103 0214 	add.w	r2, r3, #20
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	0c1b      	lsrs	r3, r3, #16
 80104de:	b29b      	uxth	r3, r3
 80104e0:	4619      	mov	r1, r3
 80104e2:	4610      	mov	r0, r2
 80104e4:	f7ff f851 	bl	800f58a <st_word>
	}
}
 80104e8:	bf00      	nop
 80104ea:	3710      	adds	r7, #16
 80104ec:	46bd      	mov	sp, r7
 80104ee:	bd80      	pop	{r7, pc}

080104f0 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b086      	sub	sp, #24
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
 80104f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80104fa:	2304      	movs	r3, #4
 80104fc:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8010504:	e03c      	b.n	8010580 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	69db      	ldr	r3, [r3, #28]
 801050a:	4619      	mov	r1, r3
 801050c:	6938      	ldr	r0, [r7, #16]
 801050e:	f7ff fab1 	bl	800fa74 <move_window>
 8010512:	4603      	mov	r3, r0
 8010514:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010516:	7dfb      	ldrb	r3, [r7, #23]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d136      	bne.n	801058a <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	6a1b      	ldr	r3, [r3, #32]
 8010520:	781b      	ldrb	r3, [r3, #0]
 8010522:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8010524:	7bfb      	ldrb	r3, [r7, #15]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d102      	bne.n	8010530 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801052a:	2304      	movs	r3, #4
 801052c:	75fb      	strb	r3, [r7, #23]
 801052e:	e031      	b.n	8010594 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	6a1b      	ldr	r3, [r3, #32]
 8010534:	330b      	adds	r3, #11
 8010536:	781b      	ldrb	r3, [r3, #0]
 8010538:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801053c:	73bb      	strb	r3, [r7, #14]
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	7bba      	ldrb	r2, [r7, #14]
 8010542:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8010544:	7bfb      	ldrb	r3, [r7, #15]
 8010546:	2be5      	cmp	r3, #229	; 0xe5
 8010548:	d011      	beq.n	801056e <dir_read+0x7e>
 801054a:	7bfb      	ldrb	r3, [r7, #15]
 801054c:	2b2e      	cmp	r3, #46	; 0x2e
 801054e:	d00e      	beq.n	801056e <dir_read+0x7e>
 8010550:	7bbb      	ldrb	r3, [r7, #14]
 8010552:	2b0f      	cmp	r3, #15
 8010554:	d00b      	beq.n	801056e <dir_read+0x7e>
 8010556:	7bbb      	ldrb	r3, [r7, #14]
 8010558:	f023 0320 	bic.w	r3, r3, #32
 801055c:	2b08      	cmp	r3, #8
 801055e:	bf0c      	ite	eq
 8010560:	2301      	moveq	r3, #1
 8010562:	2300      	movne	r3, #0
 8010564:	b2db      	uxtb	r3, r3
 8010566:	461a      	mov	r2, r3
 8010568:	683b      	ldr	r3, [r7, #0]
 801056a:	4293      	cmp	r3, r2
 801056c:	d00f      	beq.n	801058e <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801056e:	2100      	movs	r1, #0
 8010570:	6878      	ldr	r0, [r7, #4]
 8010572:	f7ff fe72 	bl	801025a <dir_next>
 8010576:	4603      	mov	r3, r0
 8010578:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801057a:	7dfb      	ldrb	r3, [r7, #23]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d108      	bne.n	8010592 <dir_read+0xa2>
	while (dp->sect) {
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	69db      	ldr	r3, [r3, #28]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d1be      	bne.n	8010506 <dir_read+0x16>
 8010588:	e004      	b.n	8010594 <dir_read+0xa4>
		if (res != FR_OK) break;
 801058a:	bf00      	nop
 801058c:	e002      	b.n	8010594 <dir_read+0xa4>
				break;
 801058e:	bf00      	nop
 8010590:	e000      	b.n	8010594 <dir_read+0xa4>
		if (res != FR_OK) break;
 8010592:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8010594:	7dfb      	ldrb	r3, [r7, #23]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d002      	beq.n	80105a0 <dir_read+0xb0>
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	2200      	movs	r2, #0
 801059e:	61da      	str	r2, [r3, #28]
	return res;
 80105a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80105a2:	4618      	mov	r0, r3
 80105a4:	3718      	adds	r7, #24
 80105a6:	46bd      	mov	sp, r7
 80105a8:	bd80      	pop	{r7, pc}

080105aa <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80105aa:	b580      	push	{r7, lr}
 80105ac:	b086      	sub	sp, #24
 80105ae:	af00      	add	r7, sp, #0
 80105b0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80105b8:	2100      	movs	r1, #0
 80105ba:	6878      	ldr	r0, [r7, #4]
 80105bc:	f7ff fdd2 	bl	8010164 <dir_sdi>
 80105c0:	4603      	mov	r3, r0
 80105c2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80105c4:	7dfb      	ldrb	r3, [r7, #23]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d001      	beq.n	80105ce <dir_find+0x24>
 80105ca:	7dfb      	ldrb	r3, [r7, #23]
 80105cc:	e03e      	b.n	801064c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	69db      	ldr	r3, [r3, #28]
 80105d2:	4619      	mov	r1, r3
 80105d4:	6938      	ldr	r0, [r7, #16]
 80105d6:	f7ff fa4d 	bl	800fa74 <move_window>
 80105da:	4603      	mov	r3, r0
 80105dc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80105de:	7dfb      	ldrb	r3, [r7, #23]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d12f      	bne.n	8010644 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	6a1b      	ldr	r3, [r3, #32]
 80105e8:	781b      	ldrb	r3, [r3, #0]
 80105ea:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80105ec:	7bfb      	ldrb	r3, [r7, #15]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d102      	bne.n	80105f8 <dir_find+0x4e>
 80105f2:	2304      	movs	r3, #4
 80105f4:	75fb      	strb	r3, [r7, #23]
 80105f6:	e028      	b.n	801064a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	6a1b      	ldr	r3, [r3, #32]
 80105fc:	330b      	adds	r3, #11
 80105fe:	781b      	ldrb	r3, [r3, #0]
 8010600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010604:	b2da      	uxtb	r2, r3
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	6a1b      	ldr	r3, [r3, #32]
 801060e:	330b      	adds	r3, #11
 8010610:	781b      	ldrb	r3, [r3, #0]
 8010612:	f003 0308 	and.w	r3, r3, #8
 8010616:	2b00      	cmp	r3, #0
 8010618:	d10a      	bne.n	8010630 <dir_find+0x86>
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	6a18      	ldr	r0, [r3, #32]
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	3324      	adds	r3, #36	; 0x24
 8010622:	220b      	movs	r2, #11
 8010624:	4619      	mov	r1, r3
 8010626:	f7ff f832 	bl	800f68e <mem_cmp>
 801062a:	4603      	mov	r3, r0
 801062c:	2b00      	cmp	r3, #0
 801062e:	d00b      	beq.n	8010648 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010630:	2100      	movs	r1, #0
 8010632:	6878      	ldr	r0, [r7, #4]
 8010634:	f7ff fe11 	bl	801025a <dir_next>
 8010638:	4603      	mov	r3, r0
 801063a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801063c:	7dfb      	ldrb	r3, [r7, #23]
 801063e:	2b00      	cmp	r3, #0
 8010640:	d0c5      	beq.n	80105ce <dir_find+0x24>
 8010642:	e002      	b.n	801064a <dir_find+0xa0>
		if (res != FR_OK) break;
 8010644:	bf00      	nop
 8010646:	e000      	b.n	801064a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010648:	bf00      	nop

	return res;
 801064a:	7dfb      	ldrb	r3, [r7, #23]
}
 801064c:	4618      	mov	r0, r3
 801064e:	3718      	adds	r7, #24
 8010650:	46bd      	mov	sp, r7
 8010652:	bd80      	pop	{r7, pc}

08010654 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010654:	b580      	push	{r7, lr}
 8010656:	b084      	sub	sp, #16
 8010658:	af00      	add	r7, sp, #0
 801065a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8010662:	2101      	movs	r1, #1
 8010664:	6878      	ldr	r0, [r7, #4]
 8010666:	f7ff febd 	bl	80103e4 <dir_alloc>
 801066a:	4603      	mov	r3, r0
 801066c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801066e:	7bfb      	ldrb	r3, [r7, #15]
 8010670:	2b00      	cmp	r3, #0
 8010672:	d11c      	bne.n	80106ae <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	69db      	ldr	r3, [r3, #28]
 8010678:	4619      	mov	r1, r3
 801067a:	68b8      	ldr	r0, [r7, #8]
 801067c:	f7ff f9fa 	bl	800fa74 <move_window>
 8010680:	4603      	mov	r3, r0
 8010682:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010684:	7bfb      	ldrb	r3, [r7, #15]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d111      	bne.n	80106ae <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	6a1b      	ldr	r3, [r3, #32]
 801068e:	2220      	movs	r2, #32
 8010690:	2100      	movs	r1, #0
 8010692:	4618      	mov	r0, r3
 8010694:	f7fe ffe1 	bl	800f65a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	6a18      	ldr	r0, [r3, #32]
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	3324      	adds	r3, #36	; 0x24
 80106a0:	220b      	movs	r2, #11
 80106a2:	4619      	mov	r1, r3
 80106a4:	f7fe ffb8 	bl	800f618 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80106a8:	68bb      	ldr	r3, [r7, #8]
 80106aa:	2201      	movs	r2, #1
 80106ac:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80106ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80106b0:	4618      	mov	r0, r3
 80106b2:	3710      	adds	r7, #16
 80106b4:	46bd      	mov	sp, r7
 80106b6:	bd80      	pop	{r7, pc}

080106b8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80106b8:	b580      	push	{r7, lr}
 80106ba:	b086      	sub	sp, #24
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
 80106c0:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80106c2:	683b      	ldr	r3, [r7, #0]
 80106c4:	2200      	movs	r2, #0
 80106c6:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	69db      	ldr	r3, [r3, #28]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d04e      	beq.n	801076e <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 80106d0:	2300      	movs	r3, #0
 80106d2:	613b      	str	r3, [r7, #16]
 80106d4:	693b      	ldr	r3, [r7, #16]
 80106d6:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80106d8:	e021      	b.n	801071e <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	6a1a      	ldr	r2, [r3, #32]
 80106de:	697b      	ldr	r3, [r7, #20]
 80106e0:	1c59      	adds	r1, r3, #1
 80106e2:	6179      	str	r1, [r7, #20]
 80106e4:	4413      	add	r3, r2
 80106e6:	781b      	ldrb	r3, [r3, #0]
 80106e8:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80106ea:	7bfb      	ldrb	r3, [r7, #15]
 80106ec:	2b20      	cmp	r3, #32
 80106ee:	d100      	bne.n	80106f2 <get_fileinfo+0x3a>
 80106f0:	e015      	b.n	801071e <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80106f2:	7bfb      	ldrb	r3, [r7, #15]
 80106f4:	2b05      	cmp	r3, #5
 80106f6:	d101      	bne.n	80106fc <get_fileinfo+0x44>
 80106f8:	23e5      	movs	r3, #229	; 0xe5
 80106fa:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80106fc:	697b      	ldr	r3, [r7, #20]
 80106fe:	2b09      	cmp	r3, #9
 8010700:	d106      	bne.n	8010710 <get_fileinfo+0x58>
 8010702:	693b      	ldr	r3, [r7, #16]
 8010704:	1c5a      	adds	r2, r3, #1
 8010706:	613a      	str	r2, [r7, #16]
 8010708:	683a      	ldr	r2, [r7, #0]
 801070a:	4413      	add	r3, r2
 801070c:	222e      	movs	r2, #46	; 0x2e
 801070e:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8010710:	693b      	ldr	r3, [r7, #16]
 8010712:	1c5a      	adds	r2, r3, #1
 8010714:	613a      	str	r2, [r7, #16]
 8010716:	683a      	ldr	r2, [r7, #0]
 8010718:	4413      	add	r3, r2
 801071a:	7bfa      	ldrb	r2, [r7, #15]
 801071c:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 801071e:	697b      	ldr	r3, [r7, #20]
 8010720:	2b0a      	cmp	r3, #10
 8010722:	d9da      	bls.n	80106da <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8010724:	683a      	ldr	r2, [r7, #0]
 8010726:	693b      	ldr	r3, [r7, #16]
 8010728:	4413      	add	r3, r2
 801072a:	3309      	adds	r3, #9
 801072c:	2200      	movs	r2, #0
 801072e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	6a1b      	ldr	r3, [r3, #32]
 8010734:	7ada      	ldrb	r2, [r3, #11]
 8010736:	683b      	ldr	r3, [r7, #0]
 8010738:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	6a1b      	ldr	r3, [r3, #32]
 801073e:	331c      	adds	r3, #28
 8010740:	4618      	mov	r0, r3
 8010742:	f7fe feff 	bl	800f544 <ld_dword>
 8010746:	4602      	mov	r2, r0
 8010748:	683b      	ldr	r3, [r7, #0]
 801074a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	6a1b      	ldr	r3, [r3, #32]
 8010750:	3316      	adds	r3, #22
 8010752:	4618      	mov	r0, r3
 8010754:	f7fe fef6 	bl	800f544 <ld_dword>
 8010758:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801075a:	68bb      	ldr	r3, [r7, #8]
 801075c:	b29a      	uxth	r2, r3
 801075e:	683b      	ldr	r3, [r7, #0]
 8010760:	80da      	strh	r2, [r3, #6]
 8010762:	68bb      	ldr	r3, [r7, #8]
 8010764:	0c1b      	lsrs	r3, r3, #16
 8010766:	b29a      	uxth	r2, r3
 8010768:	683b      	ldr	r3, [r7, #0]
 801076a:	809a      	strh	r2, [r3, #4]
 801076c:	e000      	b.n	8010770 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801076e:	bf00      	nop
}
 8010770:	3718      	adds	r7, #24
 8010772:	46bd      	mov	sp, r7
 8010774:	bd80      	pop	{r7, pc}
	...

08010778 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b088      	sub	sp, #32
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
 8010780:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8010782:	683b      	ldr	r3, [r7, #0]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	60fb      	str	r3, [r7, #12]
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	3324      	adds	r3, #36	; 0x24
 801078c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801078e:	220b      	movs	r2, #11
 8010790:	2120      	movs	r1, #32
 8010792:	68b8      	ldr	r0, [r7, #8]
 8010794:	f7fe ff61 	bl	800f65a <mem_set>
	si = i = 0; ni = 8;
 8010798:	2300      	movs	r3, #0
 801079a:	613b      	str	r3, [r7, #16]
 801079c:	693b      	ldr	r3, [r7, #16]
 801079e:	617b      	str	r3, [r7, #20]
 80107a0:	2308      	movs	r3, #8
 80107a2:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80107a4:	697b      	ldr	r3, [r7, #20]
 80107a6:	1c5a      	adds	r2, r3, #1
 80107a8:	617a      	str	r2, [r7, #20]
 80107aa:	68fa      	ldr	r2, [r7, #12]
 80107ac:	4413      	add	r3, r2
 80107ae:	781b      	ldrb	r3, [r3, #0]
 80107b0:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80107b2:	7ffb      	ldrb	r3, [r7, #31]
 80107b4:	2b20      	cmp	r3, #32
 80107b6:	d94e      	bls.n	8010856 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80107b8:	7ffb      	ldrb	r3, [r7, #31]
 80107ba:	2b2f      	cmp	r3, #47	; 0x2f
 80107bc:	d006      	beq.n	80107cc <create_name+0x54>
 80107be:	7ffb      	ldrb	r3, [r7, #31]
 80107c0:	2b5c      	cmp	r3, #92	; 0x5c
 80107c2:	d110      	bne.n	80107e6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80107c4:	e002      	b.n	80107cc <create_name+0x54>
 80107c6:	697b      	ldr	r3, [r7, #20]
 80107c8:	3301      	adds	r3, #1
 80107ca:	617b      	str	r3, [r7, #20]
 80107cc:	68fa      	ldr	r2, [r7, #12]
 80107ce:	697b      	ldr	r3, [r7, #20]
 80107d0:	4413      	add	r3, r2
 80107d2:	781b      	ldrb	r3, [r3, #0]
 80107d4:	2b2f      	cmp	r3, #47	; 0x2f
 80107d6:	d0f6      	beq.n	80107c6 <create_name+0x4e>
 80107d8:	68fa      	ldr	r2, [r7, #12]
 80107da:	697b      	ldr	r3, [r7, #20]
 80107dc:	4413      	add	r3, r2
 80107de:	781b      	ldrb	r3, [r3, #0]
 80107e0:	2b5c      	cmp	r3, #92	; 0x5c
 80107e2:	d0f0      	beq.n	80107c6 <create_name+0x4e>
			break;
 80107e4:	e038      	b.n	8010858 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80107e6:	7ffb      	ldrb	r3, [r7, #31]
 80107e8:	2b2e      	cmp	r3, #46	; 0x2e
 80107ea:	d003      	beq.n	80107f4 <create_name+0x7c>
 80107ec:	693a      	ldr	r2, [r7, #16]
 80107ee:	69bb      	ldr	r3, [r7, #24]
 80107f0:	429a      	cmp	r2, r3
 80107f2:	d30c      	bcc.n	801080e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80107f4:	69bb      	ldr	r3, [r7, #24]
 80107f6:	2b0b      	cmp	r3, #11
 80107f8:	d002      	beq.n	8010800 <create_name+0x88>
 80107fa:	7ffb      	ldrb	r3, [r7, #31]
 80107fc:	2b2e      	cmp	r3, #46	; 0x2e
 80107fe:	d001      	beq.n	8010804 <create_name+0x8c>
 8010800:	2306      	movs	r3, #6
 8010802:	e044      	b.n	801088e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8010804:	2308      	movs	r3, #8
 8010806:	613b      	str	r3, [r7, #16]
 8010808:	230b      	movs	r3, #11
 801080a:	61bb      	str	r3, [r7, #24]
			continue;
 801080c:	e022      	b.n	8010854 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801080e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010812:	2b00      	cmp	r3, #0
 8010814:	da04      	bge.n	8010820 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8010816:	7ffb      	ldrb	r3, [r7, #31]
 8010818:	3b80      	subs	r3, #128	; 0x80
 801081a:	4a1f      	ldr	r2, [pc, #124]	; (8010898 <create_name+0x120>)
 801081c:	5cd3      	ldrb	r3, [r2, r3]
 801081e:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8010820:	7ffb      	ldrb	r3, [r7, #31]
 8010822:	4619      	mov	r1, r3
 8010824:	481d      	ldr	r0, [pc, #116]	; (801089c <create_name+0x124>)
 8010826:	f7fe ff59 	bl	800f6dc <chk_chr>
 801082a:	4603      	mov	r3, r0
 801082c:	2b00      	cmp	r3, #0
 801082e:	d001      	beq.n	8010834 <create_name+0xbc>
 8010830:	2306      	movs	r3, #6
 8010832:	e02c      	b.n	801088e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8010834:	7ffb      	ldrb	r3, [r7, #31]
 8010836:	2b60      	cmp	r3, #96	; 0x60
 8010838:	d905      	bls.n	8010846 <create_name+0xce>
 801083a:	7ffb      	ldrb	r3, [r7, #31]
 801083c:	2b7a      	cmp	r3, #122	; 0x7a
 801083e:	d802      	bhi.n	8010846 <create_name+0xce>
 8010840:	7ffb      	ldrb	r3, [r7, #31]
 8010842:	3b20      	subs	r3, #32
 8010844:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8010846:	693b      	ldr	r3, [r7, #16]
 8010848:	1c5a      	adds	r2, r3, #1
 801084a:	613a      	str	r2, [r7, #16]
 801084c:	68ba      	ldr	r2, [r7, #8]
 801084e:	4413      	add	r3, r2
 8010850:	7ffa      	ldrb	r2, [r7, #31]
 8010852:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8010854:	e7a6      	b.n	80107a4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010856:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8010858:	68fa      	ldr	r2, [r7, #12]
 801085a:	697b      	ldr	r3, [r7, #20]
 801085c:	441a      	add	r2, r3
 801085e:	683b      	ldr	r3, [r7, #0]
 8010860:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8010862:	693b      	ldr	r3, [r7, #16]
 8010864:	2b00      	cmp	r3, #0
 8010866:	d101      	bne.n	801086c <create_name+0xf4>
 8010868:	2306      	movs	r3, #6
 801086a:	e010      	b.n	801088e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801086c:	68bb      	ldr	r3, [r7, #8]
 801086e:	781b      	ldrb	r3, [r3, #0]
 8010870:	2be5      	cmp	r3, #229	; 0xe5
 8010872:	d102      	bne.n	801087a <create_name+0x102>
 8010874:	68bb      	ldr	r3, [r7, #8]
 8010876:	2205      	movs	r2, #5
 8010878:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801087a:	7ffb      	ldrb	r3, [r7, #31]
 801087c:	2b20      	cmp	r3, #32
 801087e:	d801      	bhi.n	8010884 <create_name+0x10c>
 8010880:	2204      	movs	r2, #4
 8010882:	e000      	b.n	8010886 <create_name+0x10e>
 8010884:	2200      	movs	r2, #0
 8010886:	68bb      	ldr	r3, [r7, #8]
 8010888:	330b      	adds	r3, #11
 801088a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801088c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801088e:	4618      	mov	r0, r3
 8010890:	3720      	adds	r7, #32
 8010892:	46bd      	mov	sp, r7
 8010894:	bd80      	pop	{r7, pc}
 8010896:	bf00      	nop
 8010898:	08012af4 	.word	0x08012af4
 801089c:	08012a78 	.word	0x08012a78

080108a0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b086      	sub	sp, #24
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
 80108a8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80108ae:	693b      	ldr	r3, [r7, #16]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80108b4:	e002      	b.n	80108bc <follow_path+0x1c>
 80108b6:	683b      	ldr	r3, [r7, #0]
 80108b8:	3301      	adds	r3, #1
 80108ba:	603b      	str	r3, [r7, #0]
 80108bc:	683b      	ldr	r3, [r7, #0]
 80108be:	781b      	ldrb	r3, [r3, #0]
 80108c0:	2b2f      	cmp	r3, #47	; 0x2f
 80108c2:	d0f8      	beq.n	80108b6 <follow_path+0x16>
 80108c4:	683b      	ldr	r3, [r7, #0]
 80108c6:	781b      	ldrb	r3, [r3, #0]
 80108c8:	2b5c      	cmp	r3, #92	; 0x5c
 80108ca:	d0f4      	beq.n	80108b6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80108cc:	693b      	ldr	r3, [r7, #16]
 80108ce:	2200      	movs	r2, #0
 80108d0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80108d2:	683b      	ldr	r3, [r7, #0]
 80108d4:	781b      	ldrb	r3, [r3, #0]
 80108d6:	2b1f      	cmp	r3, #31
 80108d8:	d80a      	bhi.n	80108f0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	2280      	movs	r2, #128	; 0x80
 80108de:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80108e2:	2100      	movs	r1, #0
 80108e4:	6878      	ldr	r0, [r7, #4]
 80108e6:	f7ff fc3d 	bl	8010164 <dir_sdi>
 80108ea:	4603      	mov	r3, r0
 80108ec:	75fb      	strb	r3, [r7, #23]
 80108ee:	e043      	b.n	8010978 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80108f0:	463b      	mov	r3, r7
 80108f2:	4619      	mov	r1, r3
 80108f4:	6878      	ldr	r0, [r7, #4]
 80108f6:	f7ff ff3f 	bl	8010778 <create_name>
 80108fa:	4603      	mov	r3, r0
 80108fc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80108fe:	7dfb      	ldrb	r3, [r7, #23]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d134      	bne.n	801096e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010904:	6878      	ldr	r0, [r7, #4]
 8010906:	f7ff fe50 	bl	80105aa <dir_find>
 801090a:	4603      	mov	r3, r0
 801090c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010914:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8010916:	7dfb      	ldrb	r3, [r7, #23]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d00a      	beq.n	8010932 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801091c:	7dfb      	ldrb	r3, [r7, #23]
 801091e:	2b04      	cmp	r3, #4
 8010920:	d127      	bne.n	8010972 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010922:	7afb      	ldrb	r3, [r7, #11]
 8010924:	f003 0304 	and.w	r3, r3, #4
 8010928:	2b00      	cmp	r3, #0
 801092a:	d122      	bne.n	8010972 <follow_path+0xd2>
 801092c:	2305      	movs	r3, #5
 801092e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010930:	e01f      	b.n	8010972 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010932:	7afb      	ldrb	r3, [r7, #11]
 8010934:	f003 0304 	and.w	r3, r3, #4
 8010938:	2b00      	cmp	r3, #0
 801093a:	d11c      	bne.n	8010976 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801093c:	693b      	ldr	r3, [r7, #16]
 801093e:	799b      	ldrb	r3, [r3, #6]
 8010940:	f003 0310 	and.w	r3, r3, #16
 8010944:	2b00      	cmp	r3, #0
 8010946:	d102      	bne.n	801094e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8010948:	2305      	movs	r3, #5
 801094a:	75fb      	strb	r3, [r7, #23]
 801094c:	e014      	b.n	8010978 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	695b      	ldr	r3, [r3, #20]
 8010958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801095c:	4413      	add	r3, r2
 801095e:	4619      	mov	r1, r3
 8010960:	68f8      	ldr	r0, [r7, #12]
 8010962:	f7ff fd86 	bl	8010472 <ld_clust>
 8010966:	4602      	mov	r2, r0
 8010968:	693b      	ldr	r3, [r7, #16]
 801096a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801096c:	e7c0      	b.n	80108f0 <follow_path+0x50>
			if (res != FR_OK) break;
 801096e:	bf00      	nop
 8010970:	e002      	b.n	8010978 <follow_path+0xd8>
				break;
 8010972:	bf00      	nop
 8010974:	e000      	b.n	8010978 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010976:	bf00      	nop
			}
		}
	}

	return res;
 8010978:	7dfb      	ldrb	r3, [r7, #23]
}
 801097a:	4618      	mov	r0, r3
 801097c:	3718      	adds	r7, #24
 801097e:	46bd      	mov	sp, r7
 8010980:	bd80      	pop	{r7, pc}

08010982 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010982:	b480      	push	{r7}
 8010984:	b087      	sub	sp, #28
 8010986:	af00      	add	r7, sp, #0
 8010988:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801098a:	f04f 33ff 	mov.w	r3, #4294967295
 801098e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	2b00      	cmp	r3, #0
 8010996:	d031      	beq.n	80109fc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	617b      	str	r3, [r7, #20]
 801099e:	e002      	b.n	80109a6 <get_ldnumber+0x24>
 80109a0:	697b      	ldr	r3, [r7, #20]
 80109a2:	3301      	adds	r3, #1
 80109a4:	617b      	str	r3, [r7, #20]
 80109a6:	697b      	ldr	r3, [r7, #20]
 80109a8:	781b      	ldrb	r3, [r3, #0]
 80109aa:	2b20      	cmp	r3, #32
 80109ac:	d903      	bls.n	80109b6 <get_ldnumber+0x34>
 80109ae:	697b      	ldr	r3, [r7, #20]
 80109b0:	781b      	ldrb	r3, [r3, #0]
 80109b2:	2b3a      	cmp	r3, #58	; 0x3a
 80109b4:	d1f4      	bne.n	80109a0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80109b6:	697b      	ldr	r3, [r7, #20]
 80109b8:	781b      	ldrb	r3, [r3, #0]
 80109ba:	2b3a      	cmp	r3, #58	; 0x3a
 80109bc:	d11c      	bne.n	80109f8 <get_ldnumber+0x76>
			tp = *path;
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	1c5a      	adds	r2, r3, #1
 80109c8:	60fa      	str	r2, [r7, #12]
 80109ca:	781b      	ldrb	r3, [r3, #0]
 80109cc:	3b30      	subs	r3, #48	; 0x30
 80109ce:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80109d0:	68bb      	ldr	r3, [r7, #8]
 80109d2:	2b09      	cmp	r3, #9
 80109d4:	d80e      	bhi.n	80109f4 <get_ldnumber+0x72>
 80109d6:	68fa      	ldr	r2, [r7, #12]
 80109d8:	697b      	ldr	r3, [r7, #20]
 80109da:	429a      	cmp	r2, r3
 80109dc:	d10a      	bne.n	80109f4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80109de:	68bb      	ldr	r3, [r7, #8]
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d107      	bne.n	80109f4 <get_ldnumber+0x72>
					vol = (int)i;
 80109e4:	68bb      	ldr	r3, [r7, #8]
 80109e6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80109e8:	697b      	ldr	r3, [r7, #20]
 80109ea:	3301      	adds	r3, #1
 80109ec:	617b      	str	r3, [r7, #20]
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	697a      	ldr	r2, [r7, #20]
 80109f2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80109f4:	693b      	ldr	r3, [r7, #16]
 80109f6:	e002      	b.n	80109fe <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80109f8:	2300      	movs	r3, #0
 80109fa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80109fc:	693b      	ldr	r3, [r7, #16]
}
 80109fe:	4618      	mov	r0, r3
 8010a00:	371c      	adds	r7, #28
 8010a02:	46bd      	mov	sp, r7
 8010a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a08:	4770      	bx	lr
	...

08010a0c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b082      	sub	sp, #8
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
 8010a14:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	2200      	movs	r2, #0
 8010a1a:	70da      	strb	r2, [r3, #3]
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8010a22:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010a24:	6839      	ldr	r1, [r7, #0]
 8010a26:	6878      	ldr	r0, [r7, #4]
 8010a28:	f7ff f824 	bl	800fa74 <move_window>
 8010a2c:	4603      	mov	r3, r0
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d001      	beq.n	8010a36 <check_fs+0x2a>
 8010a32:	2304      	movs	r3, #4
 8010a34:	e038      	b.n	8010aa8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	3330      	adds	r3, #48	; 0x30
 8010a3a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010a3e:	4618      	mov	r0, r3
 8010a40:	f7fe fd68 	bl	800f514 <ld_word>
 8010a44:	4603      	mov	r3, r0
 8010a46:	461a      	mov	r2, r3
 8010a48:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010a4c:	429a      	cmp	r2, r3
 8010a4e:	d001      	beq.n	8010a54 <check_fs+0x48>
 8010a50:	2303      	movs	r3, #3
 8010a52:	e029      	b.n	8010aa8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010a5a:	2be9      	cmp	r3, #233	; 0xe9
 8010a5c:	d009      	beq.n	8010a72 <check_fs+0x66>
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010a64:	2beb      	cmp	r3, #235	; 0xeb
 8010a66:	d11e      	bne.n	8010aa6 <check_fs+0x9a>
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8010a6e:	2b90      	cmp	r3, #144	; 0x90
 8010a70:	d119      	bne.n	8010aa6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	3330      	adds	r3, #48	; 0x30
 8010a76:	3336      	adds	r3, #54	; 0x36
 8010a78:	4618      	mov	r0, r3
 8010a7a:	f7fe fd63 	bl	800f544 <ld_dword>
 8010a7e:	4603      	mov	r3, r0
 8010a80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010a84:	4a0a      	ldr	r2, [pc, #40]	; (8010ab0 <check_fs+0xa4>)
 8010a86:	4293      	cmp	r3, r2
 8010a88:	d101      	bne.n	8010a8e <check_fs+0x82>
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	e00c      	b.n	8010aa8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	3330      	adds	r3, #48	; 0x30
 8010a92:	3352      	adds	r3, #82	; 0x52
 8010a94:	4618      	mov	r0, r3
 8010a96:	f7fe fd55 	bl	800f544 <ld_dword>
 8010a9a:	4602      	mov	r2, r0
 8010a9c:	4b05      	ldr	r3, [pc, #20]	; (8010ab4 <check_fs+0xa8>)
 8010a9e:	429a      	cmp	r2, r3
 8010aa0:	d101      	bne.n	8010aa6 <check_fs+0x9a>
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	e000      	b.n	8010aa8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010aa6:	2302      	movs	r3, #2
}
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	3708      	adds	r7, #8
 8010aac:	46bd      	mov	sp, r7
 8010aae:	bd80      	pop	{r7, pc}
 8010ab0:	00544146 	.word	0x00544146
 8010ab4:	33544146 	.word	0x33544146

08010ab8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b096      	sub	sp, #88	; 0x58
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	60f8      	str	r0, [r7, #12]
 8010ac0:	60b9      	str	r1, [r7, #8]
 8010ac2:	4613      	mov	r3, r2
 8010ac4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010ac6:	68bb      	ldr	r3, [r7, #8]
 8010ac8:	2200      	movs	r2, #0
 8010aca:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010acc:	68f8      	ldr	r0, [r7, #12]
 8010ace:	f7ff ff58 	bl	8010982 <get_ldnumber>
 8010ad2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	da01      	bge.n	8010ade <find_volume+0x26>
 8010ada:	230b      	movs	r3, #11
 8010adc:	e22e      	b.n	8010f3c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010ade:	4aa8      	ldr	r2, [pc, #672]	; (8010d80 <find_volume+0x2c8>)
 8010ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010ae6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d101      	bne.n	8010af2 <find_volume+0x3a>
 8010aee:	230c      	movs	r3, #12
 8010af0:	e224      	b.n	8010f3c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8010af2:	68bb      	ldr	r3, [r7, #8]
 8010af4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010af6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010af8:	79fb      	ldrb	r3, [r7, #7]
 8010afa:	f023 0301 	bic.w	r3, r3, #1
 8010afe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b02:	781b      	ldrb	r3, [r3, #0]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d01a      	beq.n	8010b3e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8010b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b0a:	785b      	ldrb	r3, [r3, #1]
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	f7fe fc63 	bl	800f3d8 <disk_status>
 8010b12:	4603      	mov	r3, r0
 8010b14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010b18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010b1c:	f003 0301 	and.w	r3, r3, #1
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d10c      	bne.n	8010b3e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010b24:	79fb      	ldrb	r3, [r7, #7]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d007      	beq.n	8010b3a <find_volume+0x82>
 8010b2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010b2e:	f003 0304 	and.w	r3, r3, #4
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d001      	beq.n	8010b3a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8010b36:	230a      	movs	r3, #10
 8010b38:	e200      	b.n	8010f3c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	e1fe      	b.n	8010f3c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b40:	2200      	movs	r2, #0
 8010b42:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b46:	b2da      	uxtb	r2, r3
 8010b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b4a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b4e:	785b      	ldrb	r3, [r3, #1]
 8010b50:	4618      	mov	r0, r3
 8010b52:	f7fe fc5b 	bl	800f40c <disk_initialize>
 8010b56:	4603      	mov	r3, r0
 8010b58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010b5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010b60:	f003 0301 	and.w	r3, r3, #1
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d001      	beq.n	8010b6c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010b68:	2303      	movs	r3, #3
 8010b6a:	e1e7      	b.n	8010f3c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010b6c:	79fb      	ldrb	r3, [r7, #7]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d007      	beq.n	8010b82 <find_volume+0xca>
 8010b72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010b76:	f003 0304 	and.w	r3, r3, #4
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d001      	beq.n	8010b82 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8010b7e:	230a      	movs	r3, #10
 8010b80:	e1dc      	b.n	8010f3c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010b82:	2300      	movs	r3, #0
 8010b84:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010b86:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010b88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010b8a:	f7ff ff3f 	bl	8010a0c <check_fs>
 8010b8e:	4603      	mov	r3, r0
 8010b90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010b94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010b98:	2b02      	cmp	r3, #2
 8010b9a:	d14b      	bne.n	8010c34 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	643b      	str	r3, [r7, #64]	; 0x40
 8010ba0:	e01f      	b.n	8010be2 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ba4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010baa:	011b      	lsls	r3, r3, #4
 8010bac:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010bb0:	4413      	add	r3, r2
 8010bb2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bb6:	3304      	adds	r3, #4
 8010bb8:	781b      	ldrb	r3, [r3, #0]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d006      	beq.n	8010bcc <find_volume+0x114>
 8010bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bc0:	3308      	adds	r3, #8
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	f7fe fcbe 	bl	800f544 <ld_dword>
 8010bc8:	4602      	mov	r2, r0
 8010bca:	e000      	b.n	8010bce <find_volume+0x116>
 8010bcc:	2200      	movs	r2, #0
 8010bce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010bd0:	009b      	lsls	r3, r3, #2
 8010bd2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8010bd6:	440b      	add	r3, r1
 8010bd8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010bde:	3301      	adds	r3, #1
 8010be0:	643b      	str	r3, [r7, #64]	; 0x40
 8010be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010be4:	2b03      	cmp	r3, #3
 8010be6:	d9dc      	bls.n	8010ba2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010be8:	2300      	movs	r3, #0
 8010bea:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8010bec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d002      	beq.n	8010bf8 <find_volume+0x140>
 8010bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010bf4:	3b01      	subs	r3, #1
 8010bf6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010bfa:	009b      	lsls	r3, r3, #2
 8010bfc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010c00:	4413      	add	r3, r2
 8010c02:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010c06:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010c08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d005      	beq.n	8010c1a <find_volume+0x162>
 8010c0e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010c10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010c12:	f7ff fefb 	bl	8010a0c <check_fs>
 8010c16:	4603      	mov	r3, r0
 8010c18:	e000      	b.n	8010c1c <find_volume+0x164>
 8010c1a:	2303      	movs	r3, #3
 8010c1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010c20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010c24:	2b01      	cmp	r3, #1
 8010c26:	d905      	bls.n	8010c34 <find_volume+0x17c>
 8010c28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c2a:	3301      	adds	r3, #1
 8010c2c:	643b      	str	r3, [r7, #64]	; 0x40
 8010c2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c30:	2b03      	cmp	r3, #3
 8010c32:	d9e1      	bls.n	8010bf8 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010c34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010c38:	2b04      	cmp	r3, #4
 8010c3a:	d101      	bne.n	8010c40 <find_volume+0x188>
 8010c3c:	2301      	movs	r3, #1
 8010c3e:	e17d      	b.n	8010f3c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010c40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010c44:	2b01      	cmp	r3, #1
 8010c46:	d901      	bls.n	8010c4c <find_volume+0x194>
 8010c48:	230d      	movs	r3, #13
 8010c4a:	e177      	b.n	8010f3c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c4e:	3330      	adds	r3, #48	; 0x30
 8010c50:	330b      	adds	r3, #11
 8010c52:	4618      	mov	r0, r3
 8010c54:	f7fe fc5e 	bl	800f514 <ld_word>
 8010c58:	4603      	mov	r3, r0
 8010c5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010c5e:	d001      	beq.n	8010c64 <find_volume+0x1ac>
 8010c60:	230d      	movs	r3, #13
 8010c62:	e16b      	b.n	8010f3c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c66:	3330      	adds	r3, #48	; 0x30
 8010c68:	3316      	adds	r3, #22
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	f7fe fc52 	bl	800f514 <ld_word>
 8010c70:	4603      	mov	r3, r0
 8010c72:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d106      	bne.n	8010c88 <find_volume+0x1d0>
 8010c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c7c:	3330      	adds	r3, #48	; 0x30
 8010c7e:	3324      	adds	r3, #36	; 0x24
 8010c80:	4618      	mov	r0, r3
 8010c82:	f7fe fc5f 	bl	800f544 <ld_dword>
 8010c86:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8010c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010c8c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c90:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8010c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c96:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c9a:	789b      	ldrb	r3, [r3, #2]
 8010c9c:	2b01      	cmp	r3, #1
 8010c9e:	d005      	beq.n	8010cac <find_volume+0x1f4>
 8010ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ca2:	789b      	ldrb	r3, [r3, #2]
 8010ca4:	2b02      	cmp	r3, #2
 8010ca6:	d001      	beq.n	8010cac <find_volume+0x1f4>
 8010ca8:	230d      	movs	r3, #13
 8010caa:	e147      	b.n	8010f3c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cae:	789b      	ldrb	r3, [r3, #2]
 8010cb0:	461a      	mov	r2, r3
 8010cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cb4:	fb02 f303 	mul.w	r3, r2, r3
 8010cb8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010cc0:	b29a      	uxth	r2, r3
 8010cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cc4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cc8:	895b      	ldrh	r3, [r3, #10]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d008      	beq.n	8010ce0 <find_volume+0x228>
 8010cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cd0:	895b      	ldrh	r3, [r3, #10]
 8010cd2:	461a      	mov	r2, r3
 8010cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cd6:	895b      	ldrh	r3, [r3, #10]
 8010cd8:	3b01      	subs	r3, #1
 8010cda:	4013      	ands	r3, r2
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d001      	beq.n	8010ce4 <find_volume+0x22c>
 8010ce0:	230d      	movs	r3, #13
 8010ce2:	e12b      	b.n	8010f3c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ce6:	3330      	adds	r3, #48	; 0x30
 8010ce8:	3311      	adds	r3, #17
 8010cea:	4618      	mov	r0, r3
 8010cec:	f7fe fc12 	bl	800f514 <ld_word>
 8010cf0:	4603      	mov	r3, r0
 8010cf2:	461a      	mov	r2, r3
 8010cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cf6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cfa:	891b      	ldrh	r3, [r3, #8]
 8010cfc:	f003 030f 	and.w	r3, r3, #15
 8010d00:	b29b      	uxth	r3, r3
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d001      	beq.n	8010d0a <find_volume+0x252>
 8010d06:	230d      	movs	r3, #13
 8010d08:	e118      	b.n	8010f3c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d0c:	3330      	adds	r3, #48	; 0x30
 8010d0e:	3313      	adds	r3, #19
 8010d10:	4618      	mov	r0, r3
 8010d12:	f7fe fbff 	bl	800f514 <ld_word>
 8010d16:	4603      	mov	r3, r0
 8010d18:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010d1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d106      	bne.n	8010d2e <find_volume+0x276>
 8010d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d22:	3330      	adds	r3, #48	; 0x30
 8010d24:	3320      	adds	r3, #32
 8010d26:	4618      	mov	r0, r3
 8010d28:	f7fe fc0c 	bl	800f544 <ld_dword>
 8010d2c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d30:	3330      	adds	r3, #48	; 0x30
 8010d32:	330e      	adds	r3, #14
 8010d34:	4618      	mov	r0, r3
 8010d36:	f7fe fbed 	bl	800f514 <ld_word>
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010d3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d101      	bne.n	8010d48 <find_volume+0x290>
 8010d44:	230d      	movs	r3, #13
 8010d46:	e0f9      	b.n	8010f3c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010d48:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d4c:	4413      	add	r3, r2
 8010d4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010d50:	8912      	ldrh	r2, [r2, #8]
 8010d52:	0912      	lsrs	r2, r2, #4
 8010d54:	b292      	uxth	r2, r2
 8010d56:	4413      	add	r3, r2
 8010d58:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010d5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d5e:	429a      	cmp	r2, r3
 8010d60:	d201      	bcs.n	8010d66 <find_volume+0x2ae>
 8010d62:	230d      	movs	r3, #13
 8010d64:	e0ea      	b.n	8010f3c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010d66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d6a:	1ad3      	subs	r3, r2, r3
 8010d6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010d6e:	8952      	ldrh	r2, [r2, #10]
 8010d70:	fbb3 f3f2 	udiv	r3, r3, r2
 8010d74:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d103      	bne.n	8010d84 <find_volume+0x2cc>
 8010d7c:	230d      	movs	r3, #13
 8010d7e:	e0dd      	b.n	8010f3c <find_volume+0x484>
 8010d80:	20002230 	.word	0x20002230
		fmt = FS_FAT32;
 8010d84:	2303      	movs	r3, #3
 8010d86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d8c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010d90:	4293      	cmp	r3, r2
 8010d92:	d802      	bhi.n	8010d9a <find_volume+0x2e2>
 8010d94:	2302      	movs	r3, #2
 8010d96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d9c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010da0:	4293      	cmp	r3, r2
 8010da2:	d802      	bhi.n	8010daa <find_volume+0x2f2>
 8010da4:	2301      	movs	r3, #1
 8010da6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dac:	1c9a      	adds	r2, r3, #2
 8010dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010db0:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8010db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010db4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010db6:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010db8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010dbc:	441a      	add	r2, r3
 8010dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dc0:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8010dc2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dc6:	441a      	add	r2, r3
 8010dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dca:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8010dcc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010dd0:	2b03      	cmp	r3, #3
 8010dd2:	d11e      	bne.n	8010e12 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dd6:	3330      	adds	r3, #48	; 0x30
 8010dd8:	332a      	adds	r3, #42	; 0x2a
 8010dda:	4618      	mov	r0, r3
 8010ddc:	f7fe fb9a 	bl	800f514 <ld_word>
 8010de0:	4603      	mov	r3, r0
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d001      	beq.n	8010dea <find_volume+0x332>
 8010de6:	230d      	movs	r3, #13
 8010de8:	e0a8      	b.n	8010f3c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dec:	891b      	ldrh	r3, [r3, #8]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d001      	beq.n	8010df6 <find_volume+0x33e>
 8010df2:	230d      	movs	r3, #13
 8010df4:	e0a2      	b.n	8010f3c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010df8:	3330      	adds	r3, #48	; 0x30
 8010dfa:	332c      	adds	r3, #44	; 0x2c
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	f7fe fba1 	bl	800f544 <ld_dword>
 8010e02:	4602      	mov	r2, r0
 8010e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e06:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e0a:	695b      	ldr	r3, [r3, #20]
 8010e0c:	009b      	lsls	r3, r3, #2
 8010e0e:	647b      	str	r3, [r7, #68]	; 0x44
 8010e10:	e01f      	b.n	8010e52 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e14:	891b      	ldrh	r3, [r3, #8]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d101      	bne.n	8010e1e <find_volume+0x366>
 8010e1a:	230d      	movs	r3, #13
 8010e1c:	e08e      	b.n	8010f3c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e20:	6a1a      	ldr	r2, [r3, #32]
 8010e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e24:	441a      	add	r2, r3
 8010e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e28:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010e2a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010e2e:	2b02      	cmp	r3, #2
 8010e30:	d103      	bne.n	8010e3a <find_volume+0x382>
 8010e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e34:	695b      	ldr	r3, [r3, #20]
 8010e36:	005b      	lsls	r3, r3, #1
 8010e38:	e00a      	b.n	8010e50 <find_volume+0x398>
 8010e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e3c:	695a      	ldr	r2, [r3, #20]
 8010e3e:	4613      	mov	r3, r2
 8010e40:	005b      	lsls	r3, r3, #1
 8010e42:	4413      	add	r3, r2
 8010e44:	085a      	lsrs	r2, r3, #1
 8010e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e48:	695b      	ldr	r3, [r3, #20]
 8010e4a:	f003 0301 	and.w	r3, r3, #1
 8010e4e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010e50:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e54:	699a      	ldr	r2, [r3, #24]
 8010e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e58:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8010e5c:	0a5b      	lsrs	r3, r3, #9
 8010e5e:	429a      	cmp	r2, r3
 8010e60:	d201      	bcs.n	8010e66 <find_volume+0x3ae>
 8010e62:	230d      	movs	r3, #13
 8010e64:	e06a      	b.n	8010f3c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e68:	f04f 32ff 	mov.w	r2, #4294967295
 8010e6c:	611a      	str	r2, [r3, #16]
 8010e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e70:	691a      	ldr	r2, [r3, #16]
 8010e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e74:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8010e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e78:	2280      	movs	r2, #128	; 0x80
 8010e7a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010e7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010e80:	2b03      	cmp	r3, #3
 8010e82:	d149      	bne.n	8010f18 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e86:	3330      	adds	r3, #48	; 0x30
 8010e88:	3330      	adds	r3, #48	; 0x30
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	f7fe fb42 	bl	800f514 <ld_word>
 8010e90:	4603      	mov	r3, r0
 8010e92:	2b01      	cmp	r3, #1
 8010e94:	d140      	bne.n	8010f18 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e98:	3301      	adds	r3, #1
 8010e9a:	4619      	mov	r1, r3
 8010e9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010e9e:	f7fe fde9 	bl	800fa74 <move_window>
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d137      	bne.n	8010f18 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8010ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eaa:	2200      	movs	r2, #0
 8010eac:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eb0:	3330      	adds	r3, #48	; 0x30
 8010eb2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	f7fe fb2c 	bl	800f514 <ld_word>
 8010ebc:	4603      	mov	r3, r0
 8010ebe:	461a      	mov	r2, r3
 8010ec0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010ec4:	429a      	cmp	r2, r3
 8010ec6:	d127      	bne.n	8010f18 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eca:	3330      	adds	r3, #48	; 0x30
 8010ecc:	4618      	mov	r0, r3
 8010ece:	f7fe fb39 	bl	800f544 <ld_dword>
 8010ed2:	4602      	mov	r2, r0
 8010ed4:	4b1b      	ldr	r3, [pc, #108]	; (8010f44 <find_volume+0x48c>)
 8010ed6:	429a      	cmp	r2, r3
 8010ed8:	d11e      	bne.n	8010f18 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010edc:	3330      	adds	r3, #48	; 0x30
 8010ede:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	f7fe fb2e 	bl	800f544 <ld_dword>
 8010ee8:	4602      	mov	r2, r0
 8010eea:	4b17      	ldr	r3, [pc, #92]	; (8010f48 <find_volume+0x490>)
 8010eec:	429a      	cmp	r2, r3
 8010eee:	d113      	bne.n	8010f18 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ef2:	3330      	adds	r3, #48	; 0x30
 8010ef4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8010ef8:	4618      	mov	r0, r3
 8010efa:	f7fe fb23 	bl	800f544 <ld_dword>
 8010efe:	4602      	mov	r2, r0
 8010f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f02:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f06:	3330      	adds	r3, #48	; 0x30
 8010f08:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	f7fe fb19 	bl	800f544 <ld_dword>
 8010f12:	4602      	mov	r2, r0
 8010f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f16:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f1a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8010f1e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010f20:	4b0a      	ldr	r3, [pc, #40]	; (8010f4c <find_volume+0x494>)
 8010f22:	881b      	ldrh	r3, [r3, #0]
 8010f24:	3301      	adds	r3, #1
 8010f26:	b29a      	uxth	r2, r3
 8010f28:	4b08      	ldr	r3, [pc, #32]	; (8010f4c <find_volume+0x494>)
 8010f2a:	801a      	strh	r2, [r3, #0]
 8010f2c:	4b07      	ldr	r3, [pc, #28]	; (8010f4c <find_volume+0x494>)
 8010f2e:	881a      	ldrh	r2, [r3, #0]
 8010f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f32:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010f34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010f36:	f7fe fd35 	bl	800f9a4 <clear_lock>
#endif
	return FR_OK;
 8010f3a:	2300      	movs	r3, #0
}
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	3758      	adds	r7, #88	; 0x58
 8010f40:	46bd      	mov	sp, r7
 8010f42:	bd80      	pop	{r7, pc}
 8010f44:	41615252 	.word	0x41615252
 8010f48:	61417272 	.word	0x61417272
 8010f4c:	20002234 	.word	0x20002234

08010f50 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010f50:	b580      	push	{r7, lr}
 8010f52:	b084      	sub	sp, #16
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	6078      	str	r0, [r7, #4]
 8010f58:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010f5a:	2309      	movs	r3, #9
 8010f5c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d01c      	beq.n	8010f9e <validate+0x4e>
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d018      	beq.n	8010f9e <validate+0x4e>
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	781b      	ldrb	r3, [r3, #0]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d013      	beq.n	8010f9e <validate+0x4e>
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	889a      	ldrh	r2, [r3, #4]
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	88db      	ldrh	r3, [r3, #6]
 8010f80:	429a      	cmp	r2, r3
 8010f82:	d10c      	bne.n	8010f9e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	785b      	ldrb	r3, [r3, #1]
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	f7fe fa24 	bl	800f3d8 <disk_status>
 8010f90:	4603      	mov	r3, r0
 8010f92:	f003 0301 	and.w	r3, r3, #1
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d101      	bne.n	8010f9e <validate+0x4e>
			res = FR_OK;
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010f9e:	7bfb      	ldrb	r3, [r7, #15]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d102      	bne.n	8010faa <validate+0x5a>
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	e000      	b.n	8010fac <validate+0x5c>
 8010faa:	2300      	movs	r3, #0
 8010fac:	683a      	ldr	r2, [r7, #0]
 8010fae:	6013      	str	r3, [r2, #0]
	return res;
 8010fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	3710      	adds	r7, #16
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	bd80      	pop	{r7, pc}
	...

08010fbc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010fbc:	b580      	push	{r7, lr}
 8010fbe:	b088      	sub	sp, #32
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	60f8      	str	r0, [r7, #12]
 8010fc4:	60b9      	str	r1, [r7, #8]
 8010fc6:	4613      	mov	r3, r2
 8010fc8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010fca:	68bb      	ldr	r3, [r7, #8]
 8010fcc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010fce:	f107 0310 	add.w	r3, r7, #16
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	f7ff fcd5 	bl	8010982 <get_ldnumber>
 8010fd8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010fda:	69fb      	ldr	r3, [r7, #28]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	da01      	bge.n	8010fe4 <f_mount+0x28>
 8010fe0:	230b      	movs	r3, #11
 8010fe2:	e02b      	b.n	801103c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010fe4:	4a17      	ldr	r2, [pc, #92]	; (8011044 <f_mount+0x88>)
 8010fe6:	69fb      	ldr	r3, [r7, #28]
 8010fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010fec:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010fee:	69bb      	ldr	r3, [r7, #24]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d005      	beq.n	8011000 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010ff4:	69b8      	ldr	r0, [r7, #24]
 8010ff6:	f7fe fcd5 	bl	800f9a4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010ffa:	69bb      	ldr	r3, [r7, #24]
 8010ffc:	2200      	movs	r2, #0
 8010ffe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	2b00      	cmp	r3, #0
 8011004:	d002      	beq.n	801100c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	2200      	movs	r2, #0
 801100a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801100c:	68fa      	ldr	r2, [r7, #12]
 801100e:	490d      	ldr	r1, [pc, #52]	; (8011044 <f_mount+0x88>)
 8011010:	69fb      	ldr	r3, [r7, #28]
 8011012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	2b00      	cmp	r3, #0
 801101a:	d002      	beq.n	8011022 <f_mount+0x66>
 801101c:	79fb      	ldrb	r3, [r7, #7]
 801101e:	2b01      	cmp	r3, #1
 8011020:	d001      	beq.n	8011026 <f_mount+0x6a>
 8011022:	2300      	movs	r3, #0
 8011024:	e00a      	b.n	801103c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011026:	f107 010c 	add.w	r1, r7, #12
 801102a:	f107 0308 	add.w	r3, r7, #8
 801102e:	2200      	movs	r2, #0
 8011030:	4618      	mov	r0, r3
 8011032:	f7ff fd41 	bl	8010ab8 <find_volume>
 8011036:	4603      	mov	r3, r0
 8011038:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801103a:	7dfb      	ldrb	r3, [r7, #23]
}
 801103c:	4618      	mov	r0, r3
 801103e:	3720      	adds	r7, #32
 8011040:	46bd      	mov	sp, r7
 8011042:	bd80      	pop	{r7, pc}
 8011044:	20002230 	.word	0x20002230

08011048 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011048:	b580      	push	{r7, lr}
 801104a:	b098      	sub	sp, #96	; 0x60
 801104c:	af00      	add	r7, sp, #0
 801104e:	60f8      	str	r0, [r7, #12]
 8011050:	60b9      	str	r1, [r7, #8]
 8011052:	4613      	mov	r3, r2
 8011054:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	2b00      	cmp	r3, #0
 801105a:	d101      	bne.n	8011060 <f_open+0x18>
 801105c:	2309      	movs	r3, #9
 801105e:	e1ad      	b.n	80113bc <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8011060:	79fb      	ldrb	r3, [r7, #7]
 8011062:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011066:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8011068:	79fa      	ldrb	r2, [r7, #7]
 801106a:	f107 0110 	add.w	r1, r7, #16
 801106e:	f107 0308 	add.w	r3, r7, #8
 8011072:	4618      	mov	r0, r3
 8011074:	f7ff fd20 	bl	8010ab8 <find_volume>
 8011078:	4603      	mov	r3, r0
 801107a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801107e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011082:	2b00      	cmp	r3, #0
 8011084:	f040 8191 	bne.w	80113aa <f_open+0x362>
		dj.obj.fs = fs;
 8011088:	693b      	ldr	r3, [r7, #16]
 801108a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801108c:	68ba      	ldr	r2, [r7, #8]
 801108e:	f107 0314 	add.w	r3, r7, #20
 8011092:	4611      	mov	r1, r2
 8011094:	4618      	mov	r0, r3
 8011096:	f7ff fc03 	bl	80108a0 <follow_path>
 801109a:	4603      	mov	r3, r0
 801109c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80110a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d11a      	bne.n	80110de <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80110a8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80110ac:	b25b      	sxtb	r3, r3
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	da03      	bge.n	80110ba <f_open+0x72>
				res = FR_INVALID_NAME;
 80110b2:	2306      	movs	r3, #6
 80110b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80110b8:	e011      	b.n	80110de <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80110ba:	79fb      	ldrb	r3, [r7, #7]
 80110bc:	f023 0301 	bic.w	r3, r3, #1
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	bf14      	ite	ne
 80110c4:	2301      	movne	r3, #1
 80110c6:	2300      	moveq	r3, #0
 80110c8:	b2db      	uxtb	r3, r3
 80110ca:	461a      	mov	r2, r3
 80110cc:	f107 0314 	add.w	r3, r7, #20
 80110d0:	4611      	mov	r1, r2
 80110d2:	4618      	mov	r0, r3
 80110d4:	f7fe fb1e 	bl	800f714 <chk_lock>
 80110d8:	4603      	mov	r3, r0
 80110da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80110de:	79fb      	ldrb	r3, [r7, #7]
 80110e0:	f003 031c 	and.w	r3, r3, #28
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d07f      	beq.n	80111e8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80110e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d017      	beq.n	8011120 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80110f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80110f4:	2b04      	cmp	r3, #4
 80110f6:	d10e      	bne.n	8011116 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80110f8:	f7fe fb68 	bl	800f7cc <enq_lock>
 80110fc:	4603      	mov	r3, r0
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d006      	beq.n	8011110 <f_open+0xc8>
 8011102:	f107 0314 	add.w	r3, r7, #20
 8011106:	4618      	mov	r0, r3
 8011108:	f7ff faa4 	bl	8010654 <dir_register>
 801110c:	4603      	mov	r3, r0
 801110e:	e000      	b.n	8011112 <f_open+0xca>
 8011110:	2312      	movs	r3, #18
 8011112:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8011116:	79fb      	ldrb	r3, [r7, #7]
 8011118:	f043 0308 	orr.w	r3, r3, #8
 801111c:	71fb      	strb	r3, [r7, #7]
 801111e:	e010      	b.n	8011142 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011120:	7ebb      	ldrb	r3, [r7, #26]
 8011122:	f003 0311 	and.w	r3, r3, #17
 8011126:	2b00      	cmp	r3, #0
 8011128:	d003      	beq.n	8011132 <f_open+0xea>
					res = FR_DENIED;
 801112a:	2307      	movs	r3, #7
 801112c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011130:	e007      	b.n	8011142 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8011132:	79fb      	ldrb	r3, [r7, #7]
 8011134:	f003 0304 	and.w	r3, r3, #4
 8011138:	2b00      	cmp	r3, #0
 801113a:	d002      	beq.n	8011142 <f_open+0xfa>
 801113c:	2308      	movs	r3, #8
 801113e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8011142:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011146:	2b00      	cmp	r3, #0
 8011148:	d168      	bne.n	801121c <f_open+0x1d4>
 801114a:	79fb      	ldrb	r3, [r7, #7]
 801114c:	f003 0308 	and.w	r3, r3, #8
 8011150:	2b00      	cmp	r3, #0
 8011152:	d063      	beq.n	801121c <f_open+0x1d4>
				dw = GET_FATTIME();
 8011154:	f7fb f92a 	bl	800c3ac <get_fattime>
 8011158:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801115a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801115c:	330e      	adds	r3, #14
 801115e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011160:	4618      	mov	r0, r3
 8011162:	f7fe fa2d 	bl	800f5c0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8011166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011168:	3316      	adds	r3, #22
 801116a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801116c:	4618      	mov	r0, r3
 801116e:	f7fe fa27 	bl	800f5c0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8011172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011174:	330b      	adds	r3, #11
 8011176:	2220      	movs	r2, #32
 8011178:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801117a:	693b      	ldr	r3, [r7, #16]
 801117c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801117e:	4611      	mov	r1, r2
 8011180:	4618      	mov	r0, r3
 8011182:	f7ff f976 	bl	8010472 <ld_clust>
 8011186:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8011188:	693b      	ldr	r3, [r7, #16]
 801118a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801118c:	2200      	movs	r2, #0
 801118e:	4618      	mov	r0, r3
 8011190:	f7ff f98e 	bl	80104b0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8011194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011196:	331c      	adds	r3, #28
 8011198:	2100      	movs	r1, #0
 801119a:	4618      	mov	r0, r3
 801119c:	f7fe fa10 	bl	800f5c0 <st_dword>
					fs->wflag = 1;
 80111a0:	693b      	ldr	r3, [r7, #16]
 80111a2:	2201      	movs	r2, #1
 80111a4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80111a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d037      	beq.n	801121c <f_open+0x1d4>
						dw = fs->winsect;
 80111ac:	693b      	ldr	r3, [r7, #16]
 80111ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111b0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80111b2:	f107 0314 	add.w	r3, r7, #20
 80111b6:	2200      	movs	r2, #0
 80111b8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80111ba:	4618      	mov	r0, r3
 80111bc:	f7fe fea1 	bl	800ff02 <remove_chain>
 80111c0:	4603      	mov	r3, r0
 80111c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80111c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d126      	bne.n	801121c <f_open+0x1d4>
							res = move_window(fs, dw);
 80111ce:	693b      	ldr	r3, [r7, #16]
 80111d0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80111d2:	4618      	mov	r0, r3
 80111d4:	f7fe fc4e 	bl	800fa74 <move_window>
 80111d8:	4603      	mov	r3, r0
 80111da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80111de:	693b      	ldr	r3, [r7, #16]
 80111e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80111e2:	3a01      	subs	r2, #1
 80111e4:	60da      	str	r2, [r3, #12]
 80111e6:	e019      	b.n	801121c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80111e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d115      	bne.n	801121c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80111f0:	7ebb      	ldrb	r3, [r7, #26]
 80111f2:	f003 0310 	and.w	r3, r3, #16
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d003      	beq.n	8011202 <f_open+0x1ba>
					res = FR_NO_FILE;
 80111fa:	2304      	movs	r3, #4
 80111fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011200:	e00c      	b.n	801121c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8011202:	79fb      	ldrb	r3, [r7, #7]
 8011204:	f003 0302 	and.w	r3, r3, #2
 8011208:	2b00      	cmp	r3, #0
 801120a:	d007      	beq.n	801121c <f_open+0x1d4>
 801120c:	7ebb      	ldrb	r3, [r7, #26]
 801120e:	f003 0301 	and.w	r3, r3, #1
 8011212:	2b00      	cmp	r3, #0
 8011214:	d002      	beq.n	801121c <f_open+0x1d4>
						res = FR_DENIED;
 8011216:	2307      	movs	r3, #7
 8011218:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801121c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011220:	2b00      	cmp	r3, #0
 8011222:	d128      	bne.n	8011276 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8011224:	79fb      	ldrb	r3, [r7, #7]
 8011226:	f003 0308 	and.w	r3, r3, #8
 801122a:	2b00      	cmp	r3, #0
 801122c:	d003      	beq.n	8011236 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801122e:	79fb      	ldrb	r3, [r7, #7]
 8011230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011234:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8011236:	693b      	ldr	r3, [r7, #16]
 8011238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801123e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011244:	79fb      	ldrb	r3, [r7, #7]
 8011246:	f023 0301 	bic.w	r3, r3, #1
 801124a:	2b00      	cmp	r3, #0
 801124c:	bf14      	ite	ne
 801124e:	2301      	movne	r3, #1
 8011250:	2300      	moveq	r3, #0
 8011252:	b2db      	uxtb	r3, r3
 8011254:	461a      	mov	r2, r3
 8011256:	f107 0314 	add.w	r3, r7, #20
 801125a:	4611      	mov	r1, r2
 801125c:	4618      	mov	r0, r3
 801125e:	f7fe fad7 	bl	800f810 <inc_lock>
 8011262:	4602      	mov	r2, r0
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	691b      	ldr	r3, [r3, #16]
 801126c:	2b00      	cmp	r3, #0
 801126e:	d102      	bne.n	8011276 <f_open+0x22e>
 8011270:	2302      	movs	r3, #2
 8011272:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8011276:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801127a:	2b00      	cmp	r3, #0
 801127c:	f040 8095 	bne.w	80113aa <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011280:	693b      	ldr	r3, [r7, #16]
 8011282:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011284:	4611      	mov	r1, r2
 8011286:	4618      	mov	r0, r3
 8011288:	f7ff f8f3 	bl	8010472 <ld_clust>
 801128c:	4602      	mov	r2, r0
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8011292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011294:	331c      	adds	r3, #28
 8011296:	4618      	mov	r0, r3
 8011298:	f7fe f954 	bl	800f544 <ld_dword>
 801129c:	4602      	mov	r2, r0
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	2200      	movs	r2, #0
 80112a6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80112a8:	693a      	ldr	r2, [r7, #16]
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80112ae:	693b      	ldr	r3, [r7, #16]
 80112b0:	88da      	ldrh	r2, [r3, #6]
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	79fa      	ldrb	r2, [r7, #7]
 80112ba:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	2200      	movs	r2, #0
 80112c0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	2200      	movs	r2, #0
 80112c6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	2200      	movs	r2, #0
 80112cc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	3330      	adds	r3, #48	; 0x30
 80112d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80112d6:	2100      	movs	r1, #0
 80112d8:	4618      	mov	r0, r3
 80112da:	f7fe f9be 	bl	800f65a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80112de:	79fb      	ldrb	r3, [r7, #7]
 80112e0:	f003 0320 	and.w	r3, r3, #32
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d060      	beq.n	80113aa <f_open+0x362>
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	68db      	ldr	r3, [r3, #12]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d05c      	beq.n	80113aa <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	68da      	ldr	r2, [r3, #12]
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80112f8:	693b      	ldr	r3, [r7, #16]
 80112fa:	895b      	ldrh	r3, [r3, #10]
 80112fc:	025b      	lsls	r3, r3, #9
 80112fe:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	689b      	ldr	r3, [r3, #8]
 8011304:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	68db      	ldr	r3, [r3, #12]
 801130a:	657b      	str	r3, [r7, #84]	; 0x54
 801130c:	e016      	b.n	801133c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011312:	4618      	mov	r0, r3
 8011314:	f7fe fc69 	bl	800fbea <get_fat>
 8011318:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801131a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801131c:	2b01      	cmp	r3, #1
 801131e:	d802      	bhi.n	8011326 <f_open+0x2de>
 8011320:	2302      	movs	r3, #2
 8011322:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011326:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011328:	f1b3 3fff 	cmp.w	r3, #4294967295
 801132c:	d102      	bne.n	8011334 <f_open+0x2ec>
 801132e:	2301      	movs	r3, #1
 8011330:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011334:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011338:	1ad3      	subs	r3, r2, r3
 801133a:	657b      	str	r3, [r7, #84]	; 0x54
 801133c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011340:	2b00      	cmp	r3, #0
 8011342:	d103      	bne.n	801134c <f_open+0x304>
 8011344:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011348:	429a      	cmp	r2, r3
 801134a:	d8e0      	bhi.n	801130e <f_open+0x2c6>
				}
				fp->clust = clst;
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011350:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8011352:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011356:	2b00      	cmp	r3, #0
 8011358:	d127      	bne.n	80113aa <f_open+0x362>
 801135a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801135c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011360:	2b00      	cmp	r3, #0
 8011362:	d022      	beq.n	80113aa <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8011364:	693b      	ldr	r3, [r7, #16]
 8011366:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011368:	4618      	mov	r0, r3
 801136a:	f7fe fc1f 	bl	800fbac <clust2sect>
 801136e:	6478      	str	r0, [r7, #68]	; 0x44
 8011370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011372:	2b00      	cmp	r3, #0
 8011374:	d103      	bne.n	801137e <f_open+0x336>
						res = FR_INT_ERR;
 8011376:	2302      	movs	r3, #2
 8011378:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801137c:	e015      	b.n	80113aa <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801137e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011380:	0a5a      	lsrs	r2, r3, #9
 8011382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011384:	441a      	add	r2, r3
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801138a:	693b      	ldr	r3, [r7, #16]
 801138c:	7858      	ldrb	r0, [r3, #1]
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	6a1a      	ldr	r2, [r3, #32]
 8011398:	2301      	movs	r3, #1
 801139a:	f7fe f85d 	bl	800f458 <disk_read>
 801139e:	4603      	mov	r3, r0
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d002      	beq.n	80113aa <f_open+0x362>
 80113a4:	2301      	movs	r3, #1
 80113a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80113aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d002      	beq.n	80113b8 <f_open+0x370>
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	2200      	movs	r2, #0
 80113b6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80113b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80113bc:	4618      	mov	r0, r3
 80113be:	3760      	adds	r7, #96	; 0x60
 80113c0:	46bd      	mov	sp, r7
 80113c2:	bd80      	pop	{r7, pc}

080113c4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80113c4:	b580      	push	{r7, lr}
 80113c6:	b08e      	sub	sp, #56	; 0x38
 80113c8:	af00      	add	r7, sp, #0
 80113ca:	60f8      	str	r0, [r7, #12]
 80113cc:	60b9      	str	r1, [r7, #8]
 80113ce:	607a      	str	r2, [r7, #4]
 80113d0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80113d2:	68bb      	ldr	r3, [r7, #8]
 80113d4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80113d6:	683b      	ldr	r3, [r7, #0]
 80113d8:	2200      	movs	r2, #0
 80113da:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	f107 0214 	add.w	r2, r7, #20
 80113e2:	4611      	mov	r1, r2
 80113e4:	4618      	mov	r0, r3
 80113e6:	f7ff fdb3 	bl	8010f50 <validate>
 80113ea:	4603      	mov	r3, r0
 80113ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80113f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d107      	bne.n	8011408 <f_read+0x44>
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	7d5b      	ldrb	r3, [r3, #21]
 80113fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011400:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011404:	2b00      	cmp	r3, #0
 8011406:	d002      	beq.n	801140e <f_read+0x4a>
 8011408:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801140c:	e115      	b.n	801163a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	7d1b      	ldrb	r3, [r3, #20]
 8011412:	f003 0301 	and.w	r3, r3, #1
 8011416:	2b00      	cmp	r3, #0
 8011418:	d101      	bne.n	801141e <f_read+0x5a>
 801141a:	2307      	movs	r3, #7
 801141c:	e10d      	b.n	801163a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	68da      	ldr	r2, [r3, #12]
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	699b      	ldr	r3, [r3, #24]
 8011426:	1ad3      	subs	r3, r2, r3
 8011428:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801142a:	687a      	ldr	r2, [r7, #4]
 801142c:	6a3b      	ldr	r3, [r7, #32]
 801142e:	429a      	cmp	r2, r3
 8011430:	f240 80fe 	bls.w	8011630 <f_read+0x26c>
 8011434:	6a3b      	ldr	r3, [r7, #32]
 8011436:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8011438:	e0fa      	b.n	8011630 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	699b      	ldr	r3, [r3, #24]
 801143e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011442:	2b00      	cmp	r3, #0
 8011444:	f040 80c6 	bne.w	80115d4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	699b      	ldr	r3, [r3, #24]
 801144c:	0a5b      	lsrs	r3, r3, #9
 801144e:	697a      	ldr	r2, [r7, #20]
 8011450:	8952      	ldrh	r2, [r2, #10]
 8011452:	3a01      	subs	r2, #1
 8011454:	4013      	ands	r3, r2
 8011456:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8011458:	69fb      	ldr	r3, [r7, #28]
 801145a:	2b00      	cmp	r3, #0
 801145c:	d12f      	bne.n	80114be <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	699b      	ldr	r3, [r3, #24]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d103      	bne.n	801146e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	689b      	ldr	r3, [r3, #8]
 801146a:	633b      	str	r3, [r7, #48]	; 0x30
 801146c:	e013      	b.n	8011496 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011472:	2b00      	cmp	r3, #0
 8011474:	d007      	beq.n	8011486 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	699b      	ldr	r3, [r3, #24]
 801147a:	4619      	mov	r1, r3
 801147c:	68f8      	ldr	r0, [r7, #12]
 801147e:	f7fe fe3d 	bl	80100fc <clmt_clust>
 8011482:	6338      	str	r0, [r7, #48]	; 0x30
 8011484:	e007      	b.n	8011496 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8011486:	68fa      	ldr	r2, [r7, #12]
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	69db      	ldr	r3, [r3, #28]
 801148c:	4619      	mov	r1, r3
 801148e:	4610      	mov	r0, r2
 8011490:	f7fe fbab 	bl	800fbea <get_fat>
 8011494:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8011496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011498:	2b01      	cmp	r3, #1
 801149a:	d804      	bhi.n	80114a6 <f_read+0xe2>
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	2202      	movs	r2, #2
 80114a0:	755a      	strb	r2, [r3, #21]
 80114a2:	2302      	movs	r3, #2
 80114a4:	e0c9      	b.n	801163a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80114a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114ac:	d104      	bne.n	80114b8 <f_read+0xf4>
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	2201      	movs	r2, #1
 80114b2:	755a      	strb	r2, [r3, #21]
 80114b4:	2301      	movs	r3, #1
 80114b6:	e0c0      	b.n	801163a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80114bc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80114be:	697a      	ldr	r2, [r7, #20]
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	69db      	ldr	r3, [r3, #28]
 80114c4:	4619      	mov	r1, r3
 80114c6:	4610      	mov	r0, r2
 80114c8:	f7fe fb70 	bl	800fbac <clust2sect>
 80114cc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80114ce:	69bb      	ldr	r3, [r7, #24]
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d104      	bne.n	80114de <f_read+0x11a>
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	2202      	movs	r2, #2
 80114d8:	755a      	strb	r2, [r3, #21]
 80114da:	2302      	movs	r3, #2
 80114dc:	e0ad      	b.n	801163a <f_read+0x276>
			sect += csect;
 80114de:	69ba      	ldr	r2, [r7, #24]
 80114e0:	69fb      	ldr	r3, [r7, #28]
 80114e2:	4413      	add	r3, r2
 80114e4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	0a5b      	lsrs	r3, r3, #9
 80114ea:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80114ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d039      	beq.n	8011566 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80114f2:	69fa      	ldr	r2, [r7, #28]
 80114f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114f6:	4413      	add	r3, r2
 80114f8:	697a      	ldr	r2, [r7, #20]
 80114fa:	8952      	ldrh	r2, [r2, #10]
 80114fc:	4293      	cmp	r3, r2
 80114fe:	d905      	bls.n	801150c <f_read+0x148>
					cc = fs->csize - csect;
 8011500:	697b      	ldr	r3, [r7, #20]
 8011502:	895b      	ldrh	r3, [r3, #10]
 8011504:	461a      	mov	r2, r3
 8011506:	69fb      	ldr	r3, [r7, #28]
 8011508:	1ad3      	subs	r3, r2, r3
 801150a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801150c:	697b      	ldr	r3, [r7, #20]
 801150e:	7858      	ldrb	r0, [r3, #1]
 8011510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011512:	69ba      	ldr	r2, [r7, #24]
 8011514:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011516:	f7fd ff9f 	bl	800f458 <disk_read>
 801151a:	4603      	mov	r3, r0
 801151c:	2b00      	cmp	r3, #0
 801151e:	d004      	beq.n	801152a <f_read+0x166>
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	2201      	movs	r2, #1
 8011524:	755a      	strb	r2, [r3, #21]
 8011526:	2301      	movs	r3, #1
 8011528:	e087      	b.n	801163a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	7d1b      	ldrb	r3, [r3, #20]
 801152e:	b25b      	sxtb	r3, r3
 8011530:	2b00      	cmp	r3, #0
 8011532:	da14      	bge.n	801155e <f_read+0x19a>
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	6a1a      	ldr	r2, [r3, #32]
 8011538:	69bb      	ldr	r3, [r7, #24]
 801153a:	1ad3      	subs	r3, r2, r3
 801153c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801153e:	429a      	cmp	r2, r3
 8011540:	d90d      	bls.n	801155e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	6a1a      	ldr	r2, [r3, #32]
 8011546:	69bb      	ldr	r3, [r7, #24]
 8011548:	1ad3      	subs	r3, r2, r3
 801154a:	025b      	lsls	r3, r3, #9
 801154c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801154e:	18d0      	adds	r0, r2, r3
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	3330      	adds	r3, #48	; 0x30
 8011554:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011558:	4619      	mov	r1, r3
 801155a:	f7fe f85d 	bl	800f618 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801155e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011560:	025b      	lsls	r3, r3, #9
 8011562:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8011564:	e050      	b.n	8011608 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	6a1b      	ldr	r3, [r3, #32]
 801156a:	69ba      	ldr	r2, [r7, #24]
 801156c:	429a      	cmp	r2, r3
 801156e:	d02e      	beq.n	80115ce <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	7d1b      	ldrb	r3, [r3, #20]
 8011574:	b25b      	sxtb	r3, r3
 8011576:	2b00      	cmp	r3, #0
 8011578:	da18      	bge.n	80115ac <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801157a:	697b      	ldr	r3, [r7, #20]
 801157c:	7858      	ldrb	r0, [r3, #1]
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	6a1a      	ldr	r2, [r3, #32]
 8011588:	2301      	movs	r3, #1
 801158a:	f7fd ff85 	bl	800f498 <disk_write>
 801158e:	4603      	mov	r3, r0
 8011590:	2b00      	cmp	r3, #0
 8011592:	d004      	beq.n	801159e <f_read+0x1da>
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	2201      	movs	r2, #1
 8011598:	755a      	strb	r2, [r3, #21]
 801159a:	2301      	movs	r3, #1
 801159c:	e04d      	b.n	801163a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	7d1b      	ldrb	r3, [r3, #20]
 80115a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80115a6:	b2da      	uxtb	r2, r3
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80115ac:	697b      	ldr	r3, [r7, #20]
 80115ae:	7858      	ldrb	r0, [r3, #1]
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80115b6:	2301      	movs	r3, #1
 80115b8:	69ba      	ldr	r2, [r7, #24]
 80115ba:	f7fd ff4d 	bl	800f458 <disk_read>
 80115be:	4603      	mov	r3, r0
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d004      	beq.n	80115ce <f_read+0x20a>
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	2201      	movs	r2, #1
 80115c8:	755a      	strb	r2, [r3, #21]
 80115ca:	2301      	movs	r3, #1
 80115cc:	e035      	b.n	801163a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	69ba      	ldr	r2, [r7, #24]
 80115d2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	699b      	ldr	r3, [r3, #24]
 80115d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80115dc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80115e0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80115e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	429a      	cmp	r2, r3
 80115e8:	d901      	bls.n	80115ee <f_read+0x22a>
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	699b      	ldr	r3, [r3, #24]
 80115f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80115fc:	4413      	add	r3, r2
 80115fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011600:	4619      	mov	r1, r3
 8011602:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011604:	f7fe f808 	bl	800f618 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8011608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801160a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801160c:	4413      	add	r3, r2
 801160e:	627b      	str	r3, [r7, #36]	; 0x24
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	699a      	ldr	r2, [r3, #24]
 8011614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011616:	441a      	add	r2, r3
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	619a      	str	r2, [r3, #24]
 801161c:	683b      	ldr	r3, [r7, #0]
 801161e:	681a      	ldr	r2, [r3, #0]
 8011620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011622:	441a      	add	r2, r3
 8011624:	683b      	ldr	r3, [r7, #0]
 8011626:	601a      	str	r2, [r3, #0]
 8011628:	687a      	ldr	r2, [r7, #4]
 801162a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801162c:	1ad3      	subs	r3, r2, r3
 801162e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	2b00      	cmp	r3, #0
 8011634:	f47f af01 	bne.w	801143a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8011638:	2300      	movs	r3, #0
}
 801163a:	4618      	mov	r0, r3
 801163c:	3738      	adds	r7, #56	; 0x38
 801163e:	46bd      	mov	sp, r7
 8011640:	bd80      	pop	{r7, pc}

08011642 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011642:	b580      	push	{r7, lr}
 8011644:	b086      	sub	sp, #24
 8011646:	af00      	add	r7, sp, #0
 8011648:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	f107 0208 	add.w	r2, r7, #8
 8011650:	4611      	mov	r1, r2
 8011652:	4618      	mov	r0, r3
 8011654:	f7ff fc7c 	bl	8010f50 <validate>
 8011658:	4603      	mov	r3, r0
 801165a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801165c:	7dfb      	ldrb	r3, [r7, #23]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d168      	bne.n	8011734 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	7d1b      	ldrb	r3, [r3, #20]
 8011666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801166a:	2b00      	cmp	r3, #0
 801166c:	d062      	beq.n	8011734 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	7d1b      	ldrb	r3, [r3, #20]
 8011672:	b25b      	sxtb	r3, r3
 8011674:	2b00      	cmp	r3, #0
 8011676:	da15      	bge.n	80116a4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011678:	68bb      	ldr	r3, [r7, #8]
 801167a:	7858      	ldrb	r0, [r3, #1]
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	6a1a      	ldr	r2, [r3, #32]
 8011686:	2301      	movs	r3, #1
 8011688:	f7fd ff06 	bl	800f498 <disk_write>
 801168c:	4603      	mov	r3, r0
 801168e:	2b00      	cmp	r3, #0
 8011690:	d001      	beq.n	8011696 <f_sync+0x54>
 8011692:	2301      	movs	r3, #1
 8011694:	e04f      	b.n	8011736 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	7d1b      	ldrb	r3, [r3, #20]
 801169a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801169e:	b2da      	uxtb	r2, r3
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80116a4:	f7fa fe82 	bl	800c3ac <get_fattime>
 80116a8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80116aa:	68ba      	ldr	r2, [r7, #8]
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116b0:	4619      	mov	r1, r3
 80116b2:	4610      	mov	r0, r2
 80116b4:	f7fe f9de 	bl	800fa74 <move_window>
 80116b8:	4603      	mov	r3, r0
 80116ba:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80116bc:	7dfb      	ldrb	r3, [r7, #23]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d138      	bne.n	8011734 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80116c6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	330b      	adds	r3, #11
 80116cc:	781a      	ldrb	r2, [r3, #0]
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	330b      	adds	r3, #11
 80116d2:	f042 0220 	orr.w	r2, r2, #32
 80116d6:	b2d2      	uxtb	r2, r2
 80116d8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	6818      	ldr	r0, [r3, #0]
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	689b      	ldr	r3, [r3, #8]
 80116e2:	461a      	mov	r2, r3
 80116e4:	68f9      	ldr	r1, [r7, #12]
 80116e6:	f7fe fee3 	bl	80104b0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	f103 021c 	add.w	r2, r3, #28
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	68db      	ldr	r3, [r3, #12]
 80116f4:	4619      	mov	r1, r3
 80116f6:	4610      	mov	r0, r2
 80116f8:	f7fd ff62 	bl	800f5c0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	3316      	adds	r3, #22
 8011700:	6939      	ldr	r1, [r7, #16]
 8011702:	4618      	mov	r0, r3
 8011704:	f7fd ff5c 	bl	800f5c0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	3312      	adds	r3, #18
 801170c:	2100      	movs	r1, #0
 801170e:	4618      	mov	r0, r3
 8011710:	f7fd ff3b 	bl	800f58a <st_word>
					fs->wflag = 1;
 8011714:	68bb      	ldr	r3, [r7, #8]
 8011716:	2201      	movs	r2, #1
 8011718:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801171a:	68bb      	ldr	r3, [r7, #8]
 801171c:	4618      	mov	r0, r3
 801171e:	f7fe f9d7 	bl	800fad0 <sync_fs>
 8011722:	4603      	mov	r3, r0
 8011724:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	7d1b      	ldrb	r3, [r3, #20]
 801172a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801172e:	b2da      	uxtb	r2, r3
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011734:	7dfb      	ldrb	r3, [r7, #23]
}
 8011736:	4618      	mov	r0, r3
 8011738:	3718      	adds	r7, #24
 801173a:	46bd      	mov	sp, r7
 801173c:	bd80      	pop	{r7, pc}

0801173e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801173e:	b580      	push	{r7, lr}
 8011740:	b084      	sub	sp, #16
 8011742:	af00      	add	r7, sp, #0
 8011744:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011746:	6878      	ldr	r0, [r7, #4]
 8011748:	f7ff ff7b 	bl	8011642 <f_sync>
 801174c:	4603      	mov	r3, r0
 801174e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011750:	7bfb      	ldrb	r3, [r7, #15]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d118      	bne.n	8011788 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	f107 0208 	add.w	r2, r7, #8
 801175c:	4611      	mov	r1, r2
 801175e:	4618      	mov	r0, r3
 8011760:	f7ff fbf6 	bl	8010f50 <validate>
 8011764:	4603      	mov	r3, r0
 8011766:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011768:	7bfb      	ldrb	r3, [r7, #15]
 801176a:	2b00      	cmp	r3, #0
 801176c:	d10c      	bne.n	8011788 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	691b      	ldr	r3, [r3, #16]
 8011772:	4618      	mov	r0, r3
 8011774:	f7fe f8da 	bl	800f92c <dec_lock>
 8011778:	4603      	mov	r3, r0
 801177a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801177c:	7bfb      	ldrb	r3, [r7, #15]
 801177e:	2b00      	cmp	r3, #0
 8011780:	d102      	bne.n	8011788 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	2200      	movs	r2, #0
 8011786:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8011788:	7bfb      	ldrb	r3, [r7, #15]
}
 801178a:	4618      	mov	r0, r3
 801178c:	3710      	adds	r7, #16
 801178e:	46bd      	mov	sp, r7
 8011790:	bd80      	pop	{r7, pc}

08011792 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8011792:	b580      	push	{r7, lr}
 8011794:	b090      	sub	sp, #64	; 0x40
 8011796:	af00      	add	r7, sp, #0
 8011798:	6078      	str	r0, [r7, #4]
 801179a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	f107 0208 	add.w	r2, r7, #8
 80117a2:	4611      	mov	r1, r2
 80117a4:	4618      	mov	r0, r3
 80117a6:	f7ff fbd3 	bl	8010f50 <validate>
 80117aa:	4603      	mov	r3, r0
 80117ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80117b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d103      	bne.n	80117c0 <f_lseek+0x2e>
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	7d5b      	ldrb	r3, [r3, #21]
 80117bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80117c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d002      	beq.n	80117ce <f_lseek+0x3c>
 80117c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80117cc:	e1e6      	b.n	8011b9c <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	f000 80d1 	beq.w	801197a <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80117d8:	683b      	ldr	r3, [r7, #0]
 80117da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117de:	d15a      	bne.n	8011896 <f_lseek+0x104>
			tbl = fp->cltbl;
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117e4:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80117e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117e8:	1d1a      	adds	r2, r3, #4
 80117ea:	627a      	str	r2, [r7, #36]	; 0x24
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	617b      	str	r3, [r7, #20]
 80117f0:	2302      	movs	r3, #2
 80117f2:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	689b      	ldr	r3, [r3, #8]
 80117f8:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80117fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d03a      	beq.n	8011876 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8011800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011802:	613b      	str	r3, [r7, #16]
 8011804:	2300      	movs	r3, #0
 8011806:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801180a:	3302      	adds	r3, #2
 801180c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 801180e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011810:	60fb      	str	r3, [r7, #12]
 8011812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011814:	3301      	adds	r3, #1
 8011816:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801181c:	4618      	mov	r0, r3
 801181e:	f7fe f9e4 	bl	800fbea <get_fat>
 8011822:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8011824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011826:	2b01      	cmp	r3, #1
 8011828:	d804      	bhi.n	8011834 <f_lseek+0xa2>
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	2202      	movs	r2, #2
 801182e:	755a      	strb	r2, [r3, #21]
 8011830:	2302      	movs	r3, #2
 8011832:	e1b3      	b.n	8011b9c <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011836:	f1b3 3fff 	cmp.w	r3, #4294967295
 801183a:	d104      	bne.n	8011846 <f_lseek+0xb4>
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	2201      	movs	r2, #1
 8011840:	755a      	strb	r2, [r3, #21]
 8011842:	2301      	movs	r3, #1
 8011844:	e1aa      	b.n	8011b9c <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	3301      	adds	r3, #1
 801184a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801184c:	429a      	cmp	r2, r3
 801184e:	d0de      	beq.n	801180e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8011850:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011852:	697b      	ldr	r3, [r7, #20]
 8011854:	429a      	cmp	r2, r3
 8011856:	d809      	bhi.n	801186c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8011858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801185a:	1d1a      	adds	r2, r3, #4
 801185c:	627a      	str	r2, [r7, #36]	; 0x24
 801185e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011860:	601a      	str	r2, [r3, #0]
 8011862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011864:	1d1a      	adds	r2, r3, #4
 8011866:	627a      	str	r2, [r7, #36]	; 0x24
 8011868:	693a      	ldr	r2, [r7, #16]
 801186a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801186c:	68bb      	ldr	r3, [r7, #8]
 801186e:	695b      	ldr	r3, [r3, #20]
 8011870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011872:	429a      	cmp	r2, r3
 8011874:	d3c4      	bcc.n	8011800 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801187a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801187c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 801187e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011880:	697b      	ldr	r3, [r7, #20]
 8011882:	429a      	cmp	r2, r3
 8011884:	d803      	bhi.n	801188e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8011886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011888:	2200      	movs	r2, #0
 801188a:	601a      	str	r2, [r3, #0]
 801188c:	e184      	b.n	8011b98 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801188e:	2311      	movs	r3, #17
 8011890:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8011894:	e180      	b.n	8011b98 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	68db      	ldr	r3, [r3, #12]
 801189a:	683a      	ldr	r2, [r7, #0]
 801189c:	429a      	cmp	r2, r3
 801189e:	d902      	bls.n	80118a6 <f_lseek+0x114>
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	68db      	ldr	r3, [r3, #12]
 80118a4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	683a      	ldr	r2, [r7, #0]
 80118aa:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80118ac:	683b      	ldr	r3, [r7, #0]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	f000 8172 	beq.w	8011b98 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 80118b4:	683b      	ldr	r3, [r7, #0]
 80118b6:	3b01      	subs	r3, #1
 80118b8:	4619      	mov	r1, r3
 80118ba:	6878      	ldr	r0, [r7, #4]
 80118bc:	f7fe fc1e 	bl	80100fc <clmt_clust>
 80118c0:	4602      	mov	r2, r0
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80118c6:	68ba      	ldr	r2, [r7, #8]
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	69db      	ldr	r3, [r3, #28]
 80118cc:	4619      	mov	r1, r3
 80118ce:	4610      	mov	r0, r2
 80118d0:	f7fe f96c 	bl	800fbac <clust2sect>
 80118d4:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80118d6:	69bb      	ldr	r3, [r7, #24]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d104      	bne.n	80118e6 <f_lseek+0x154>
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	2202      	movs	r2, #2
 80118e0:	755a      	strb	r2, [r3, #21]
 80118e2:	2302      	movs	r3, #2
 80118e4:	e15a      	b.n	8011b9c <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80118e6:	683b      	ldr	r3, [r7, #0]
 80118e8:	3b01      	subs	r3, #1
 80118ea:	0a5b      	lsrs	r3, r3, #9
 80118ec:	68ba      	ldr	r2, [r7, #8]
 80118ee:	8952      	ldrh	r2, [r2, #10]
 80118f0:	3a01      	subs	r2, #1
 80118f2:	4013      	ands	r3, r2
 80118f4:	69ba      	ldr	r2, [r7, #24]
 80118f6:	4413      	add	r3, r2
 80118f8:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	699b      	ldr	r3, [r3, #24]
 80118fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011902:	2b00      	cmp	r3, #0
 8011904:	f000 8148 	beq.w	8011b98 <f_lseek+0x406>
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	6a1b      	ldr	r3, [r3, #32]
 801190c:	69ba      	ldr	r2, [r7, #24]
 801190e:	429a      	cmp	r2, r3
 8011910:	f000 8142 	beq.w	8011b98 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	7d1b      	ldrb	r3, [r3, #20]
 8011918:	b25b      	sxtb	r3, r3
 801191a:	2b00      	cmp	r3, #0
 801191c:	da18      	bge.n	8011950 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801191e:	68bb      	ldr	r3, [r7, #8]
 8011920:	7858      	ldrb	r0, [r3, #1]
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	6a1a      	ldr	r2, [r3, #32]
 801192c:	2301      	movs	r3, #1
 801192e:	f7fd fdb3 	bl	800f498 <disk_write>
 8011932:	4603      	mov	r3, r0
 8011934:	2b00      	cmp	r3, #0
 8011936:	d004      	beq.n	8011942 <f_lseek+0x1b0>
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	2201      	movs	r2, #1
 801193c:	755a      	strb	r2, [r3, #21]
 801193e:	2301      	movs	r3, #1
 8011940:	e12c      	b.n	8011b9c <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	7d1b      	ldrb	r3, [r3, #20]
 8011946:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801194a:	b2da      	uxtb	r2, r3
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8011950:	68bb      	ldr	r3, [r7, #8]
 8011952:	7858      	ldrb	r0, [r3, #1]
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801195a:	2301      	movs	r3, #1
 801195c:	69ba      	ldr	r2, [r7, #24]
 801195e:	f7fd fd7b 	bl	800f458 <disk_read>
 8011962:	4603      	mov	r3, r0
 8011964:	2b00      	cmp	r3, #0
 8011966:	d004      	beq.n	8011972 <f_lseek+0x1e0>
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	2201      	movs	r2, #1
 801196c:	755a      	strb	r2, [r3, #21]
 801196e:	2301      	movs	r3, #1
 8011970:	e114      	b.n	8011b9c <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	69ba      	ldr	r2, [r7, #24]
 8011976:	621a      	str	r2, [r3, #32]
 8011978:	e10e      	b.n	8011b98 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	68db      	ldr	r3, [r3, #12]
 801197e:	683a      	ldr	r2, [r7, #0]
 8011980:	429a      	cmp	r2, r3
 8011982:	d908      	bls.n	8011996 <f_lseek+0x204>
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	7d1b      	ldrb	r3, [r3, #20]
 8011988:	f003 0302 	and.w	r3, r3, #2
 801198c:	2b00      	cmp	r3, #0
 801198e:	d102      	bne.n	8011996 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	68db      	ldr	r3, [r3, #12]
 8011994:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	699b      	ldr	r3, [r3, #24]
 801199a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801199c:	2300      	movs	r3, #0
 801199e:	637b      	str	r3, [r7, #52]	; 0x34
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80119a4:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80119a6:	683b      	ldr	r3, [r7, #0]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	f000 80a7 	beq.w	8011afc <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80119ae:	68bb      	ldr	r3, [r7, #8]
 80119b0:	895b      	ldrh	r3, [r3, #10]
 80119b2:	025b      	lsls	r3, r3, #9
 80119b4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80119b6:	6a3b      	ldr	r3, [r7, #32]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d01b      	beq.n	80119f4 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80119bc:	683b      	ldr	r3, [r7, #0]
 80119be:	1e5a      	subs	r2, r3, #1
 80119c0:	69fb      	ldr	r3, [r7, #28]
 80119c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80119c6:	6a3b      	ldr	r3, [r7, #32]
 80119c8:	1e59      	subs	r1, r3, #1
 80119ca:	69fb      	ldr	r3, [r7, #28]
 80119cc:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80119d0:	429a      	cmp	r2, r3
 80119d2:	d30f      	bcc.n	80119f4 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80119d4:	6a3b      	ldr	r3, [r7, #32]
 80119d6:	1e5a      	subs	r2, r3, #1
 80119d8:	69fb      	ldr	r3, [r7, #28]
 80119da:	425b      	negs	r3, r3
 80119dc:	401a      	ands	r2, r3
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	699b      	ldr	r3, [r3, #24]
 80119e6:	683a      	ldr	r2, [r7, #0]
 80119e8:	1ad3      	subs	r3, r2, r3
 80119ea:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	69db      	ldr	r3, [r3, #28]
 80119f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80119f2:	e022      	b.n	8011a3a <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	689b      	ldr	r3, [r3, #8]
 80119f8:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80119fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d119      	bne.n	8011a34 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	2100      	movs	r1, #0
 8011a04:	4618      	mov	r0, r3
 8011a06:	f7fe fae1 	bl	800ffcc <create_chain>
 8011a0a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a0e:	2b01      	cmp	r3, #1
 8011a10:	d104      	bne.n	8011a1c <f_lseek+0x28a>
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	2202      	movs	r2, #2
 8011a16:	755a      	strb	r2, [r3, #21]
 8011a18:	2302      	movs	r3, #2
 8011a1a:	e0bf      	b.n	8011b9c <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a22:	d104      	bne.n	8011a2e <f_lseek+0x29c>
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	2201      	movs	r2, #1
 8011a28:	755a      	strb	r2, [r3, #21]
 8011a2a:	2301      	movs	r3, #1
 8011a2c:	e0b6      	b.n	8011b9c <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a32:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a38:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8011a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d05d      	beq.n	8011afc <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8011a40:	e03a      	b.n	8011ab8 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8011a42:	683a      	ldr	r2, [r7, #0]
 8011a44:	69fb      	ldr	r3, [r7, #28]
 8011a46:	1ad3      	subs	r3, r2, r3
 8011a48:	603b      	str	r3, [r7, #0]
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	699a      	ldr	r2, [r3, #24]
 8011a4e:	69fb      	ldr	r3, [r7, #28]
 8011a50:	441a      	add	r2, r3
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	7d1b      	ldrb	r3, [r3, #20]
 8011a5a:	f003 0302 	and.w	r3, r3, #2
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d00b      	beq.n	8011a7a <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011a66:	4618      	mov	r0, r3
 8011a68:	f7fe fab0 	bl	800ffcc <create_chain>
 8011a6c:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8011a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d108      	bne.n	8011a86 <f_lseek+0x2f4>
							ofs = 0; break;
 8011a74:	2300      	movs	r3, #0
 8011a76:	603b      	str	r3, [r7, #0]
 8011a78:	e022      	b.n	8011ac0 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011a7e:	4618      	mov	r0, r3
 8011a80:	f7fe f8b3 	bl	800fbea <get_fat>
 8011a84:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a8c:	d104      	bne.n	8011a98 <f_lseek+0x306>
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	2201      	movs	r2, #1
 8011a92:	755a      	strb	r2, [r3, #21]
 8011a94:	2301      	movs	r3, #1
 8011a96:	e081      	b.n	8011b9c <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8011a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a9a:	2b01      	cmp	r3, #1
 8011a9c:	d904      	bls.n	8011aa8 <f_lseek+0x316>
 8011a9e:	68bb      	ldr	r3, [r7, #8]
 8011aa0:	695b      	ldr	r3, [r3, #20]
 8011aa2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011aa4:	429a      	cmp	r2, r3
 8011aa6:	d304      	bcc.n	8011ab2 <f_lseek+0x320>
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	2202      	movs	r2, #2
 8011aac:	755a      	strb	r2, [r3, #21]
 8011aae:	2302      	movs	r3, #2
 8011ab0:	e074      	b.n	8011b9c <f_lseek+0x40a>
					fp->clust = clst;
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011ab6:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8011ab8:	683a      	ldr	r2, [r7, #0]
 8011aba:	69fb      	ldr	r3, [r7, #28]
 8011abc:	429a      	cmp	r2, r3
 8011abe:	d8c0      	bhi.n	8011a42 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	699a      	ldr	r2, [r3, #24]
 8011ac4:	683b      	ldr	r3, [r7, #0]
 8011ac6:	441a      	add	r2, r3
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8011acc:	683b      	ldr	r3, [r7, #0]
 8011ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d012      	beq.n	8011afc <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8011ad6:	68bb      	ldr	r3, [r7, #8]
 8011ad8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011ada:	4618      	mov	r0, r3
 8011adc:	f7fe f866 	bl	800fbac <clust2sect>
 8011ae0:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8011ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d104      	bne.n	8011af2 <f_lseek+0x360>
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	2202      	movs	r2, #2
 8011aec:	755a      	strb	r2, [r3, #21]
 8011aee:	2302      	movs	r3, #2
 8011af0:	e054      	b.n	8011b9c <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8011af2:	683b      	ldr	r3, [r7, #0]
 8011af4:	0a5b      	lsrs	r3, r3, #9
 8011af6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011af8:	4413      	add	r3, r2
 8011afa:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	699a      	ldr	r2, [r3, #24]
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	68db      	ldr	r3, [r3, #12]
 8011b04:	429a      	cmp	r2, r3
 8011b06:	d90a      	bls.n	8011b1e <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	699a      	ldr	r2, [r3, #24]
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	7d1b      	ldrb	r3, [r3, #20]
 8011b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b18:	b2da      	uxtb	r2, r3
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	699b      	ldr	r3, [r3, #24]
 8011b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d036      	beq.n	8011b98 <f_lseek+0x406>
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	6a1b      	ldr	r3, [r3, #32]
 8011b2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011b30:	429a      	cmp	r2, r3
 8011b32:	d031      	beq.n	8011b98 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	7d1b      	ldrb	r3, [r3, #20]
 8011b38:	b25b      	sxtb	r3, r3
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	da18      	bge.n	8011b70 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011b3e:	68bb      	ldr	r3, [r7, #8]
 8011b40:	7858      	ldrb	r0, [r3, #1]
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	6a1a      	ldr	r2, [r3, #32]
 8011b4c:	2301      	movs	r3, #1
 8011b4e:	f7fd fca3 	bl	800f498 <disk_write>
 8011b52:	4603      	mov	r3, r0
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d004      	beq.n	8011b62 <f_lseek+0x3d0>
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	2201      	movs	r2, #1
 8011b5c:	755a      	strb	r2, [r3, #21]
 8011b5e:	2301      	movs	r3, #1
 8011b60:	e01c      	b.n	8011b9c <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	7d1b      	ldrb	r3, [r3, #20]
 8011b66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011b6a:	b2da      	uxtb	r2, r3
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011b70:	68bb      	ldr	r3, [r7, #8]
 8011b72:	7858      	ldrb	r0, [r3, #1]
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011b7a:	2301      	movs	r3, #1
 8011b7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011b7e:	f7fd fc6b 	bl	800f458 <disk_read>
 8011b82:	4603      	mov	r3, r0
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d004      	beq.n	8011b92 <f_lseek+0x400>
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	2201      	movs	r2, #1
 8011b8c:	755a      	strb	r2, [r3, #21]
 8011b8e:	2301      	movs	r3, #1
 8011b90:	e004      	b.n	8011b9c <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011b96:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8011b98:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	3740      	adds	r7, #64	; 0x40
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	bd80      	pop	{r7, pc}

08011ba4 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8011ba4:	b580      	push	{r7, lr}
 8011ba6:	b086      	sub	sp, #24
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	6078      	str	r0, [r7, #4]
 8011bac:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d101      	bne.n	8011bb8 <f_opendir+0x14>
 8011bb4:	2309      	movs	r3, #9
 8011bb6:	e064      	b.n	8011c82 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8011bbc:	f107 010c 	add.w	r1, r7, #12
 8011bc0:	463b      	mov	r3, r7
 8011bc2:	2200      	movs	r2, #0
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	f7fe ff77 	bl	8010ab8 <find_volume>
 8011bca:	4603      	mov	r3, r0
 8011bcc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011bce:	7dfb      	ldrb	r3, [r7, #23]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d14f      	bne.n	8011c74 <f_opendir+0xd0>
		obj->fs = fs;
 8011bd4:	68fa      	ldr	r2, [r7, #12]
 8011bd6:	693b      	ldr	r3, [r7, #16]
 8011bd8:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8011bda:	683b      	ldr	r3, [r7, #0]
 8011bdc:	4619      	mov	r1, r3
 8011bde:	6878      	ldr	r0, [r7, #4]
 8011be0:	f7fe fe5e 	bl	80108a0 <follow_path>
 8011be4:	4603      	mov	r3, r0
 8011be6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8011be8:	7dfb      	ldrb	r3, [r7, #23]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d13d      	bne.n	8011c6a <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011bf4:	b25b      	sxtb	r3, r3
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	db12      	blt.n	8011c20 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8011bfa:	693b      	ldr	r3, [r7, #16]
 8011bfc:	799b      	ldrb	r3, [r3, #6]
 8011bfe:	f003 0310 	and.w	r3, r3, #16
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d00a      	beq.n	8011c1c <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8011c06:	68fa      	ldr	r2, [r7, #12]
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	6a1b      	ldr	r3, [r3, #32]
 8011c0c:	4619      	mov	r1, r3
 8011c0e:	4610      	mov	r0, r2
 8011c10:	f7fe fc2f 	bl	8010472 <ld_clust>
 8011c14:	4602      	mov	r2, r0
 8011c16:	693b      	ldr	r3, [r7, #16]
 8011c18:	609a      	str	r2, [r3, #8]
 8011c1a:	e001      	b.n	8011c20 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8011c1c:	2305      	movs	r3, #5
 8011c1e:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8011c20:	7dfb      	ldrb	r3, [r7, #23]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d121      	bne.n	8011c6a <f_opendir+0xc6>
				obj->id = fs->id;
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	88da      	ldrh	r2, [r3, #6]
 8011c2a:	693b      	ldr	r3, [r7, #16]
 8011c2c:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8011c2e:	2100      	movs	r1, #0
 8011c30:	6878      	ldr	r0, [r7, #4]
 8011c32:	f7fe fa97 	bl	8010164 <dir_sdi>
 8011c36:	4603      	mov	r3, r0
 8011c38:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8011c3a:	7dfb      	ldrb	r3, [r7, #23]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d114      	bne.n	8011c6a <f_opendir+0xc6>
					if (obj->sclust) {
 8011c40:	693b      	ldr	r3, [r7, #16]
 8011c42:	689b      	ldr	r3, [r3, #8]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d00d      	beq.n	8011c64 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8011c48:	2100      	movs	r1, #0
 8011c4a:	6878      	ldr	r0, [r7, #4]
 8011c4c:	f7fd fde0 	bl	800f810 <inc_lock>
 8011c50:	4602      	mov	r2, r0
 8011c52:	693b      	ldr	r3, [r7, #16]
 8011c54:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8011c56:	693b      	ldr	r3, [r7, #16]
 8011c58:	691b      	ldr	r3, [r3, #16]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d105      	bne.n	8011c6a <f_opendir+0xc6>
 8011c5e:	2312      	movs	r3, #18
 8011c60:	75fb      	strb	r3, [r7, #23]
 8011c62:	e002      	b.n	8011c6a <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8011c64:	693b      	ldr	r3, [r7, #16]
 8011c66:	2200      	movs	r2, #0
 8011c68:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8011c6a:	7dfb      	ldrb	r3, [r7, #23]
 8011c6c:	2b04      	cmp	r3, #4
 8011c6e:	d101      	bne.n	8011c74 <f_opendir+0xd0>
 8011c70:	2305      	movs	r3, #5
 8011c72:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8011c74:	7dfb      	ldrb	r3, [r7, #23]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d002      	beq.n	8011c80 <f_opendir+0xdc>
 8011c7a:	693b      	ldr	r3, [r7, #16]
 8011c7c:	2200      	movs	r2, #0
 8011c7e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011c80:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c82:	4618      	mov	r0, r3
 8011c84:	3718      	adds	r7, #24
 8011c86:	46bd      	mov	sp, r7
 8011c88:	bd80      	pop	{r7, pc}

08011c8a <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8011c8a:	b580      	push	{r7, lr}
 8011c8c:	b084      	sub	sp, #16
 8011c8e:	af00      	add	r7, sp, #0
 8011c90:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	f107 0208 	add.w	r2, r7, #8
 8011c98:	4611      	mov	r1, r2
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	f7ff f958 	bl	8010f50 <validate>
 8011ca0:	4603      	mov	r3, r0
 8011ca2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011ca4:	7bfb      	ldrb	r3, [r7, #15]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d110      	bne.n	8011ccc <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	691b      	ldr	r3, [r3, #16]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d006      	beq.n	8011cc0 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	691b      	ldr	r3, [r3, #16]
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	f7fd fe38 	bl	800f92c <dec_lock>
 8011cbc:	4603      	mov	r3, r0
 8011cbe:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8011cc0:	7bfb      	ldrb	r3, [r7, #15]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d102      	bne.n	8011ccc <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	2200      	movs	r2, #0
 8011cca:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8011ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cce:	4618      	mov	r0, r3
 8011cd0:	3710      	adds	r7, #16
 8011cd2:	46bd      	mov	sp, r7
 8011cd4:	bd80      	pop	{r7, pc}

08011cd6 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8011cd6:	b580      	push	{r7, lr}
 8011cd8:	b084      	sub	sp, #16
 8011cda:	af00      	add	r7, sp, #0
 8011cdc:	6078      	str	r0, [r7, #4]
 8011cde:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	f107 0208 	add.w	r2, r7, #8
 8011ce6:	4611      	mov	r1, r2
 8011ce8:	4618      	mov	r0, r3
 8011cea:	f7ff f931 	bl	8010f50 <validate>
 8011cee:	4603      	mov	r3, r0
 8011cf0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011cf2:	7bfb      	ldrb	r3, [r7, #15]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d126      	bne.n	8011d46 <f_readdir+0x70>
		if (!fno) {
 8011cf8:	683b      	ldr	r3, [r7, #0]
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d106      	bne.n	8011d0c <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8011cfe:	2100      	movs	r1, #0
 8011d00:	6878      	ldr	r0, [r7, #4]
 8011d02:	f7fe fa2f 	bl	8010164 <dir_sdi>
 8011d06:	4603      	mov	r3, r0
 8011d08:	73fb      	strb	r3, [r7, #15]
 8011d0a:	e01c      	b.n	8011d46 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8011d0c:	2100      	movs	r1, #0
 8011d0e:	6878      	ldr	r0, [r7, #4]
 8011d10:	f7fe fbee 	bl	80104f0 <dir_read>
 8011d14:	4603      	mov	r3, r0
 8011d16:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8011d18:	7bfb      	ldrb	r3, [r7, #15]
 8011d1a:	2b04      	cmp	r3, #4
 8011d1c:	d101      	bne.n	8011d22 <f_readdir+0x4c>
 8011d1e:	2300      	movs	r3, #0
 8011d20:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8011d22:	7bfb      	ldrb	r3, [r7, #15]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d10e      	bne.n	8011d46 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8011d28:	6839      	ldr	r1, [r7, #0]
 8011d2a:	6878      	ldr	r0, [r7, #4]
 8011d2c:	f7fe fcc4 	bl	80106b8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8011d30:	2100      	movs	r1, #0
 8011d32:	6878      	ldr	r0, [r7, #4]
 8011d34:	f7fe fa91 	bl	801025a <dir_next>
 8011d38:	4603      	mov	r3, r0
 8011d3a:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8011d3c:	7bfb      	ldrb	r3, [r7, #15]
 8011d3e:	2b04      	cmp	r3, #4
 8011d40:	d101      	bne.n	8011d46 <f_readdir+0x70>
 8011d42:	2300      	movs	r3, #0
 8011d44:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8011d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d48:	4618      	mov	r0, r3
 8011d4a:	3710      	adds	r7, #16
 8011d4c:	46bd      	mov	sp, r7
 8011d4e:	bd80      	pop	{r7, pc}

08011d50 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011d50:	b480      	push	{r7}
 8011d52:	b087      	sub	sp, #28
 8011d54:	af00      	add	r7, sp, #0
 8011d56:	60f8      	str	r0, [r7, #12]
 8011d58:	60b9      	str	r1, [r7, #8]
 8011d5a:	4613      	mov	r3, r2
 8011d5c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011d5e:	2301      	movs	r3, #1
 8011d60:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011d62:	2300      	movs	r3, #0
 8011d64:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011d66:	4b1f      	ldr	r3, [pc, #124]	; (8011de4 <FATFS_LinkDriverEx+0x94>)
 8011d68:	7a5b      	ldrb	r3, [r3, #9]
 8011d6a:	b2db      	uxtb	r3, r3
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d131      	bne.n	8011dd4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011d70:	4b1c      	ldr	r3, [pc, #112]	; (8011de4 <FATFS_LinkDriverEx+0x94>)
 8011d72:	7a5b      	ldrb	r3, [r3, #9]
 8011d74:	b2db      	uxtb	r3, r3
 8011d76:	461a      	mov	r2, r3
 8011d78:	4b1a      	ldr	r3, [pc, #104]	; (8011de4 <FATFS_LinkDriverEx+0x94>)
 8011d7a:	2100      	movs	r1, #0
 8011d7c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011d7e:	4b19      	ldr	r3, [pc, #100]	; (8011de4 <FATFS_LinkDriverEx+0x94>)
 8011d80:	7a5b      	ldrb	r3, [r3, #9]
 8011d82:	b2db      	uxtb	r3, r3
 8011d84:	4a17      	ldr	r2, [pc, #92]	; (8011de4 <FATFS_LinkDriverEx+0x94>)
 8011d86:	009b      	lsls	r3, r3, #2
 8011d88:	4413      	add	r3, r2
 8011d8a:	68fa      	ldr	r2, [r7, #12]
 8011d8c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011d8e:	4b15      	ldr	r3, [pc, #84]	; (8011de4 <FATFS_LinkDriverEx+0x94>)
 8011d90:	7a5b      	ldrb	r3, [r3, #9]
 8011d92:	b2db      	uxtb	r3, r3
 8011d94:	461a      	mov	r2, r3
 8011d96:	4b13      	ldr	r3, [pc, #76]	; (8011de4 <FATFS_LinkDriverEx+0x94>)
 8011d98:	4413      	add	r3, r2
 8011d9a:	79fa      	ldrb	r2, [r7, #7]
 8011d9c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011d9e:	4b11      	ldr	r3, [pc, #68]	; (8011de4 <FATFS_LinkDriverEx+0x94>)
 8011da0:	7a5b      	ldrb	r3, [r3, #9]
 8011da2:	b2db      	uxtb	r3, r3
 8011da4:	1c5a      	adds	r2, r3, #1
 8011da6:	b2d1      	uxtb	r1, r2
 8011da8:	4a0e      	ldr	r2, [pc, #56]	; (8011de4 <FATFS_LinkDriverEx+0x94>)
 8011daa:	7251      	strb	r1, [r2, #9]
 8011dac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011dae:	7dbb      	ldrb	r3, [r7, #22]
 8011db0:	3330      	adds	r3, #48	; 0x30
 8011db2:	b2da      	uxtb	r2, r3
 8011db4:	68bb      	ldr	r3, [r7, #8]
 8011db6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011db8:	68bb      	ldr	r3, [r7, #8]
 8011dba:	3301      	adds	r3, #1
 8011dbc:	223a      	movs	r2, #58	; 0x3a
 8011dbe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011dc0:	68bb      	ldr	r3, [r7, #8]
 8011dc2:	3302      	adds	r3, #2
 8011dc4:	222f      	movs	r2, #47	; 0x2f
 8011dc6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011dc8:	68bb      	ldr	r3, [r7, #8]
 8011dca:	3303      	adds	r3, #3
 8011dcc:	2200      	movs	r2, #0
 8011dce:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011dd0:	2300      	movs	r3, #0
 8011dd2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	371c      	adds	r7, #28
 8011dda:	46bd      	mov	sp, r7
 8011ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de0:	4770      	bx	lr
 8011de2:	bf00      	nop
 8011de4:	20002258 	.word	0x20002258

08011de8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b082      	sub	sp, #8
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	6078      	str	r0, [r7, #4]
 8011df0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011df2:	2200      	movs	r2, #0
 8011df4:	6839      	ldr	r1, [r7, #0]
 8011df6:	6878      	ldr	r0, [r7, #4]
 8011df8:	f7ff ffaa 	bl	8011d50 <FATFS_LinkDriverEx>
 8011dfc:	4603      	mov	r3, r0
}
 8011dfe:	4618      	mov	r0, r3
 8011e00:	3708      	adds	r7, #8
 8011e02:	46bd      	mov	sp, r7
 8011e04:	bd80      	pop	{r7, pc}
	...

08011e08 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 8011e08:	b480      	push	{r7}
 8011e0a:	b085      	sub	sp, #20
 8011e0c:	af00      	add	r7, sp, #0
 8011e0e:	6078      	str	r0, [r7, #4]
 8011e10:	460b      	mov	r3, r1
 8011e12:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 8011e14:	2300      	movs	r3, #0
 8011e16:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 8011e18:	2301      	movs	r3, #1
 8011e1a:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 8011e1c:	4b15      	ldr	r3, [pc, #84]	; (8011e74 <FATFS_UnLinkDriverEx+0x6c>)
 8011e1e:	7a5b      	ldrb	r3, [r3, #9]
 8011e20:	b2db      	uxtb	r3, r3
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d01e      	beq.n	8011e64 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	781b      	ldrb	r3, [r3, #0]
 8011e2a:	3b30      	subs	r3, #48	; 0x30
 8011e2c:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 8011e2e:	7bbb      	ldrb	r3, [r7, #14]
 8011e30:	4a10      	ldr	r2, [pc, #64]	; (8011e74 <FATFS_UnLinkDriverEx+0x6c>)
 8011e32:	009b      	lsls	r3, r3, #2
 8011e34:	4413      	add	r3, r2
 8011e36:	685b      	ldr	r3, [r3, #4]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d013      	beq.n	8011e64 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 8011e3c:	7bbb      	ldrb	r3, [r7, #14]
 8011e3e:	4a0d      	ldr	r2, [pc, #52]	; (8011e74 <FATFS_UnLinkDriverEx+0x6c>)
 8011e40:	009b      	lsls	r3, r3, #2
 8011e42:	4413      	add	r3, r2
 8011e44:	2200      	movs	r2, #0
 8011e46:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 8011e48:	7bbb      	ldrb	r3, [r7, #14]
 8011e4a:	4a0a      	ldr	r2, [pc, #40]	; (8011e74 <FATFS_UnLinkDriverEx+0x6c>)
 8011e4c:	4413      	add	r3, r2
 8011e4e:	2200      	movs	r2, #0
 8011e50:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 8011e52:	4b08      	ldr	r3, [pc, #32]	; (8011e74 <FATFS_UnLinkDriverEx+0x6c>)
 8011e54:	7a5b      	ldrb	r3, [r3, #9]
 8011e56:	b2db      	uxtb	r3, r3
 8011e58:	3b01      	subs	r3, #1
 8011e5a:	b2da      	uxtb	r2, r3
 8011e5c:	4b05      	ldr	r3, [pc, #20]	; (8011e74 <FATFS_UnLinkDriverEx+0x6c>)
 8011e5e:	725a      	strb	r2, [r3, #9]
      ret = 0;
 8011e60:	2300      	movs	r3, #0
 8011e62:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8011e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e66:	4618      	mov	r0, r3
 8011e68:	3714      	adds	r7, #20
 8011e6a:	46bd      	mov	sp, r7
 8011e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e70:	4770      	bx	lr
 8011e72:	bf00      	nop
 8011e74:	20002258 	.word	0x20002258

08011e78 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 8011e78:	b580      	push	{r7, lr}
 8011e7a:	b082      	sub	sp, #8
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 8011e80:	2100      	movs	r1, #0
 8011e82:	6878      	ldr	r0, [r7, #4]
 8011e84:	f7ff ffc0 	bl	8011e08 <FATFS_UnLinkDriverEx>
 8011e88:	4603      	mov	r3, r0
}
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	3708      	adds	r7, #8
 8011e8e:	46bd      	mov	sp, r7
 8011e90:	bd80      	pop	{r7, pc}
	...

08011e94 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8011e94:	b580      	push	{r7, lr}
 8011e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 8011e98:	2200      	movs	r2, #0
 8011e9a:	490e      	ldr	r1, [pc, #56]	; (8011ed4 <MX_USB_HOST_Init+0x40>)
 8011e9c:	480e      	ldr	r0, [pc, #56]	; (8011ed8 <MX_USB_HOST_Init+0x44>)
 8011e9e:	f7fb ff41 	bl	800dd24 <USBH_Init>
 8011ea2:	4603      	mov	r3, r0
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d001      	beq.n	8011eac <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8011ea8:	f7ef fda8 	bl	80019fc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS) != USBH_OK)
 8011eac:	490b      	ldr	r1, [pc, #44]	; (8011edc <MX_USB_HOST_Init+0x48>)
 8011eae:	480a      	ldr	r0, [pc, #40]	; (8011ed8 <MX_USB_HOST_Init+0x44>)
 8011eb0:	f7fb ffc6 	bl	800de40 <USBH_RegisterClass>
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d001      	beq.n	8011ebe <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8011eba:	f7ef fd9f 	bl	80019fc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 8011ebe:	4806      	ldr	r0, [pc, #24]	; (8011ed8 <MX_USB_HOST_Init+0x44>)
 8011ec0:	f7fc f84a 	bl	800df58 <USBH_Start>
 8011ec4:	4603      	mov	r3, r0
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d001      	beq.n	8011ece <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8011eca:	f7ef fd97 	bl	80019fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8011ece:	bf00      	nop
 8011ed0:	bd80      	pop	{r7, pc}
 8011ed2:	bf00      	nop
 8011ed4:	08011ef5 	.word	0x08011ef5
 8011ed8:	2000b464 	.word	0x2000b464
 8011edc:	20000060 	.word	0x20000060

08011ee0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 8011ee4:	4802      	ldr	r0, [pc, #8]	; (8011ef0 <MX_USB_HOST_Process+0x10>)
 8011ee6:	f7fc f847 	bl	800df78 <USBH_Process>
}
 8011eea:	bf00      	nop
 8011eec:	bd80      	pop	{r7, pc}
 8011eee:	bf00      	nop
 8011ef0:	2000b464 	.word	0x2000b464

08011ef4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8011ef4:	b580      	push	{r7, lr}
 8011ef6:	b082      	sub	sp, #8
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	6078      	str	r0, [r7, #4]
 8011efc:	460b      	mov	r3, r1
 8011efe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8011f00:	78fb      	ldrb	r3, [r7, #3]
 8011f02:	3b01      	subs	r3, #1
 8011f04:	2b04      	cmp	r3, #4
 8011f06:	d82f      	bhi.n	8011f68 <USBH_UserProcess+0x74>
 8011f08:	a201      	add	r2, pc, #4	; (adr r2, 8011f10 <USBH_UserProcess+0x1c>)
 8011f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f0e:	bf00      	nop
 8011f10:	08011f69 	.word	0x08011f69
 8011f14:	08011f3d 	.word	0x08011f3d
 8011f18:	08011f69 	.word	0x08011f69
 8011f1c:	08011f45 	.word	0x08011f45
 8011f20:	08011f25 	.word	0x08011f25
  {
  case HOST_USER_SELECT_CONFIGURATION:
    break;

  case HOST_USER_DISCONNECTION:
    Appli_state = APPLICATION_DISCONNECT;
 8011f24:	4b14      	ldr	r3, [pc, #80]	; (8011f78 <USBH_UserProcess+0x84>)
 8011f26:	2203      	movs	r2, #3
 8011f28:	701a      	strb	r2, [r3, #0]
    if(FATFS_UnLinkDriver(USBHPath) != 0)
 8011f2a:	4814      	ldr	r0, [pc, #80]	; (8011f7c <USBH_UserProcess+0x88>)
 8011f2c:	f7ff ffa4 	bl	8011e78 <FATFS_UnLinkDriver>
    {
//     LCD_ErrLog("ERROR : Cannot unlink FatFS driver! \n");
    }
    if(f_mount(NULL, "", 0) != FR_OK)
 8011f30:	2200      	movs	r2, #0
 8011f32:	4913      	ldr	r1, [pc, #76]	; (8011f80 <USBH_UserProcess+0x8c>)
 8011f34:	2000      	movs	r0, #0
 8011f36:	f7ff f841 	bl	8010fbc <f_mount>
    {
//      LCD_ErrLog("ERROR : Cannot DeInitialize FatFs! \n");
    }
    break;
 8011f3a:	e018      	b.n	8011f6e <USBH_UserProcess+0x7a>

  case HOST_USER_CLASS_ACTIVE:
    Appli_state = APPLICATION_READY;
 8011f3c:	4b0e      	ldr	r3, [pc, #56]	; (8011f78 <USBH_UserProcess+0x84>)
 8011f3e:	2202      	movs	r2, #2
 8011f40:	701a      	strb	r2, [r3, #0]
    break;
 8011f42:	e014      	b.n	8011f6e <USBH_UserProcess+0x7a>

  case HOST_USER_CONNECTION:
    Appli_state = APPLICATION_START;
 8011f44:	4b0c      	ldr	r3, [pc, #48]	; (8011f78 <USBH_UserProcess+0x84>)
 8011f46:	2201      	movs	r2, #1
 8011f48:	701a      	strb	r2, [r3, #0]
    /* Link the USB Mass Storage disk I/O driver */
    if(FATFS_LinkDriver(&USBH_Driver, USBHPath) != 0)
 8011f4a:	490c      	ldr	r1, [pc, #48]	; (8011f7c <USBH_UserProcess+0x88>)
 8011f4c:	480d      	ldr	r0, [pc, #52]	; (8011f84 <USBH_UserProcess+0x90>)
 8011f4e:	f7ff ff4b 	bl	8011de8 <FATFS_LinkDriver>
 8011f52:	4603      	mov	r3, r0
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d109      	bne.n	8011f6c <USBH_UserProcess+0x78>
    {
//      LCD_ErrLog("ERROR : Cannot link FatFS driver! \n");
     break;
    }
    if(f_mount(&USBHFatFS, "", 0) != FR_OK)
 8011f58:	2200      	movs	r2, #0
 8011f5a:	4909      	ldr	r1, [pc, #36]	; (8011f80 <USBH_UserProcess+0x8c>)
 8011f5c:	480a      	ldr	r0, [pc, #40]	; (8011f88 <USBH_UserProcess+0x94>)
 8011f5e:	f7ff f82d 	bl	8010fbc <f_mount>
 8011f62:	4603      	mov	r3, r0
 8011f64:	2b00      	cmp	r3, #0
    {
//      LCD_ErrLog("ERROR : Cannot Initialize FatFs! \n");
     break;
    }
    break;
 8011f66:	e002      	b.n	8011f6e <USBH_UserProcess+0x7a>

  default:
    break;
 8011f68:	bf00      	nop
 8011f6a:	e000      	b.n	8011f6e <USBH_UserProcess+0x7a>
     break;
 8011f6c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8011f6e:	bf00      	nop
 8011f70:	3708      	adds	r7, #8
 8011f72:	46bd      	mov	sp, r7
 8011f74:	bd80      	pop	{r7, pc}
 8011f76:	bf00      	nop
 8011f78:	20002264 	.word	0x20002264
 8011f7c:	2000affc 	.word	0x2000affc
 8011f80:	08012abc 	.word	0x08012abc
 8011f84:	08012ae0 	.word	0x08012ae0
 8011f88:	2000b230 	.word	0x2000b230

08011f8c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8011f8c:	b580      	push	{r7, lr}
 8011f8e:	b08e      	sub	sp, #56	; 0x38
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011f98:	2200      	movs	r2, #0
 8011f9a:	601a      	str	r2, [r3, #0]
 8011f9c:	605a      	str	r2, [r3, #4]
 8011f9e:	609a      	str	r2, [r3, #8]
 8011fa0:	60da      	str	r2, [r3, #12]
 8011fa2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	4a5a      	ldr	r2, [pc, #360]	; (8012114 <HAL_HCD_MspInit+0x188>)
 8011faa:	4293      	cmp	r3, r2
 8011fac:	f040 80ae 	bne.w	801210c <HAL_HCD_MspInit+0x180>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011fb0:	4b59      	ldr	r3, [pc, #356]	; (8012118 <HAL_HCD_MspInit+0x18c>)
 8011fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011fb4:	4a58      	ldr	r2, [pc, #352]	; (8012118 <HAL_HCD_MspInit+0x18c>)
 8011fb6:	f043 0302 	orr.w	r3, r3, #2
 8011fba:	6313      	str	r3, [r2, #48]	; 0x30
 8011fbc:	4b56      	ldr	r3, [pc, #344]	; (8012118 <HAL_HCD_MspInit+0x18c>)
 8011fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011fc0:	f003 0302 	and.w	r3, r3, #2
 8011fc4:	623b      	str	r3, [r7, #32]
 8011fc6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8011fc8:	4b53      	ldr	r3, [pc, #332]	; (8012118 <HAL_HCD_MspInit+0x18c>)
 8011fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011fcc:	4a52      	ldr	r2, [pc, #328]	; (8012118 <HAL_HCD_MspInit+0x18c>)
 8011fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011fd2:	6313      	str	r3, [r2, #48]	; 0x30
 8011fd4:	4b50      	ldr	r3, [pc, #320]	; (8012118 <HAL_HCD_MspInit+0x18c>)
 8011fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011fdc:	61fb      	str	r3, [r7, #28]
 8011fde:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8011fe0:	4b4d      	ldr	r3, [pc, #308]	; (8012118 <HAL_HCD_MspInit+0x18c>)
 8011fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011fe4:	4a4c      	ldr	r2, [pc, #304]	; (8012118 <HAL_HCD_MspInit+0x18c>)
 8011fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011fea:	6313      	str	r3, [r2, #48]	; 0x30
 8011fec:	4b4a      	ldr	r3, [pc, #296]	; (8012118 <HAL_HCD_MspInit+0x18c>)
 8011fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011ff4:	61bb      	str	r3, [r7, #24]
 8011ff6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011ff8:	4b47      	ldr	r3, [pc, #284]	; (8012118 <HAL_HCD_MspInit+0x18c>)
 8011ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ffc:	4a46      	ldr	r2, [pc, #280]	; (8012118 <HAL_HCD_MspInit+0x18c>)
 8011ffe:	f043 0304 	orr.w	r3, r3, #4
 8012002:	6313      	str	r3, [r2, #48]	; 0x30
 8012004:	4b44      	ldr	r3, [pc, #272]	; (8012118 <HAL_HCD_MspInit+0x18c>)
 8012006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012008:	f003 0304 	and.w	r3, r3, #4
 801200c:	617b      	str	r3, [r7, #20]
 801200e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012010:	4b41      	ldr	r3, [pc, #260]	; (8012118 <HAL_HCD_MspInit+0x18c>)
 8012012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012014:	4a40      	ldr	r2, [pc, #256]	; (8012118 <HAL_HCD_MspInit+0x18c>)
 8012016:	f043 0301 	orr.w	r3, r3, #1
 801201a:	6313      	str	r3, [r2, #48]	; 0x30
 801201c:	4b3e      	ldr	r3, [pc, #248]	; (8012118 <HAL_HCD_MspInit+0x18c>)
 801201e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012020:	f003 0301 	and.w	r3, r3, #1
 8012024:	613b      	str	r3, [r7, #16]
 8012026:	693b      	ldr	r3, [r7, #16]
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB1     ------> USB_OTG_HS_ULPI_D2
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB11     ------> USB_OTG_HS_ULPI_D4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_10
 8012028:	f643 4323 	movw	r3, #15395	; 0x3c23
 801202c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801202e:	2302      	movs	r3, #2
 8012030:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012032:	2300      	movs	r3, #0
 8012034:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012036:	2303      	movs	r3, #3
 8012038:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 801203a:	230a      	movs	r3, #10
 801203c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801203e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012042:	4619      	mov	r1, r3
 8012044:	4835      	ldr	r0, [pc, #212]	; (801211c <HAL_HCD_MspInit+0x190>)
 8012046:	f7f3 fa6f 	bl	8005528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 801204a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801204e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012050:	2302      	movs	r3, #2
 8012052:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012054:	2300      	movs	r3, #0
 8012056:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012058:	2303      	movs	r3, #3
 801205a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 801205c:	230a      	movs	r3, #10
 801205e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8012060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012064:	4619      	mov	r1, r3
 8012066:	482e      	ldr	r0, [pc, #184]	; (8012120 <HAL_HCD_MspInit+0x194>)
 8012068:	f7f3 fa5e 	bl	8005528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 801206c:	2310      	movs	r3, #16
 801206e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012070:	2302      	movs	r3, #2
 8012072:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012074:	2300      	movs	r3, #0
 8012076:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012078:	2303      	movs	r3, #3
 801207a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 801207c:	230a      	movs	r3, #10
 801207e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8012080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012084:	4619      	mov	r1, r3
 8012086:	4827      	ldr	r0, [pc, #156]	; (8012124 <HAL_HCD_MspInit+0x198>)
 8012088:	f7f3 fa4e 	bl	8005528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 801208c:	2301      	movs	r3, #1
 801208e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012090:	2302      	movs	r3, #2
 8012092:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012094:	2300      	movs	r3, #0
 8012096:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012098:	2303      	movs	r3, #3
 801209a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 801209c:	230a      	movs	r3, #10
 801209e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80120a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80120a4:	4619      	mov	r1, r3
 80120a6:	4820      	ldr	r0, [pc, #128]	; (8012128 <HAL_HCD_MspInit+0x19c>)
 80120a8:	f7f3 fa3e 	bl	8005528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 80120ac:	2328      	movs	r3, #40	; 0x28
 80120ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80120b0:	2302      	movs	r3, #2
 80120b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80120b4:	2300      	movs	r3, #0
 80120b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80120b8:	2303      	movs	r3, #3
 80120ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80120bc:	230a      	movs	r3, #10
 80120be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80120c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80120c4:	4619      	mov	r1, r3
 80120c6:	4819      	ldr	r0, [pc, #100]	; (801212c <HAL_HCD_MspInit+0x1a0>)
 80120c8:	f7f3 fa2e 	bl	8005528 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80120cc:	4b12      	ldr	r3, [pc, #72]	; (8012118 <HAL_HCD_MspInit+0x18c>)
 80120ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80120d0:	4a11      	ldr	r2, [pc, #68]	; (8012118 <HAL_HCD_MspInit+0x18c>)
 80120d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80120d6:	6313      	str	r3, [r2, #48]	; 0x30
 80120d8:	4b0f      	ldr	r3, [pc, #60]	; (8012118 <HAL_HCD_MspInit+0x18c>)
 80120da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80120dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80120e0:	60fb      	str	r3, [r7, #12]
 80120e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 80120e4:	4b0c      	ldr	r3, [pc, #48]	; (8012118 <HAL_HCD_MspInit+0x18c>)
 80120e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80120e8:	4a0b      	ldr	r2, [pc, #44]	; (8012118 <HAL_HCD_MspInit+0x18c>)
 80120ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80120ee:	6313      	str	r3, [r2, #48]	; 0x30
 80120f0:	4b09      	ldr	r3, [pc, #36]	; (8012118 <HAL_HCD_MspInit+0x18c>)
 80120f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80120f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80120f8:	60bb      	str	r3, [r7, #8]
 80120fa:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80120fc:	2200      	movs	r2, #0
 80120fe:	2100      	movs	r1, #0
 8012100:	204d      	movs	r0, #77	; 0x4d
 8012102:	f7f2 fc52 	bl	80049aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8012106:	204d      	movs	r0, #77	; 0x4d
 8012108:	f7f2 fc6b 	bl	80049e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801210c:	bf00      	nop
 801210e:	3738      	adds	r7, #56	; 0x38
 8012110:	46bd      	mov	sp, r7
 8012112:	bd80      	pop	{r7, pc}
 8012114:	40040000 	.word	0x40040000
 8012118:	40023800 	.word	0x40023800
 801211c:	40020400 	.word	0x40020400
 8012120:	40022000 	.word	0x40022000
 8012124:	40021c00 	.word	0x40021c00
 8012128:	40020800 	.word	0x40020800
 801212c:	40020000 	.word	0x40020000

08012130 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8012130:	b580      	push	{r7, lr}
 8012132:	b082      	sub	sp, #8
 8012134:	af00      	add	r7, sp, #0
 8012136:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801213e:	4618      	mov	r0, r3
 8012140:	f7fc faed 	bl	800e71e <USBH_LL_IncTimer>
}
 8012144:	bf00      	nop
 8012146:	3708      	adds	r7, #8
 8012148:	46bd      	mov	sp, r7
 801214a:	bd80      	pop	{r7, pc}

0801214c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801214c:	b580      	push	{r7, lr}
 801214e:	b082      	sub	sp, #8
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801215a:	4618      	mov	r0, r3
 801215c:	f7fc fb25 	bl	800e7aa <USBH_LL_Connect>
}
 8012160:	bf00      	nop
 8012162:	3708      	adds	r7, #8
 8012164:	46bd      	mov	sp, r7
 8012166:	bd80      	pop	{r7, pc}

08012168 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8012168:	b580      	push	{r7, lr}
 801216a:	b082      	sub	sp, #8
 801216c:	af00      	add	r7, sp, #0
 801216e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012176:	4618      	mov	r0, r3
 8012178:	f7fc fb2e 	bl	800e7d8 <USBH_LL_Disconnect>
}
 801217c:	bf00      	nop
 801217e:	3708      	adds	r7, #8
 8012180:	46bd      	mov	sp, r7
 8012182:	bd80      	pop	{r7, pc}

08012184 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8012184:	b480      	push	{r7}
 8012186:	b083      	sub	sp, #12
 8012188:	af00      	add	r7, sp, #0
 801218a:	6078      	str	r0, [r7, #4]
 801218c:	460b      	mov	r3, r1
 801218e:	70fb      	strb	r3, [r7, #3]
 8012190:	4613      	mov	r3, r2
 8012192:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8012194:	bf00      	nop
 8012196:	370c      	adds	r7, #12
 8012198:	46bd      	mov	sp, r7
 801219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801219e:	4770      	bx	lr

080121a0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80121a0:	b580      	push	{r7, lr}
 80121a2:	b082      	sub	sp, #8
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80121ae:	4618      	mov	r0, r3
 80121b0:	f7fc fadf 	bl	800e772 <USBH_LL_PortEnabled>
}
 80121b4:	bf00      	nop
 80121b6:	3708      	adds	r7, #8
 80121b8:	46bd      	mov	sp, r7
 80121ba:	bd80      	pop	{r7, pc}

080121bc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80121bc:	b580      	push	{r7, lr}
 80121be:	b082      	sub	sp, #8
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80121ca:	4618      	mov	r0, r3
 80121cc:	f7fc fadf 	bl	800e78e <USBH_LL_PortDisabled>
}
 80121d0:	bf00      	nop
 80121d2:	3708      	adds	r7, #8
 80121d4:	46bd      	mov	sp, r7
 80121d6:	bd80      	pop	{r7, pc}

080121d8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80121d8:	b580      	push	{r7, lr}
 80121da:	b082      	sub	sp, #8
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d132      	bne.n	8012250 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 80121ea:	4a1c      	ldr	r2, [pc, #112]	; (801225c <USBH_LL_Init+0x84>)
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_HS;
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	4a19      	ldr	r2, [pc, #100]	; (801225c <USBH_LL_Init+0x84>)
 80121f6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80121fa:	4b18      	ldr	r3, [pc, #96]	; (801225c <USBH_LL_Init+0x84>)
 80121fc:	4a18      	ldr	r2, [pc, #96]	; (8012260 <USBH_LL_Init+0x88>)
 80121fe:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8012200:	4b16      	ldr	r3, [pc, #88]	; (801225c <USBH_LL_Init+0x84>)
 8012202:	220c      	movs	r2, #12
 8012204:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_HIGH;
 8012206:	4b15      	ldr	r3, [pc, #84]	; (801225c <USBH_LL_Init+0x84>)
 8012208:	2200      	movs	r2, #0
 801220a:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801220c:	4b13      	ldr	r3, [pc, #76]	; (801225c <USBH_LL_Init+0x84>)
 801220e:	2200      	movs	r2, #0
 8012210:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8012212:	4b12      	ldr	r3, [pc, #72]	; (801225c <USBH_LL_Init+0x84>)
 8012214:	2201      	movs	r2, #1
 8012216:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8012218:	4b10      	ldr	r3, [pc, #64]	; (801225c <USBH_LL_Init+0x84>)
 801221a:	2200      	movs	r2, #0
 801221c:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 801221e:	4b0f      	ldr	r3, [pc, #60]	; (801225c <USBH_LL_Init+0x84>)
 8012220:	2200      	movs	r2, #0
 8012222:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8012224:	4b0d      	ldr	r3, [pc, #52]	; (801225c <USBH_LL_Init+0x84>)
 8012226:	2200      	movs	r2, #0
 8012228:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = ENABLE;
 801222a:	4b0c      	ldr	r3, [pc, #48]	; (801225c <USBH_LL_Init+0x84>)
 801222c:	2201      	movs	r2, #1
 801222e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8012230:	480a      	ldr	r0, [pc, #40]	; (801225c <USBH_LL_Init+0x84>)
 8012232:	f7f3 fc78 	bl	8005b26 <HAL_HCD_Init>
 8012236:	4603      	mov	r3, r0
 8012238:	2b00      	cmp	r3, #0
 801223a:	d001      	beq.n	8012240 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 801223c:	f7ef fbde 	bl	80019fc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 8012240:	4806      	ldr	r0, [pc, #24]	; (801225c <USBH_LL_Init+0x84>)
 8012242:	f7f4 f87b 	bl	800633c <HAL_HCD_GetCurrentFrame>
 8012246:	4603      	mov	r3, r0
 8012248:	4619      	mov	r1, r3
 801224a:	6878      	ldr	r0, [r7, #4]
 801224c:	f7fc fa58 	bl	800e700 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8012250:	2300      	movs	r3, #0
}
 8012252:	4618      	mov	r0, r3
 8012254:	3708      	adds	r7, #8
 8012256:	46bd      	mov	sp, r7
 8012258:	bd80      	pop	{r7, pc}
 801225a:	bf00      	nop
 801225c:	2000b83c 	.word	0x2000b83c
 8012260:	40040000 	.word	0x40040000

08012264 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8012264:	b580      	push	{r7, lr}
 8012266:	b084      	sub	sp, #16
 8012268:	af00      	add	r7, sp, #0
 801226a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801226c:	2300      	movs	r3, #0
 801226e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012270:	2300      	movs	r3, #0
 8012272:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801227a:	4618      	mov	r0, r3
 801227c:	f7f3 ffe6 	bl	800624c <HAL_HCD_Start>
 8012280:	4603      	mov	r3, r0
 8012282:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012284:	7bfb      	ldrb	r3, [r7, #15]
 8012286:	4618      	mov	r0, r3
 8012288:	f000 f990 	bl	80125ac <USBH_Get_USB_Status>
 801228c:	4603      	mov	r3, r0
 801228e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012290:	7bbb      	ldrb	r3, [r7, #14]
}
 8012292:	4618      	mov	r0, r3
 8012294:	3710      	adds	r7, #16
 8012296:	46bd      	mov	sp, r7
 8012298:	bd80      	pop	{r7, pc}

0801229a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801229a:	b580      	push	{r7, lr}
 801229c:	b084      	sub	sp, #16
 801229e:	af00      	add	r7, sp, #0
 80122a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80122a2:	2300      	movs	r3, #0
 80122a4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80122a6:	2300      	movs	r3, #0
 80122a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80122b0:	4618      	mov	r0, r3
 80122b2:	f7f3 ffee 	bl	8006292 <HAL_HCD_Stop>
 80122b6:	4603      	mov	r3, r0
 80122b8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80122ba:	7bfb      	ldrb	r3, [r7, #15]
 80122bc:	4618      	mov	r0, r3
 80122be:	f000 f975 	bl	80125ac <USBH_Get_USB_Status>
 80122c2:	4603      	mov	r3, r0
 80122c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80122c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80122c8:	4618      	mov	r0, r3
 80122ca:	3710      	adds	r7, #16
 80122cc:	46bd      	mov	sp, r7
 80122ce:	bd80      	pop	{r7, pc}

080122d0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80122d0:	b580      	push	{r7, lr}
 80122d2:	b084      	sub	sp, #16
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80122d8:	2301      	movs	r3, #1
 80122da:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80122e2:	4618      	mov	r0, r3
 80122e4:	f7f4 f838 	bl	8006358 <HAL_HCD_GetCurrentSpeed>
 80122e8:	4603      	mov	r3, r0
 80122ea:	2b01      	cmp	r3, #1
 80122ec:	d007      	beq.n	80122fe <USBH_LL_GetSpeed+0x2e>
 80122ee:	2b01      	cmp	r3, #1
 80122f0:	d302      	bcc.n	80122f8 <USBH_LL_GetSpeed+0x28>
 80122f2:	2b02      	cmp	r3, #2
 80122f4:	d006      	beq.n	8012304 <USBH_LL_GetSpeed+0x34>
 80122f6:	e008      	b.n	801230a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80122f8:	2300      	movs	r3, #0
 80122fa:	73fb      	strb	r3, [r7, #15]
    break;
 80122fc:	e008      	b.n	8012310 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 80122fe:	2301      	movs	r3, #1
 8012300:	73fb      	strb	r3, [r7, #15]
    break;
 8012302:	e005      	b.n	8012310 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8012304:	2302      	movs	r3, #2
 8012306:	73fb      	strb	r3, [r7, #15]
    break;
 8012308:	e002      	b.n	8012310 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 801230a:	2301      	movs	r3, #1
 801230c:	73fb      	strb	r3, [r7, #15]
    break;
 801230e:	bf00      	nop
  }
  return  speed;
 8012310:	7bfb      	ldrb	r3, [r7, #15]
}
 8012312:	4618      	mov	r0, r3
 8012314:	3710      	adds	r7, #16
 8012316:	46bd      	mov	sp, r7
 8012318:	bd80      	pop	{r7, pc}

0801231a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801231a:	b580      	push	{r7, lr}
 801231c:	b084      	sub	sp, #16
 801231e:	af00      	add	r7, sp, #0
 8012320:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012322:	2300      	movs	r3, #0
 8012324:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012326:	2300      	movs	r3, #0
 8012328:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012330:	4618      	mov	r0, r3
 8012332:	f7f3 ffcb 	bl	80062cc <HAL_HCD_ResetPort>
 8012336:	4603      	mov	r3, r0
 8012338:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801233a:	7bfb      	ldrb	r3, [r7, #15]
 801233c:	4618      	mov	r0, r3
 801233e:	f000 f935 	bl	80125ac <USBH_Get_USB_Status>
 8012342:	4603      	mov	r3, r0
 8012344:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012346:	7bbb      	ldrb	r3, [r7, #14]
}
 8012348:	4618      	mov	r0, r3
 801234a:	3710      	adds	r7, #16
 801234c:	46bd      	mov	sp, r7
 801234e:	bd80      	pop	{r7, pc}

08012350 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012350:	b580      	push	{r7, lr}
 8012352:	b082      	sub	sp, #8
 8012354:	af00      	add	r7, sp, #0
 8012356:	6078      	str	r0, [r7, #4]
 8012358:	460b      	mov	r3, r1
 801235a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012362:	78fa      	ldrb	r2, [r7, #3]
 8012364:	4611      	mov	r1, r2
 8012366:	4618      	mov	r0, r3
 8012368:	f7f3 ffd3 	bl	8006312 <HAL_HCD_HC_GetXferCount>
 801236c:	4603      	mov	r3, r0
}
 801236e:	4618      	mov	r0, r3
 8012370:	3708      	adds	r7, #8
 8012372:	46bd      	mov	sp, r7
 8012374:	bd80      	pop	{r7, pc}

08012376 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8012376:	b590      	push	{r4, r7, lr}
 8012378:	b089      	sub	sp, #36	; 0x24
 801237a:	af04      	add	r7, sp, #16
 801237c:	6078      	str	r0, [r7, #4]
 801237e:	4608      	mov	r0, r1
 8012380:	4611      	mov	r1, r2
 8012382:	461a      	mov	r2, r3
 8012384:	4603      	mov	r3, r0
 8012386:	70fb      	strb	r3, [r7, #3]
 8012388:	460b      	mov	r3, r1
 801238a:	70bb      	strb	r3, [r7, #2]
 801238c:	4613      	mov	r3, r2
 801238e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012390:	2300      	movs	r3, #0
 8012392:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012394:	2300      	movs	r3, #0
 8012396:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801239e:	787c      	ldrb	r4, [r7, #1]
 80123a0:	78ba      	ldrb	r2, [r7, #2]
 80123a2:	78f9      	ldrb	r1, [r7, #3]
 80123a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80123a6:	9302      	str	r3, [sp, #8]
 80123a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80123ac:	9301      	str	r3, [sp, #4]
 80123ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80123b2:	9300      	str	r3, [sp, #0]
 80123b4:	4623      	mov	r3, r4
 80123b6:	f7f3 fc18 	bl	8005bea <HAL_HCD_HC_Init>
 80123ba:	4603      	mov	r3, r0
 80123bc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80123be:	7bfb      	ldrb	r3, [r7, #15]
 80123c0:	4618      	mov	r0, r3
 80123c2:	f000 f8f3 	bl	80125ac <USBH_Get_USB_Status>
 80123c6:	4603      	mov	r3, r0
 80123c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80123ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80123cc:	4618      	mov	r0, r3
 80123ce:	3714      	adds	r7, #20
 80123d0:	46bd      	mov	sp, r7
 80123d2:	bd90      	pop	{r4, r7, pc}

080123d4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80123d4:	b580      	push	{r7, lr}
 80123d6:	b084      	sub	sp, #16
 80123d8:	af00      	add	r7, sp, #0
 80123da:	6078      	str	r0, [r7, #4]
 80123dc:	460b      	mov	r3, r1
 80123de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80123e0:	2300      	movs	r3, #0
 80123e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80123e4:	2300      	movs	r3, #0
 80123e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80123ee:	78fa      	ldrb	r2, [r7, #3]
 80123f0:	4611      	mov	r1, r2
 80123f2:	4618      	mov	r0, r3
 80123f4:	f7f3 fc91 	bl	8005d1a <HAL_HCD_HC_Halt>
 80123f8:	4603      	mov	r3, r0
 80123fa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80123fc:	7bfb      	ldrb	r3, [r7, #15]
 80123fe:	4618      	mov	r0, r3
 8012400:	f000 f8d4 	bl	80125ac <USBH_Get_USB_Status>
 8012404:	4603      	mov	r3, r0
 8012406:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012408:	7bbb      	ldrb	r3, [r7, #14]
}
 801240a:	4618      	mov	r0, r3
 801240c:	3710      	adds	r7, #16
 801240e:	46bd      	mov	sp, r7
 8012410:	bd80      	pop	{r7, pc}

08012412 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8012412:	b590      	push	{r4, r7, lr}
 8012414:	b089      	sub	sp, #36	; 0x24
 8012416:	af04      	add	r7, sp, #16
 8012418:	6078      	str	r0, [r7, #4]
 801241a:	4608      	mov	r0, r1
 801241c:	4611      	mov	r1, r2
 801241e:	461a      	mov	r2, r3
 8012420:	4603      	mov	r3, r0
 8012422:	70fb      	strb	r3, [r7, #3]
 8012424:	460b      	mov	r3, r1
 8012426:	70bb      	strb	r3, [r7, #2]
 8012428:	4613      	mov	r3, r2
 801242a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801242c:	2300      	movs	r3, #0
 801242e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012430:	2300      	movs	r3, #0
 8012432:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801243a:	787c      	ldrb	r4, [r7, #1]
 801243c:	78ba      	ldrb	r2, [r7, #2]
 801243e:	78f9      	ldrb	r1, [r7, #3]
 8012440:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012444:	9303      	str	r3, [sp, #12]
 8012446:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012448:	9302      	str	r3, [sp, #8]
 801244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801244c:	9301      	str	r3, [sp, #4]
 801244e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012452:	9300      	str	r3, [sp, #0]
 8012454:	4623      	mov	r3, r4
 8012456:	f7f3 fc83 	bl	8005d60 <HAL_HCD_HC_SubmitRequest>
 801245a:	4603      	mov	r3, r0
 801245c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801245e:	7bfb      	ldrb	r3, [r7, #15]
 8012460:	4618      	mov	r0, r3
 8012462:	f000 f8a3 	bl	80125ac <USBH_Get_USB_Status>
 8012466:	4603      	mov	r3, r0
 8012468:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801246a:	7bbb      	ldrb	r3, [r7, #14]
}
 801246c:	4618      	mov	r0, r3
 801246e:	3714      	adds	r7, #20
 8012470:	46bd      	mov	sp, r7
 8012472:	bd90      	pop	{r4, r7, pc}

08012474 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012474:	b580      	push	{r7, lr}
 8012476:	b082      	sub	sp, #8
 8012478:	af00      	add	r7, sp, #0
 801247a:	6078      	str	r0, [r7, #4]
 801247c:	460b      	mov	r3, r1
 801247e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012486:	78fa      	ldrb	r2, [r7, #3]
 8012488:	4611      	mov	r1, r2
 801248a:	4618      	mov	r0, r3
 801248c:	f7f3 ff2c 	bl	80062e8 <HAL_HCD_HC_GetURBState>
 8012490:	4603      	mov	r3, r0
}
 8012492:	4618      	mov	r0, r3
 8012494:	3708      	adds	r7, #8
 8012496:	46bd      	mov	sp, r7
 8012498:	bd80      	pop	{r7, pc}

0801249a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801249a:	b580      	push	{r7, lr}
 801249c:	b082      	sub	sp, #8
 801249e:	af00      	add	r7, sp, #0
 80124a0:	6078      	str	r0, [r7, #4]
 80124a2:	460b      	mov	r3, r1
 80124a4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d103      	bne.n	80124b8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 80124b0:	78fb      	ldrb	r3, [r7, #3]
 80124b2:	4618      	mov	r0, r3
 80124b4:	f000 f8a6 	bl	8012604 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80124b8:	20c8      	movs	r0, #200	; 0xc8
 80124ba:	f7f2 f957 	bl	800476c <HAL_Delay>
  return USBH_OK;
 80124be:	2300      	movs	r3, #0
}
 80124c0:	4618      	mov	r0, r3
 80124c2:	3708      	adds	r7, #8
 80124c4:	46bd      	mov	sp, r7
 80124c6:	bd80      	pop	{r7, pc}

080124c8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80124c8:	b480      	push	{r7}
 80124ca:	b085      	sub	sp, #20
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	6078      	str	r0, [r7, #4]
 80124d0:	460b      	mov	r3, r1
 80124d2:	70fb      	strb	r3, [r7, #3]
 80124d4:	4613      	mov	r3, r2
 80124d6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80124de:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80124e0:	78fa      	ldrb	r2, [r7, #3]
 80124e2:	68f9      	ldr	r1, [r7, #12]
 80124e4:	4613      	mov	r3, r2
 80124e6:	009b      	lsls	r3, r3, #2
 80124e8:	4413      	add	r3, r2
 80124ea:	00db      	lsls	r3, r3, #3
 80124ec:	440b      	add	r3, r1
 80124ee:	333b      	adds	r3, #59	; 0x3b
 80124f0:	781b      	ldrb	r3, [r3, #0]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d00a      	beq.n	801250c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80124f6:	78fa      	ldrb	r2, [r7, #3]
 80124f8:	68f9      	ldr	r1, [r7, #12]
 80124fa:	4613      	mov	r3, r2
 80124fc:	009b      	lsls	r3, r3, #2
 80124fe:	4413      	add	r3, r2
 8012500:	00db      	lsls	r3, r3, #3
 8012502:	440b      	add	r3, r1
 8012504:	3350      	adds	r3, #80	; 0x50
 8012506:	78ba      	ldrb	r2, [r7, #2]
 8012508:	701a      	strb	r2, [r3, #0]
 801250a:	e009      	b.n	8012520 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801250c:	78fa      	ldrb	r2, [r7, #3]
 801250e:	68f9      	ldr	r1, [r7, #12]
 8012510:	4613      	mov	r3, r2
 8012512:	009b      	lsls	r3, r3, #2
 8012514:	4413      	add	r3, r2
 8012516:	00db      	lsls	r3, r3, #3
 8012518:	440b      	add	r3, r1
 801251a:	3351      	adds	r3, #81	; 0x51
 801251c:	78ba      	ldrb	r2, [r7, #2]
 801251e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8012520:	2300      	movs	r3, #0
}
 8012522:	4618      	mov	r0, r3
 8012524:	3714      	adds	r7, #20
 8012526:	46bd      	mov	sp, r7
 8012528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801252c:	4770      	bx	lr

0801252e <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801252e:	b480      	push	{r7}
 8012530:	b085      	sub	sp, #20
 8012532:	af00      	add	r7, sp, #0
 8012534:	6078      	str	r0, [r7, #4]
 8012536:	460b      	mov	r3, r1
 8012538:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 801253a:	2300      	movs	r3, #0
 801253c:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012544:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8012546:	78fa      	ldrb	r2, [r7, #3]
 8012548:	68b9      	ldr	r1, [r7, #8]
 801254a:	4613      	mov	r3, r2
 801254c:	009b      	lsls	r3, r3, #2
 801254e:	4413      	add	r3, r2
 8012550:	00db      	lsls	r3, r3, #3
 8012552:	440b      	add	r3, r1
 8012554:	333b      	adds	r3, #59	; 0x3b
 8012556:	781b      	ldrb	r3, [r3, #0]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d00a      	beq.n	8012572 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 801255c:	78fa      	ldrb	r2, [r7, #3]
 801255e:	68b9      	ldr	r1, [r7, #8]
 8012560:	4613      	mov	r3, r2
 8012562:	009b      	lsls	r3, r3, #2
 8012564:	4413      	add	r3, r2
 8012566:	00db      	lsls	r3, r3, #3
 8012568:	440b      	add	r3, r1
 801256a:	3350      	adds	r3, #80	; 0x50
 801256c:	781b      	ldrb	r3, [r3, #0]
 801256e:	73fb      	strb	r3, [r7, #15]
 8012570:	e009      	b.n	8012586 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8012572:	78fa      	ldrb	r2, [r7, #3]
 8012574:	68b9      	ldr	r1, [r7, #8]
 8012576:	4613      	mov	r3, r2
 8012578:	009b      	lsls	r3, r3, #2
 801257a:	4413      	add	r3, r2
 801257c:	00db      	lsls	r3, r3, #3
 801257e:	440b      	add	r3, r1
 8012580:	3351      	adds	r3, #81	; 0x51
 8012582:	781b      	ldrb	r3, [r3, #0]
 8012584:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8012586:	7bfb      	ldrb	r3, [r7, #15]
}
 8012588:	4618      	mov	r0, r3
 801258a:	3714      	adds	r7, #20
 801258c:	46bd      	mov	sp, r7
 801258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012592:	4770      	bx	lr

08012594 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8012594:	b580      	push	{r7, lr}
 8012596:	b082      	sub	sp, #8
 8012598:	af00      	add	r7, sp, #0
 801259a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801259c:	6878      	ldr	r0, [r7, #4]
 801259e:	f7f2 f8e5 	bl	800476c <HAL_Delay>
}
 80125a2:	bf00      	nop
 80125a4:	3708      	adds	r7, #8
 80125a6:	46bd      	mov	sp, r7
 80125a8:	bd80      	pop	{r7, pc}
	...

080125ac <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80125ac:	b480      	push	{r7}
 80125ae:	b085      	sub	sp, #20
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	4603      	mov	r3, r0
 80125b4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80125b6:	2300      	movs	r3, #0
 80125b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80125ba:	79fb      	ldrb	r3, [r7, #7]
 80125bc:	2b03      	cmp	r3, #3
 80125be:	d817      	bhi.n	80125f0 <USBH_Get_USB_Status+0x44>
 80125c0:	a201      	add	r2, pc, #4	; (adr r2, 80125c8 <USBH_Get_USB_Status+0x1c>)
 80125c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125c6:	bf00      	nop
 80125c8:	080125d9 	.word	0x080125d9
 80125cc:	080125df 	.word	0x080125df
 80125d0:	080125e5 	.word	0x080125e5
 80125d4:	080125eb 	.word	0x080125eb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80125d8:	2300      	movs	r3, #0
 80125da:	73fb      	strb	r3, [r7, #15]
    break;
 80125dc:	e00b      	b.n	80125f6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80125de:	2302      	movs	r3, #2
 80125e0:	73fb      	strb	r3, [r7, #15]
    break;
 80125e2:	e008      	b.n	80125f6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80125e4:	2301      	movs	r3, #1
 80125e6:	73fb      	strb	r3, [r7, #15]
    break;
 80125e8:	e005      	b.n	80125f6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80125ea:	2302      	movs	r3, #2
 80125ec:	73fb      	strb	r3, [r7, #15]
    break;
 80125ee:	e002      	b.n	80125f6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80125f0:	2302      	movs	r3, #2
 80125f2:	73fb      	strb	r3, [r7, #15]
    break;
 80125f4:	bf00      	nop
  }
  return usb_status;
 80125f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80125f8:	4618      	mov	r0, r3
 80125fa:	3714      	adds	r7, #20
 80125fc:	46bd      	mov	sp, r7
 80125fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012602:	4770      	bx	lr

08012604 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 8012604:	b580      	push	{r7, lr}
 8012606:	b088      	sub	sp, #32
 8012608:	af04      	add	r7, sp, #16
 801260a:	4603      	mov	r3, r0
 801260c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN PREPARE_I2C_REG_VBUS_HS */
  uint8_t Component_Reg  = 0;
 801260e:	2300      	movs	r3, #0
 8012610:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END PREPARE_I2C_REG_VBUS_HS */
  HAL_StatusTypeDef status = HAL_OK;
 8012612:	2300      	movs	r3, #0
 8012614:	73bb      	strb	r3, [r7, #14]
  uint8_t Component_Addr = 0 << 1;
 8012616:	2300      	movs	r3, #0
 8012618:	737b      	strb	r3, [r7, #13]
  /* USER CODE BEGIN PREPARE_DATA_VBUS_HS */
  uint8_t data = state;
 801261a:	79fb      	ldrb	r3, [r7, #7]
 801261c:	733b      	strb	r3, [r7, #12]
  /* USER CODE END PREPARE_DATA_VBUS_HS */
  uint8_t data_tmp = 0;
 801261e:	2300      	movs	r3, #0
 8012620:	72fb      	strb	r3, [r7, #11]
  status = HAL_I2C_Mem_Read(&hi2c4, Component_Addr, (uint16_t)Component_Reg, I2C_MEMADD_SIZE_8BIT, &data_tmp, 1, 100);
 8012622:	7b7b      	ldrb	r3, [r7, #13]
 8012624:	b299      	uxth	r1, r3
 8012626:	7bfb      	ldrb	r3, [r7, #15]
 8012628:	b29a      	uxth	r2, r3
 801262a:	2364      	movs	r3, #100	; 0x64
 801262c:	9302      	str	r3, [sp, #8]
 801262e:	2301      	movs	r3, #1
 8012630:	9301      	str	r3, [sp, #4]
 8012632:	f107 030b 	add.w	r3, r7, #11
 8012636:	9300      	str	r3, [sp, #0]
 8012638:	2301      	movs	r3, #1
 801263a:	480f      	ldr	r0, [pc, #60]	; (8012678 <MX_DriverVbusHS+0x74>)
 801263c:	f7f5 f938 	bl	80078b0 <HAL_I2C_Mem_Read>
 8012640:	4603      	mov	r3, r0
 8012642:	73bb      	strb	r3, [r7, #14]
  data |= data_tmp;
 8012644:	7b3a      	ldrb	r2, [r7, #12]
 8012646:	7afb      	ldrb	r3, [r7, #11]
 8012648:	4313      	orrs	r3, r2
 801264a:	b2db      	uxtb	r3, r3
 801264c:	733b      	strb	r3, [r7, #12]
  status = HAL_I2C_Mem_Write(&hi2c4,Component_Addr,(uint16_t)Component_Reg, I2C_MEMADD_SIZE_8BIT,&data, 1, 100);
 801264e:	7b7b      	ldrb	r3, [r7, #13]
 8012650:	b299      	uxth	r1, r3
 8012652:	7bfb      	ldrb	r3, [r7, #15]
 8012654:	b29a      	uxth	r2, r3
 8012656:	2364      	movs	r3, #100	; 0x64
 8012658:	9302      	str	r3, [sp, #8]
 801265a:	2301      	movs	r3, #1
 801265c:	9301      	str	r3, [sp, #4]
 801265e:	f107 030c 	add.w	r3, r7, #12
 8012662:	9300      	str	r3, [sp, #0]
 8012664:	2301      	movs	r3, #1
 8012666:	4804      	ldr	r0, [pc, #16]	; (8012678 <MX_DriverVbusHS+0x74>)
 8012668:	f7f5 f80e 	bl	8007688 <HAL_I2C_Mem_Write>
 801266c:	4603      	mov	r3, r0
 801266e:	73bb      	strb	r3, [r7, #14]
  if(status != HAL_OK)
  {

  }
  /* USER CODE END CHECK_STATUS_VBUS_HS */
}
 8012670:	bf00      	nop
 8012672:	3710      	adds	r7, #16
 8012674:	46bd      	mov	sp, r7
 8012676:	bd80      	pop	{r7, pc}
 8012678:	20002650 	.word	0x20002650

0801267c <_Znwj>:
 801267c:	b510      	push	{r4, lr}
 801267e:	2800      	cmp	r0, #0
 8012680:	bf14      	ite	ne
 8012682:	4604      	movne	r4, r0
 8012684:	2401      	moveq	r4, #1
 8012686:	4620      	mov	r0, r4
 8012688:	f000 f84c 	bl	8012724 <malloc>
 801268c:	b930      	cbnz	r0, 801269c <_Znwj+0x20>
 801268e:	f000 f807 	bl	80126a0 <_ZSt15get_new_handlerv>
 8012692:	b908      	cbnz	r0, 8012698 <_Znwj+0x1c>
 8012694:	f000 f814 	bl	80126c0 <abort>
 8012698:	4780      	blx	r0
 801269a:	e7f4      	b.n	8012686 <_Znwj+0xa>
 801269c:	bd10      	pop	{r4, pc}
	...

080126a0 <_ZSt15get_new_handlerv>:
 80126a0:	4b02      	ldr	r3, [pc, #8]	; (80126ac <_ZSt15get_new_handlerv+0xc>)
 80126a2:	6818      	ldr	r0, [r3, #0]
 80126a4:	f3bf 8f5b 	dmb	ish
 80126a8:	4770      	bx	lr
 80126aa:	bf00      	nop
 80126ac:	20002268 	.word	0x20002268

080126b0 <_ZdlPv>:
 80126b0:	f000 b840 	b.w	8012734 <free>

080126b4 <_ZSt17__throw_bad_allocv>:
 80126b4:	b508      	push	{r3, lr}
 80126b6:	f000 f803 	bl	80126c0 <abort>

080126ba <_ZSt20__throw_length_errorPKc>:
 80126ba:	b508      	push	{r3, lr}
 80126bc:	f000 f800 	bl	80126c0 <abort>

080126c0 <abort>:
 80126c0:	b508      	push	{r3, lr}
 80126c2:	2006      	movs	r0, #6
 80126c4:	f000 f94a 	bl	801295c <raise>
 80126c8:	2001      	movs	r0, #1
 80126ca:	f7ef fce9 	bl	80020a0 <_exit>
	...

080126d0 <__errno>:
 80126d0:	4b01      	ldr	r3, [pc, #4]	; (80126d8 <__errno+0x8>)
 80126d2:	6818      	ldr	r0, [r3, #0]
 80126d4:	4770      	bx	lr
 80126d6:	bf00      	nop
 80126d8:	20000080 	.word	0x20000080

080126dc <__libc_init_array>:
 80126dc:	b570      	push	{r4, r5, r6, lr}
 80126de:	4e0d      	ldr	r6, [pc, #52]	; (8012714 <__libc_init_array+0x38>)
 80126e0:	4c0d      	ldr	r4, [pc, #52]	; (8012718 <__libc_init_array+0x3c>)
 80126e2:	1ba4      	subs	r4, r4, r6
 80126e4:	10a4      	asrs	r4, r4, #2
 80126e6:	2500      	movs	r5, #0
 80126e8:	42a5      	cmp	r5, r4
 80126ea:	d109      	bne.n	8012700 <__libc_init_array+0x24>
 80126ec:	4e0b      	ldr	r6, [pc, #44]	; (801271c <__libc_init_array+0x40>)
 80126ee:	4c0c      	ldr	r4, [pc, #48]	; (8012720 <__libc_init_array+0x44>)
 80126f0:	f000 f982 	bl	80129f8 <_init>
 80126f4:	1ba4      	subs	r4, r4, r6
 80126f6:	10a4      	asrs	r4, r4, #2
 80126f8:	2500      	movs	r5, #0
 80126fa:	42a5      	cmp	r5, r4
 80126fc:	d105      	bne.n	801270a <__libc_init_array+0x2e>
 80126fe:	bd70      	pop	{r4, r5, r6, pc}
 8012700:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012704:	4798      	blx	r3
 8012706:	3501      	adds	r5, #1
 8012708:	e7ee      	b.n	80126e8 <__libc_init_array+0xc>
 801270a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801270e:	4798      	blx	r3
 8012710:	3501      	adds	r5, #1
 8012712:	e7f2      	b.n	80126fa <__libc_init_array+0x1e>
 8012714:	08012b7c 	.word	0x08012b7c
 8012718:	08012b7c 	.word	0x08012b7c
 801271c:	08012b7c 	.word	0x08012b7c
 8012720:	08012b84 	.word	0x08012b84

08012724 <malloc>:
 8012724:	4b02      	ldr	r3, [pc, #8]	; (8012730 <malloc+0xc>)
 8012726:	4601      	mov	r1, r0
 8012728:	6818      	ldr	r0, [r3, #0]
 801272a:	f000 b885 	b.w	8012838 <_malloc_r>
 801272e:	bf00      	nop
 8012730:	20000080 	.word	0x20000080

08012734 <free>:
 8012734:	4b02      	ldr	r3, [pc, #8]	; (8012740 <free+0xc>)
 8012736:	4601      	mov	r1, r0
 8012738:	6818      	ldr	r0, [r3, #0]
 801273a:	f000 b82f 	b.w	801279c <_free_r>
 801273e:	bf00      	nop
 8012740:	20000080 	.word	0x20000080

08012744 <memcpy>:
 8012744:	b510      	push	{r4, lr}
 8012746:	1e43      	subs	r3, r0, #1
 8012748:	440a      	add	r2, r1
 801274a:	4291      	cmp	r1, r2
 801274c:	d100      	bne.n	8012750 <memcpy+0xc>
 801274e:	bd10      	pop	{r4, pc}
 8012750:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012754:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012758:	e7f7      	b.n	801274a <memcpy+0x6>

0801275a <memmove>:
 801275a:	4288      	cmp	r0, r1
 801275c:	b510      	push	{r4, lr}
 801275e:	eb01 0302 	add.w	r3, r1, r2
 8012762:	d807      	bhi.n	8012774 <memmove+0x1a>
 8012764:	1e42      	subs	r2, r0, #1
 8012766:	4299      	cmp	r1, r3
 8012768:	d00a      	beq.n	8012780 <memmove+0x26>
 801276a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801276e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012772:	e7f8      	b.n	8012766 <memmove+0xc>
 8012774:	4283      	cmp	r3, r0
 8012776:	d9f5      	bls.n	8012764 <memmove+0xa>
 8012778:	1881      	adds	r1, r0, r2
 801277a:	1ad2      	subs	r2, r2, r3
 801277c:	42d3      	cmn	r3, r2
 801277e:	d100      	bne.n	8012782 <memmove+0x28>
 8012780:	bd10      	pop	{r4, pc}
 8012782:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012786:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801278a:	e7f7      	b.n	801277c <memmove+0x22>

0801278c <memset>:
 801278c:	4402      	add	r2, r0
 801278e:	4603      	mov	r3, r0
 8012790:	4293      	cmp	r3, r2
 8012792:	d100      	bne.n	8012796 <memset+0xa>
 8012794:	4770      	bx	lr
 8012796:	f803 1b01 	strb.w	r1, [r3], #1
 801279a:	e7f9      	b.n	8012790 <memset+0x4>

0801279c <_free_r>:
 801279c:	b538      	push	{r3, r4, r5, lr}
 801279e:	4605      	mov	r5, r0
 80127a0:	2900      	cmp	r1, #0
 80127a2:	d045      	beq.n	8012830 <_free_r+0x94>
 80127a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80127a8:	1f0c      	subs	r4, r1, #4
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	bfb8      	it	lt
 80127ae:	18e4      	addlt	r4, r4, r3
 80127b0:	f000 f91f 	bl	80129f2 <__malloc_lock>
 80127b4:	4a1f      	ldr	r2, [pc, #124]	; (8012834 <_free_r+0x98>)
 80127b6:	6813      	ldr	r3, [r2, #0]
 80127b8:	4610      	mov	r0, r2
 80127ba:	b933      	cbnz	r3, 80127ca <_free_r+0x2e>
 80127bc:	6063      	str	r3, [r4, #4]
 80127be:	6014      	str	r4, [r2, #0]
 80127c0:	4628      	mov	r0, r5
 80127c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80127c6:	f000 b915 	b.w	80129f4 <__malloc_unlock>
 80127ca:	42a3      	cmp	r3, r4
 80127cc:	d90c      	bls.n	80127e8 <_free_r+0x4c>
 80127ce:	6821      	ldr	r1, [r4, #0]
 80127d0:	1862      	adds	r2, r4, r1
 80127d2:	4293      	cmp	r3, r2
 80127d4:	bf04      	itt	eq
 80127d6:	681a      	ldreq	r2, [r3, #0]
 80127d8:	685b      	ldreq	r3, [r3, #4]
 80127da:	6063      	str	r3, [r4, #4]
 80127dc:	bf04      	itt	eq
 80127de:	1852      	addeq	r2, r2, r1
 80127e0:	6022      	streq	r2, [r4, #0]
 80127e2:	6004      	str	r4, [r0, #0]
 80127e4:	e7ec      	b.n	80127c0 <_free_r+0x24>
 80127e6:	4613      	mov	r3, r2
 80127e8:	685a      	ldr	r2, [r3, #4]
 80127ea:	b10a      	cbz	r2, 80127f0 <_free_r+0x54>
 80127ec:	42a2      	cmp	r2, r4
 80127ee:	d9fa      	bls.n	80127e6 <_free_r+0x4a>
 80127f0:	6819      	ldr	r1, [r3, #0]
 80127f2:	1858      	adds	r0, r3, r1
 80127f4:	42a0      	cmp	r0, r4
 80127f6:	d10b      	bne.n	8012810 <_free_r+0x74>
 80127f8:	6820      	ldr	r0, [r4, #0]
 80127fa:	4401      	add	r1, r0
 80127fc:	1858      	adds	r0, r3, r1
 80127fe:	4282      	cmp	r2, r0
 8012800:	6019      	str	r1, [r3, #0]
 8012802:	d1dd      	bne.n	80127c0 <_free_r+0x24>
 8012804:	6810      	ldr	r0, [r2, #0]
 8012806:	6852      	ldr	r2, [r2, #4]
 8012808:	605a      	str	r2, [r3, #4]
 801280a:	4401      	add	r1, r0
 801280c:	6019      	str	r1, [r3, #0]
 801280e:	e7d7      	b.n	80127c0 <_free_r+0x24>
 8012810:	d902      	bls.n	8012818 <_free_r+0x7c>
 8012812:	230c      	movs	r3, #12
 8012814:	602b      	str	r3, [r5, #0]
 8012816:	e7d3      	b.n	80127c0 <_free_r+0x24>
 8012818:	6820      	ldr	r0, [r4, #0]
 801281a:	1821      	adds	r1, r4, r0
 801281c:	428a      	cmp	r2, r1
 801281e:	bf04      	itt	eq
 8012820:	6811      	ldreq	r1, [r2, #0]
 8012822:	6852      	ldreq	r2, [r2, #4]
 8012824:	6062      	str	r2, [r4, #4]
 8012826:	bf04      	itt	eq
 8012828:	1809      	addeq	r1, r1, r0
 801282a:	6021      	streq	r1, [r4, #0]
 801282c:	605c      	str	r4, [r3, #4]
 801282e:	e7c7      	b.n	80127c0 <_free_r+0x24>
 8012830:	bd38      	pop	{r3, r4, r5, pc}
 8012832:	bf00      	nop
 8012834:	2000226c 	.word	0x2000226c

08012838 <_malloc_r>:
 8012838:	b570      	push	{r4, r5, r6, lr}
 801283a:	1ccd      	adds	r5, r1, #3
 801283c:	f025 0503 	bic.w	r5, r5, #3
 8012840:	3508      	adds	r5, #8
 8012842:	2d0c      	cmp	r5, #12
 8012844:	bf38      	it	cc
 8012846:	250c      	movcc	r5, #12
 8012848:	2d00      	cmp	r5, #0
 801284a:	4606      	mov	r6, r0
 801284c:	db01      	blt.n	8012852 <_malloc_r+0x1a>
 801284e:	42a9      	cmp	r1, r5
 8012850:	d903      	bls.n	801285a <_malloc_r+0x22>
 8012852:	230c      	movs	r3, #12
 8012854:	6033      	str	r3, [r6, #0]
 8012856:	2000      	movs	r0, #0
 8012858:	bd70      	pop	{r4, r5, r6, pc}
 801285a:	f000 f8ca 	bl	80129f2 <__malloc_lock>
 801285e:	4a21      	ldr	r2, [pc, #132]	; (80128e4 <_malloc_r+0xac>)
 8012860:	6814      	ldr	r4, [r2, #0]
 8012862:	4621      	mov	r1, r4
 8012864:	b991      	cbnz	r1, 801288c <_malloc_r+0x54>
 8012866:	4c20      	ldr	r4, [pc, #128]	; (80128e8 <_malloc_r+0xb0>)
 8012868:	6823      	ldr	r3, [r4, #0]
 801286a:	b91b      	cbnz	r3, 8012874 <_malloc_r+0x3c>
 801286c:	4630      	mov	r0, r6
 801286e:	f000 f83d 	bl	80128ec <_sbrk_r>
 8012872:	6020      	str	r0, [r4, #0]
 8012874:	4629      	mov	r1, r5
 8012876:	4630      	mov	r0, r6
 8012878:	f000 f838 	bl	80128ec <_sbrk_r>
 801287c:	1c43      	adds	r3, r0, #1
 801287e:	d124      	bne.n	80128ca <_malloc_r+0x92>
 8012880:	230c      	movs	r3, #12
 8012882:	6033      	str	r3, [r6, #0]
 8012884:	4630      	mov	r0, r6
 8012886:	f000 f8b5 	bl	80129f4 <__malloc_unlock>
 801288a:	e7e4      	b.n	8012856 <_malloc_r+0x1e>
 801288c:	680b      	ldr	r3, [r1, #0]
 801288e:	1b5b      	subs	r3, r3, r5
 8012890:	d418      	bmi.n	80128c4 <_malloc_r+0x8c>
 8012892:	2b0b      	cmp	r3, #11
 8012894:	d90f      	bls.n	80128b6 <_malloc_r+0x7e>
 8012896:	600b      	str	r3, [r1, #0]
 8012898:	50cd      	str	r5, [r1, r3]
 801289a:	18cc      	adds	r4, r1, r3
 801289c:	4630      	mov	r0, r6
 801289e:	f000 f8a9 	bl	80129f4 <__malloc_unlock>
 80128a2:	f104 000b 	add.w	r0, r4, #11
 80128a6:	1d23      	adds	r3, r4, #4
 80128a8:	f020 0007 	bic.w	r0, r0, #7
 80128ac:	1ac3      	subs	r3, r0, r3
 80128ae:	d0d3      	beq.n	8012858 <_malloc_r+0x20>
 80128b0:	425a      	negs	r2, r3
 80128b2:	50e2      	str	r2, [r4, r3]
 80128b4:	e7d0      	b.n	8012858 <_malloc_r+0x20>
 80128b6:	428c      	cmp	r4, r1
 80128b8:	684b      	ldr	r3, [r1, #4]
 80128ba:	bf16      	itet	ne
 80128bc:	6063      	strne	r3, [r4, #4]
 80128be:	6013      	streq	r3, [r2, #0]
 80128c0:	460c      	movne	r4, r1
 80128c2:	e7eb      	b.n	801289c <_malloc_r+0x64>
 80128c4:	460c      	mov	r4, r1
 80128c6:	6849      	ldr	r1, [r1, #4]
 80128c8:	e7cc      	b.n	8012864 <_malloc_r+0x2c>
 80128ca:	1cc4      	adds	r4, r0, #3
 80128cc:	f024 0403 	bic.w	r4, r4, #3
 80128d0:	42a0      	cmp	r0, r4
 80128d2:	d005      	beq.n	80128e0 <_malloc_r+0xa8>
 80128d4:	1a21      	subs	r1, r4, r0
 80128d6:	4630      	mov	r0, r6
 80128d8:	f000 f808 	bl	80128ec <_sbrk_r>
 80128dc:	3001      	adds	r0, #1
 80128de:	d0cf      	beq.n	8012880 <_malloc_r+0x48>
 80128e0:	6025      	str	r5, [r4, #0]
 80128e2:	e7db      	b.n	801289c <_malloc_r+0x64>
 80128e4:	2000226c 	.word	0x2000226c
 80128e8:	20002270 	.word	0x20002270

080128ec <_sbrk_r>:
 80128ec:	b538      	push	{r3, r4, r5, lr}
 80128ee:	4c06      	ldr	r4, [pc, #24]	; (8012908 <_sbrk_r+0x1c>)
 80128f0:	2300      	movs	r3, #0
 80128f2:	4605      	mov	r5, r0
 80128f4:	4608      	mov	r0, r1
 80128f6:	6023      	str	r3, [r4, #0]
 80128f8:	f7ef fbdc 	bl	80020b4 <_sbrk>
 80128fc:	1c43      	adds	r3, r0, #1
 80128fe:	d102      	bne.n	8012906 <_sbrk_r+0x1a>
 8012900:	6823      	ldr	r3, [r4, #0]
 8012902:	b103      	cbz	r3, 8012906 <_sbrk_r+0x1a>
 8012904:	602b      	str	r3, [r5, #0]
 8012906:	bd38      	pop	{r3, r4, r5, pc}
 8012908:	2000bb00 	.word	0x2000bb00

0801290c <_raise_r>:
 801290c:	291f      	cmp	r1, #31
 801290e:	b538      	push	{r3, r4, r5, lr}
 8012910:	4604      	mov	r4, r0
 8012912:	460d      	mov	r5, r1
 8012914:	d904      	bls.n	8012920 <_raise_r+0x14>
 8012916:	2316      	movs	r3, #22
 8012918:	6003      	str	r3, [r0, #0]
 801291a:	f04f 30ff 	mov.w	r0, #4294967295
 801291e:	bd38      	pop	{r3, r4, r5, pc}
 8012920:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012922:	b112      	cbz	r2, 801292a <_raise_r+0x1e>
 8012924:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012928:	b94b      	cbnz	r3, 801293e <_raise_r+0x32>
 801292a:	4620      	mov	r0, r4
 801292c:	f000 f830 	bl	8012990 <_getpid_r>
 8012930:	462a      	mov	r2, r5
 8012932:	4601      	mov	r1, r0
 8012934:	4620      	mov	r0, r4
 8012936:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801293a:	f000 b817 	b.w	801296c <_kill_r>
 801293e:	2b01      	cmp	r3, #1
 8012940:	d00a      	beq.n	8012958 <_raise_r+0x4c>
 8012942:	1c59      	adds	r1, r3, #1
 8012944:	d103      	bne.n	801294e <_raise_r+0x42>
 8012946:	2316      	movs	r3, #22
 8012948:	6003      	str	r3, [r0, #0]
 801294a:	2001      	movs	r0, #1
 801294c:	e7e7      	b.n	801291e <_raise_r+0x12>
 801294e:	2400      	movs	r4, #0
 8012950:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012954:	4628      	mov	r0, r5
 8012956:	4798      	blx	r3
 8012958:	2000      	movs	r0, #0
 801295a:	e7e0      	b.n	801291e <_raise_r+0x12>

0801295c <raise>:
 801295c:	4b02      	ldr	r3, [pc, #8]	; (8012968 <raise+0xc>)
 801295e:	4601      	mov	r1, r0
 8012960:	6818      	ldr	r0, [r3, #0]
 8012962:	f7ff bfd3 	b.w	801290c <_raise_r>
 8012966:	bf00      	nop
 8012968:	20000080 	.word	0x20000080

0801296c <_kill_r>:
 801296c:	b538      	push	{r3, r4, r5, lr}
 801296e:	4c07      	ldr	r4, [pc, #28]	; (801298c <_kill_r+0x20>)
 8012970:	2300      	movs	r3, #0
 8012972:	4605      	mov	r5, r0
 8012974:	4608      	mov	r0, r1
 8012976:	4611      	mov	r1, r2
 8012978:	6023      	str	r3, [r4, #0]
 801297a:	f7ef fb81 	bl	8002080 <_kill>
 801297e:	1c43      	adds	r3, r0, #1
 8012980:	d102      	bne.n	8012988 <_kill_r+0x1c>
 8012982:	6823      	ldr	r3, [r4, #0]
 8012984:	b103      	cbz	r3, 8012988 <_kill_r+0x1c>
 8012986:	602b      	str	r3, [r5, #0]
 8012988:	bd38      	pop	{r3, r4, r5, pc}
 801298a:	bf00      	nop
 801298c:	2000bb00 	.word	0x2000bb00

08012990 <_getpid_r>:
 8012990:	f7ef bb6e 	b.w	8002070 <_getpid>

08012994 <strncpy>:
 8012994:	b570      	push	{r4, r5, r6, lr}
 8012996:	3901      	subs	r1, #1
 8012998:	4604      	mov	r4, r0
 801299a:	b902      	cbnz	r2, 801299e <strncpy+0xa>
 801299c:	bd70      	pop	{r4, r5, r6, pc}
 801299e:	4623      	mov	r3, r4
 80129a0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80129a4:	f803 5b01 	strb.w	r5, [r3], #1
 80129a8:	1e56      	subs	r6, r2, #1
 80129aa:	b92d      	cbnz	r5, 80129b8 <strncpy+0x24>
 80129ac:	4414      	add	r4, r2
 80129ae:	42a3      	cmp	r3, r4
 80129b0:	d0f4      	beq.n	801299c <strncpy+0x8>
 80129b2:	f803 5b01 	strb.w	r5, [r3], #1
 80129b6:	e7fa      	b.n	80129ae <strncpy+0x1a>
 80129b8:	461c      	mov	r4, r3
 80129ba:	4632      	mov	r2, r6
 80129bc:	e7ed      	b.n	801299a <strncpy+0x6>

080129be <strstr>:
 80129be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80129c0:	7803      	ldrb	r3, [r0, #0]
 80129c2:	b17b      	cbz	r3, 80129e4 <strstr+0x26>
 80129c4:	4604      	mov	r4, r0
 80129c6:	7823      	ldrb	r3, [r4, #0]
 80129c8:	4620      	mov	r0, r4
 80129ca:	1c66      	adds	r6, r4, #1
 80129cc:	b17b      	cbz	r3, 80129ee <strstr+0x30>
 80129ce:	1e4a      	subs	r2, r1, #1
 80129d0:	1e63      	subs	r3, r4, #1
 80129d2:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80129d6:	b14d      	cbz	r5, 80129ec <strstr+0x2e>
 80129d8:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80129dc:	42af      	cmp	r7, r5
 80129de:	4634      	mov	r4, r6
 80129e0:	d0f7      	beq.n	80129d2 <strstr+0x14>
 80129e2:	e7f0      	b.n	80129c6 <strstr+0x8>
 80129e4:	780b      	ldrb	r3, [r1, #0]
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	bf18      	it	ne
 80129ea:	2000      	movne	r0, #0
 80129ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80129ee:	4618      	mov	r0, r3
 80129f0:	e7fc      	b.n	80129ec <strstr+0x2e>

080129f2 <__malloc_lock>:
 80129f2:	4770      	bx	lr

080129f4 <__malloc_unlock>:
 80129f4:	4770      	bx	lr
	...

080129f8 <_init>:
 80129f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129fa:	bf00      	nop
 80129fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80129fe:	bc08      	pop	{r3}
 8012a00:	469e      	mov	lr, r3
 8012a02:	4770      	bx	lr

08012a04 <_fini>:
 8012a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a06:	bf00      	nop
 8012a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012a0a:	bc08      	pop	{r3}
 8012a0c:	469e      	mov	lr, r3
 8012a0e:	4770      	bx	lr
